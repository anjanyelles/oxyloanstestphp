let userisIn = "local";

let currentDisburdedBtnObj = "";
let currentL4RejectBtnObj = "";
let isTest = false;
let totalEntries = 0;
let apiBaseURLOXY = "";
let fdbranchcity = "";
let bulkinviteImage="";
let myChart="";

if (userisIn == "prod") {
	apiBaseURLOXY = "https://fintech.oxyloans.com/oxyloans/v1/user/";
} else {
	apiBaseURLOXY =
		"http://35.154.48.120:8080/oxynew/v1/user/";
}
$(document).ready(function () {
	(function () {
		checkuserTypeBeforeLoad();
		getSessionExpireData();
	})();

	$("#partialPaymentAmount,#PaymentAmount,#penalty,#emiAmount").on(
		"keypress",
		function (e) {
			var $this = $(this);
			var regex = new RegExp("^[0-9\b]+$");
			var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);
			if ($this.val().length > 30) {
				e.preventDefault();
				return false;
			}
			if (regex.test(str)) {
				return true;
			}
			e.preventDefault();
			return false;
		}
	);

	console.log(userisIn);
	viewEMICARD();
	getnotificationDetails();

	$("#fdcreated_Date").datepicker({
		todayHighlight: true,
		format: "dd/mm/yyyy",
		autoclose: true,
		endDate: new Date(),
	});

	$(".fdstartdatepicker,.fdenddatepicker").datepicker({
		todayHighlight: true,
		format: "yyyy-mm-dd",
		autoclose: true,
		endDate: new Date(),
	});

	$(".invoiceenddate,.fdinvoicestartDate").datepicker({
		todayHighlight: true,
		format: "yyyy-mm-dd",
		autoclose: true,
		endDate: new Date(),
	});

		$(".registerUserEnddate,.registerStartdate").datepicker({
		todayHighlight: true,
		format: "yyyy-mm-dd",
		autoclose: true,
		endDate: new Date(),
	});


	$(".fdmonthlystartDatepicker,.fdmonthlyenddatepicker").datepicker({
		todayHighlight: true,
		format: "yyyy-mm-dd",
		autoclose: true,
		endDate: new Date(),
	});

	$(".fdmonthlyclosedstartDatepicker,.fdmonthlyfdenddatepicker").datepicker({
		todayHighlight: true,
		format: "yyyy-mm-dd",
		autoclose: true,
		endDate: new Date(),
	});

	$(".fdclosedstartDatepicker,.fdclosedfdenddatepicker").datepicker({
		todayHighlight: true,
		format: "yyyy-mm-dd",
		autoclose: true,
		endDate: new Date(),
	});


	$(".dashboardStart,.dashboardEnd").datepicker({
		todayHighlight: true,
		format: "yyyy-mm-dd",
		autoclose: true,
		endDate: new Date(),
	});



	$("#closingFddate").datepicker({
		todayHighlight: true,
		format: "dd/mm/yyyy",
		autoclose: true,
	});



	$(".deleteSession").click(function () {
		signout();
	});

	$(".showUpdateBlock").click(function () {
		var emiNum = $(this).attr("data-emiNum");
		$(".display_emi_block-" + emiNum).show("slow");
	});

	$(".btn-submitFeeinfo").click(function () {
		var loanIDis = $(".loandId").val();
		var userType = $(".userType").val();
		var amount = $(".enteredFeeValue").val();

		if (userisIn == "local") {
			var adminUrl =
				apiBaseURLOXY + "loan/" + loanIDis + "/feepaid?primaryType=" + userType;
		} else {
			var adminUrl =
				apiBaseURLOXY + "loan/" + loanIDis + "/feepaid?primaryType=" + userType;
		}

		var postData = { feePaid: amount };
		var postData = JSON.stringify(postData);
		console.log(postData);

		$.ajax({
			url: adminUrl,
			type: "POST",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				$("#modal-feeStatus").modal("show");
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	});

	setTimeout(function () {
		$(".downloadAgreeent").click(function () {
			const suserId = getCookie("sUserId");
			const sprimaryType = getCookie("sUserType");
			const saccessToken = getCookie("saccessToken");

			userId = suserId;
			primaryType = sprimaryType;
			accessToken = saccessToken;

			var requestID = $(this).attr("data-reqid");

			if (userisIn == "local") {
				var getStatUrl =
					apiBaseURLOXY +
					userId +
					"/loan/ADMIN/request/" +
					requestID +
					"/download";
			} else {
				var getStatUrl =
					apiBaseURLOXY +
					userId +
					"/loan/ADMIN/request/" +
					  requestID +
		   		    "/download";
			  }
			$.ajax({
				url: getStatUrl,
				type: "GET",
				success: function (data, textStatus, xhr) {
					window.open(data.downloadUrl, "_blank");
					$("#modal-agreement").modal("show");
				},
				error: function (xhr, textStatus, errorThrown) {
					console.log("Error Something");
				},
				beforeSend: function (xhr) {
					xhr.setRequestHeader("accessToken", accessToken);
				},
			});
		});
	}, 1000);

	//*********     LENDER/BORROWER LOAN APPLICATION SEARCH STARTS **********//
	$("#lenderSearch,#borrowerSearch").on("change", function () {

		if ($("#lenderSearch,#borrowerSearch").val() == "name") {
			$(".name").show();
			$(".utm,.id,.roi,.amount,.oxyscore,.mobileNumber,.city").hide();
		} else if ($("#lenderSearch,#borrowerSearch").val() == "id") {
			$(".utm,.name,.roi,.amount,.oxyscore,.mobileNumber,.city").hide();

			$(".id").show();
		} else if ($("#lenderSearch,#borrowerSearch").val() == "amount&city") {
			$(".utm,.name,.roi,.id,.oxyscore,.mobileNumber").hide();
			$(".city").show();
			$(".amount").show();
		} else if ($("#lenderSearch,#borrowerSearch").val() == "amount") {
			$(".utm,.name,.roi,.id,.oxyscore,.mobileNumber,.city").hide();
			$(".amount").show();
		} else if ($("#lenderSearch,#borrowerSearch").val() == "roi") {
			$(".name,.roi,.id,.amount,.oxyscore,.mobileNumber,.city").hide();

			$(".roi").show();
		} else if ($("#lenderSearch,#borrowerSearch").val() == "oxyscore") {
			$(".utm,.name,.roi,.amount,.id,.mobileNumber,.city").hide();
			$(".oxyscore").show();
		} else if ($("#lenderSearch,#borrowerSearch").val() == "city") {
			$(".utm,.name,.roi,.amount,.id,.mobileNumber,.oxyscore").hide();
			$(".city").show();
		} else if ($("#lenderSearch,#borrowerSearch").val() == "mobileNumber") {
			$(".utm,.name,.roi,.amount,.id,.city,.oxyscore").hide();
			$(".mobileNumber").show();
		} else if ($("#lenderSearch,#borrowerSearch").val() == "utm") {
			$(".mobileNumber,.name,.roi,.amount,.id,.city,.oxyscore").hide();
			$(".utm").show();
		} else if ($("#lenderSearch,#borrowerSearch").val() == "utm&amount") {
			$(".mobileNumber,.name,.roi,.id,.city,.oxyscore").hide();
			$(".utm").show();
			$(".amount").show();
		} else if ($("#lenderSearch,#borrowerSearch").val() == "utm&city") {
			$(".mobileNumber,.name,.roi,.amount,.id,.oxyscore").hide();
			$(".utm").show();
			$(".city").show();
		} else {
			$(".utm,.name,.roi,.amount,.id,.oxyscore,.mobileNumber,.city").hide();
		}
	});

	//*********     LENDER/BORROWER LOAN APPLICATION SEARCH ENDS  **********//
	//*********     RUNNING/CLOSED LOANS  SEARCH STARTS           **********//

	$("#Search").on("change", function () {

		if ($("#Search").val() == "loanID") {
			$(".loanid").show();
			$(
				".date1,.date2,.panNumber,.applicationid,.oxyscore,.lenderid,.borrowerid,.roi,.amount,.city,.mobileNumber,.userName"
			).hide();
		} else if ($("#Search").val() == "appID") {
			$(".applicationid").show();
			$(
				".date1,.date2,.utm,.panNumber,.loanid,.oxyscore,.lenderid,.borrowerid,.roi,.amount,.city,.mobileNumber,.userName"
			).hide();
		} else if ($("#Search").val() == "lenderID") {
			$(".lenderid").show();
			$(
				".date1,.date2,.utm,.loanid,.panNumber,.oxyscore,.applicationid,.borrowerid,.roi,.amount,.city,.mobileNumber,.userName"
			).hide();
		} else if ($("#Search").val() == "borrowerID") {
			$(".borrowerid").show();
			$(
				".date1,.date2,.utm,.loanid,.panNumber,.oxyscore,.applicationid,.lenderid,.roi,.amount,.city,.mobileNumber,.userName"
			).hide();
		} else if ($("#Search").val() == "roi") {
			$(".roi").show();
			$(
				".date1,.date2,.utm,.loanid,.panNumber,.oxyscore,.applicationid,.lenderid,.borrowerid,.amount,.city,.mobileNumber,.userName"
			).hide();
		} else if ($("#Search").val() == "amount&city") {
			$(".amount").show();
			$(".city").show();
			$(
				".date1,.date2,.utm,.loanid,.oxyscore,.panNumber,.applicationid,.lenderid,.borrowerid,.roi,.mobileNumber,.userName"
			).hide();
		} else if ($("#Search").val() == "amount") {
			$(".amount").show();
			$(
				".date1,.date2,.utm,.loanid,.oxyscore,.panNumber,.applicationid,.lenderid,.city,.borrowerid,.roi,.mobileNumber,.userName"
			).hide();
		} else if ($("#Search").val() == "city") {
			$(".city").show();
			$(
				".date1,.date2,.utm,.loanid,.oxyscore,.panNumber,.applicationid,.lenderid,.borrowerid,.amount,.roi,.mobileNumber,.userName"
			).hide();
		} else if ($("#Search").val() == "mobileNumber") {
			$(".mobileNumber").show();
			$(
				".date1,.date2,.utm,.loanid,.oxyscore,.panNumber,.applicationid,.lenderid,.borrowerid,.amount,.roi,.city,.userName"
			).hide();
		} else if ($("#Search").val() == "userName") {
			$(".userName").show();
			$(".date1,.date2,.utm,.loanid,.oxyscore,.panNumber,.applicationid,.lenderid,.borrowerid,.amount,.roi,.city,mobileNumber"
			).hide();
		} else if ($("#Search").val() == "oxyscore") {
			$(".oxyscore").show();
			$(
				".date1,.date2,.utm,.loanid,.lenderid,.panNumber,.borrowerid,.roi,.amount,.city,.mobileNumber,.userName,.applicationid"
			).hide();
		} else if ($("#Search").val() == "utm") {
			$(".utm").show();
			$(
				".date1,.date2,.oxyscore,.loanid,.lenderid,.panNumber,.borrowerid,.roi,.amount,.city,.mobileNumber,.userName,.applicationid"
			).hide();
		} else if ($("#Search").val() == "utm&amount") {
			$(".utm").show();
			$(".amount").show();
			$(
				".date1,.date2,.oxyscore,.loanid,.lenderid,.panNumber,.borrowerid,.roi,.city,.mobileNumber,.userName,.applicationid"
			).hide();
		} else if ($("#Search").val() == "utm&city") {
			$(".utm").show();
			$(".city").show();
			$(
				".date1,.date2,.oxyscore,.loanid,.amount,.panNumber,.lenderid,.borrowerid,.roi,.mobileNumber,.userName,.applicationid"
			).hide();
		} else if ($("#Search").val() == "date") {
			$(".date1").show();
			$(".date2").show();
			$(
				".utm,.city.oxyscore,.loanid,.amount,.panNumber,.lenderid,.borrowerid,.roi,.mobileNumber,.userName,.applicationid"
			).hide();
		} else if ($("#Search").val() == "panumber") {
			$(".panNumber").show();
			$(
				".utm,.city.oxyscore,.loanid,.amount,.lenderid,.borrowerid,.roi,.mobileNumber,.userName,.applicationid"
			).hide();
		} else if ($("#Search").val() == "interestMonth&Year") {
			$(".interestStartDate").show();
			$(".interestEndDate").show();
			$(".month").show();
			$(".year").show();
			$(
				".utm,.city.oxyscore,.loanid,.amount,.lenderid,.borrowerid,.roi,.mobileNumber,.userName,.applicationid"
			).hide();
		} else if ($("#Search").val() == "viewdealsPayouts") {
			$(".dealtypeinfo").show();
			$(".dealpayouttype").show();
			$(
				".utm,.city.oxyscore,.loanid,.amount,.lenderid,.borrowerid,.roi,.mobileNumber,.userName,.applicationid"
			).hide();
		} else if ($("#Search").val() == "refereelenderId") {
			$(".refereeLenderIdSearch").show();
			$(".refereePrimaryType").show();
		} else if ($("#Search").val() == "referalEarning") {
			$(".referalEarningMonth").show();
			$(".referalEarningMonthyear").show();
		} else if ($("#Search").val() == "TransactionsAlert") {
			$(".TransactionsAlertmonth").show();
			$(".TransactionsAlertYear").show();
			$(".TransactionsAlertType").show();
		} else if ($("#Search").val() == "CMSOPTIONS") {
			$(".cmsDropdate").show();
			$(".cmsDropMonth").show();
			$(".cmsDropYear").show();
			$(".cmsSearchType").show();
		} else if ($("#Search").val() == "dealIdStatus") {
			$(".dealId").show();
			$(".loanStatus").show();
		} else if ($("#Search").val() == "daterange") {
			$(".fdstatsstartdate").show();
			$(".fdstatsenddate").show();
		} else if ($("#Search").val() == "invoiceDateRange") {
			$(".fdinvoicestartdate").show();
			$(".fdinvoiceEnddate").show();
		} else if ($("#Search").val() == "fdmonthlyinfo") {
			$(".fdmonthlystartdate").show();
			$(".fdmonthlyEnddate").show();
		} else if ($("#Search").val() == "fdclosedDateRange") {
			$(".fdclosedstartdate").show();
			$(".fdclosedInfoEnddate").show();
		}else if ($("#Search").val() == "registerStartEndDate") {
			$(".registerStartdatediv").show();
			$(".registerUserEnddatediv").show();
		}else if ($("#Search").val() == "dashboardGraph") {
			$(".dasboardgraphStart").show();
			$(".dasboardgraphEnd").show();
		}else if($("#Search").val() == "cmsbeforefile"){	
			$(".cmsbeforestartdatediv").show();
			$(".cmsbeforeenddatediv").show();
			$(".beforefileexecutedType").show();
		}else {
			$(".loanid").hide();
			$(".applicationid").hide();
			$(".lenderid").hide();
			$(".borrowerid").hide();
			$(".roi").hide();
			$(".amount").hide();
			$(".city").hide();
			$(".mobileNumber").hide();
			$(".userName").hide();
			$(".oxyscore").hide();
			$(".utm").hide();
			$(".panNumber").hide();
			$(".fdstatsstartdate").hide();
			$(".fdstatsenddate").hide();
			$(".fdinvoicestartdate").hide();
			$(".fdinvoiceEnddate").hide();
			$(".fdmonthlystartdate").hide();
			$(".fdmonthlyEnddate").hide();
			$(".fdclosedstartdate").hide();
			$(".fdclosedInfoEnddate").hide();
			$(".registerStartdatediv").hide();
			$(".registerUserEnddatediv").hide();
			$(".cmsbeforestartdatediv").hide();
			$(".cmsbeforeenddatediv").hide();
		    $(".beforefileexecutedType").hide();
			$(".dasboardgraphStart").hide();
			$(".dasboardgraphEnd").hide();
		}
	});

	//*********     RUNNING/CLOSED LOANS  SEARCH ENDS **********//

	$("#SearchMinEnach").on("change", function () {
		if ($("#SearchMinEnach").val() == "borrowerID") {
			$(".borrowerid").show();
			$(".userName").hide();
		} else if ($("#SearchMinEnach").val() == "userName") {
			$(".userName").show();
			$(".borrowerid").hide();
		} else {
			$(".borrowerid").hide();
			$(".userName").hide();
		}
	});
});


function checkuserTypeBeforeLoad() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const getUserUtm = getCookie("partnerUtmName");

	if (sprimaryType == "PAYMENTSADMIN") {
		$(".displaySuperAdmin,.partnerDashboard,.partnerAdmin").hide();
		$(".hideInterestPayments").hide();
		$(".approval_2_H2H,.displayH2HAdmin").hide();
		$(".movefileTOoutput").hide();

		$(".displayAdminType").html("Payments Admin");
		$(".approvingUser").html("Bhargav Approve");
	} else if (sprimaryType == "SUBBUADMIN" || sprimaryType == "SUBHASHADMIN") {
		$(
			".displaySuperAdmin,.displayPaymentAdmin,.partnerDashboard,.partnerAdmin"
		).hide();
		$(".hideInterestPayments").hide();
		$(".approval_2_H2H").hide();
		$(".displayAdminType").html("SUBBUADMIN");
		$(".approvingUser").html("subbu Approve");
		$(".movefileTOoutput").hide();
	} else if (sprimaryType == "PARTNER") {
		$(".utmPartnerName").val(getUserUtm);
		$(
			".displaySuperAdmin,.displayPaymentAdmin,.displayH2HAdmin,.partnerAdmin"
		).hide();
		$(".hideInterestPayments").hide();
		$(".approval_2_H2H").hide();
		$(".displayAdminType").html(getUserUtm);
		$(".logo-lg").html("");
	} else if (sprimaryType == "PARTNERADMIN") {
		$(
			".displaySuperAdmin,.displayPaymentAdmin,.displayH2HAdmin,.partnerDashboard,.dropdown-toggle"
		).hide();
		$(".hideInterestPayments").hide();
		$(".partnerAdmin").hidde();
		$(".approval_2_H2H").hide();
		$(".displayAdminType").html(getUserUtm);
		$(".logo-lg").html("");
	} else if (
		sprimaryType == "OXYWHEELSADMIN" ||
		sprimaryType == "NOTBORROWER"
	) {
		$(".displayH2HAdmin,.partnerDashboard").hide();
		$(".approval_2_H2H").show();
		$(".approvingUser").html("Radha Approve");
	} else if (sprimaryType == "ADMIN") {
		$(".displayH2HAdmin,.partnerDashboard").hide();
		$(".approval_2_H2H").show();
		$(".approvingUser").html("Radha Approve");
	} else if (sprimaryType == "HELPDESKADMIN") {
		$(".hideInterestPayments").hide();
	}
}

function writeCookie(name, value, days) {
	var date, expires;
	console.log(name);
	console.log(value);
	if (days) {
		date = new Date();
		date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
		expires = "; expires=" + date.toGMTString();
	} else {
		expires = "";
	}
	document.cookie = name + "=" + value + expires + "; path=/";
}

function getCookie(cname) {
	var name = cname + "=";
	var ca = document.cookie.split(";");
	for (var i = 0; i < ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0) == " ") {
			c = c.substring(1);
		}
		if (c.indexOf(name) == 0) {
			return c.substring(name.length, c.length);
		}
	}
	return "";
}

function checkCookie() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("primaryType");
	const saccessToken = getCookie("accessToken");

	return suserId, sprimaryType, saccessToken;
	if (suserId == "") {
		window.location = "userlogin";
	}
}
// ***************** DASHBOARD DATA*****************///

function loadBoxforWriteComments(suserId, sprimaryType, saccessToken, pid) {
	$("#loadBoxforWriteComments").modal("show");
	$(".pidforComment").attr("data-id", pid);
}

function saveAdminComments(pid) {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var pid = $(".saveAdminComments").attr("data-id");
	var givenRating = $(".rating-value").val();
	var givenComments = $(".superAdminComments").val();
	var rateOfInterestb = $("#rateOfInterestb").val();
	var rateOfInterestl = $("#rateOfInterestl").val();
	var rateOfInterestd = $("#rateOfInterestd").val();
	var duration = $("#duration").val();
	var lendermethod = $("input[name='repaymentMethodl']:checked").val();
	var borrowermethod = $("input[name='repaymentMethodb']:checked").val();
	var durationType = $("input[name='durationtype']:checked").val();

	if (rateOfInterestd != 0) {
		rateOfInterestb = rateOfInterestd;
	}

	var isValid = true;

	if (givenComments == "" || givenRating == "") {
		alert("Make sure you enter Comments and Rating!");
		return false;
	}

	if (rateOfInterestb == "") {
		$(".brateOfInterestError").show();
		isValid = false;
	} else {
		$(".brateOfInterestError").hide();
	}

	if (rateOfInterestl == "") {
		$(".lrateOfInterestError").show();
		isValid = false;
	} else {
		$(".lrateOfInterestError").hide();
	}

	if (duration == "") {
		$(".durationError").show();
		isValid = false;
	} else {
		$(".durationError").hide();
	}

	if (userisIn == "local") {
		var saveCommentsUrl = apiBaseURLOXY + pid + "/commentsByRadhaSir";
	} else {
		var saveCommentsUrl = apiBaseURLOXY + pid + "/commentsByRadhaSir";
	}

	var postData = {
		comments: givenComments,
		rating: givenRating,
		rateOfInterestToBorrower: rateOfInterestb,
		rateOfInterestToLender: rateOfInterestl,
		durationToTheApplication: duration,
		durationType: durationType,
		repaymentMethodForBorrower: borrowermethod,
		repaymentMethodForLender: lendermethod,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	if (isValid == true) {
		$.ajax({
			url: saveCommentsUrl,
			type: "POST",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				$("#loadBoxforWriteComments").modal("hide");
				alert("Comments & Ratings are Saved.");
				window.location = "dashboard";
			},
			error: function (request, error) {
				if (arguments[0].responseJSON.errorCode == 109) {
					alert("Comments are already updated");
					$("#loadBoxforWriteComments").modal("hide");
				}
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

const loadadminDashbord = (pid) => {

	$("#loadingSec").show();
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (pid != "" || pid != "0") {
		loadBoxforWriteComments(suserId, sprimaryType, saccessToken, pid);
	}

	const id = suserId;
	const primaryType = sprimaryType;
	const accessToken = saccessToken;

	const adminUrl =
		userisIn == "local"
			? `${apiBaseURLOXY}${id}/dashboard/ADMIN?current=false`
			: `${apiBaseURLOXY}${id}/dashboard/ADMIN?current=false`;

	$.ajax({
		url: adminUrl,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$(".registeredusers").html(data.registeredUsersCount);
			$(".totalLenders").html(data.lendersCount);
			$(".totalBorrowers").html(data.borrowersCount);
			$(".todaysUsers").html(data.todayRegisteredUsersCount);

			// $(".lenderRegistered").html(' LR : '+data.todayRegisteredLenders);
			// $(".borrowerRegistred").html(' BR : '+data.todayRegisteredBorrowers);

			$(".totalborrowersRequestedAmount").html(data.borrowersRequestedAmount);
			$(".totallendersCommitedAmount").html(data.lendersCommitedAmount);
			$(".toatalAgreements").html(data.noOfAggrements);
			$(".totalConversationStage").html(data.noOfConversationRequests);
			$(".totalOfferAmount").html(data.totalOfferAmount);
			$(".totalDisbursedAmount").html(data.totalDisbursedAmount);
			$("#loadingSec").hide();
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			window.location = "userlogin";
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

//***************** DASHBOARD DATA ENDS*****************//

function loadadminLatestloanAgreements() {
	
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	id = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;
	var postData = {"leftOperand":{"fieldName":"userPrimaryType","fieldValue":"LENDER","operator":"EQUALS"},"logicalOperator":"AND","rightOperand":{"fieldName":"user.status","fieldValue":"REGISTERED","operator":"EQUALS"},"page":{"pageNo":1,"pageSize":10},"sortBy":"loanRequestedDate","sortOrder":"DESC"}
	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var adminUrl = apiBaseURLOXY + id + "/loan/" + "ADMIN" + "/request/testsearch";
	} else {
		var adminUrl = apiBaseURLOXY + id + "/loan/" + "ADMIN" + "/request/testsearch";
	}

	$.ajax({
		url: adminUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("adminuserstatus").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });
			$("#displaylists").html(html);
			var displayPageNo = data.totalCount / 3;
			displayPageNo = displayPageNo + 1;
			$(".latestloanAgreementsPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 3,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
							var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								fieldValue: "LENDER",
								operator: "EQUALS",
							},

							logicalOperator: "AND",

							rightOperand: {
								fieldName: "user.status",
								fieldValue: "REGISTERED",
								operator: "EQUALS",
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					var postData = JSON.stringify(postData);

					if (userisIn == "local") {
						var adminUrl =
							apiBaseURLOXY + id + "/loan/" + primaryType + "/search";
					} else {
						// https://fintech.oxyloans.com/oxyloans/
						var adminUrl =
							apiBaseURLOXY + id + "/loan/" + primaryType + "/search";
					}
					$.ajax({
						url: adminUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("adminuserstatus").innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#displaylists").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}




function getfeepeningusers() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var pendingusers = apiBaseURLOXY +  "lenders_fee_status";
	} else {
		var pendingusers = apiBaseURLOXY  + "lenders_fee_status";
	}

	$.ajax({
		url: pendingusers,
		type: "GET",

		success: function (data, textStatus, xhr) {
			console.log(data);

            $(".pendinguserhref").attr("href",data.lenderExcelDownload);

			if (data.length == 0) {
				$("#feependingusernodata").show();
			} else {
				var template = document.getElementById(
					"feependingUsersInformation"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.lenderFeeTransactionResponse,
				});
				$("#feependingUsersInformationtable").html(html);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}


const updatenewMembershipFee = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const feeAmount = $("#membershipamount").val();
	const  lenderFeePayments= $("#membershipFeeTenure").val();

	let isValid = true;

	isValid =
		feeAmount === ""
			? ($(".errormembershipAmount").show(), false)
			: ($(".errormembershipAmount").hide(), true);
	isValid =
		lenderFeePayments === ""
			? ($(".errormembershipTenure").show(), false)
			: ($(".errormembershipTenure").hide(), true);


	const feeUpdate =
		userisIn == "local"
			? apiBaseURLOXY + "lenders_fee_details_upadate"
			: apiBaseURLOXY + "lenders_fee_details_upadate";

	const postData = JSON.stringify({
		feeAmount,
		lenderFeePayments,

	});
	console.log(postData);

	if (isValid) {
		fetch(feeUpdate, {
			method: "PATCH",
			body: postData,
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
		})
			.then((response) => {
				if (response.ok) {
					$("#modal-membershipUpdate").modal("show");
				} else {
					response.json().then((data) => {
						console.log(data);
						$(".modal-body #display_text").html(data.errorMessage);
						$("#modal-offlineInterestAndPrincipal").modal("show");
					});
				}
			})
			.catch((error) => {
				console.log("Error Something", error);
			});
	}
	return isValid;
};
function topReferralUserSearch() {

	$("#loadingSec").show();

   const suserId = getCookie("sUserId");
   const sprimaryType = getCookie("sUserType");
   const saccessToken = getCookie("saccessToken");

   let primaryType = sprimaryType;
   let accessToken = saccessToken;

   let limit=$("#topreferralUserCountLimit").val();

   if (userisIn == "local") {
	   var approveInterestPay =
		   apiBaseURLOXY +limit+ "/highestTop3ReferralBonusLenders";
   } else {
	   var approveInterestPay =
		   apiBaseURLOXY +limit+ "/highestTop3ReferralBonusLenders";
   }

   $.ajax({
	   url: approveInterestPay,
	   type: "GET",
	   success: function (data, textStatus, xhr) {
		   console.log(data);

			$("#loadingSec").hide();

		  $(".topreferalUserExcel").attr("href",data.downloadLink);
		   if(data.highestBonusList.length==0){
		   $(".topReferalNoData").show();

		   }else{

		   var template = document.getElementById(
			   "topReferalScript"
		   ).innerHTML;
		   Mustache.parse(template);
		   var html = Mustache.render(template, data);
		   var html = Mustache.to_html(template, {
			   data: data.highestBonusList,
		   });
		   $("#topReferalTable").html(html);

		   }
	   },
	   error: function (xhr, textStatus, errorThrown) {
		   console.log("Error Something");
			 $("#loadingSec").hide();
	   },

	   beforeSend: function (xhr) {
		   xhr.setRequestHeader("accessToken", saccessToken);
	   },
   });
}
function feepaidUserInformationsearch() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();

	const type=$("#dealFeeTypeDropDown").val();
	const startDate=$("#feePaidUsersStartDate").val();
	const endDate=$("#feePaidUsersEndDate").val();

	if (userisIn == "local") {
		var feepaidUsers = apiBaseURLOXY+`lenderFee_excel_sheet`;
	} else {
		var feepaidUsers = apiBaseURLOXY+ `lenderFee_excel_sheet`;
	}
    var postData=JSON.stringify({
    	lenderFeePayment:type,
    	startDate:startDate,
         endDate:endDate

    });
	$.ajax({
		url: feepaidUsers,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			console.log(data);
      $(".feepaiduserhref").attr("href",data.downloadUrl);
			if (data.excelResponse.length == 0) {
				$("#feepaidUserTable").empty();
				$(".feepaidusernodata").show();
				$("#loadingSec").hide();
			} else {
				$("#loadingSec").hide();
				var template = document.getElementById(
					"feepaidUsersInformation"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.excelResponse,
				});
				$("#feepaidUserTable").html(html);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$("#loadingSec").hide();
			$("#feepaidUserTable").empty();
			$(".feepaidusernodata").show();
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}
function feepaidUserInformation(type) {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");


	$("#loadingSec").show();

	if (userisIn == "local") {
		var feepaidUsers = apiBaseURLOXY+ `lenderFee_excel_sheet`;
	} else {
		var feepaidUsers = apiBaseURLOXY+ `lenderFee_excel_sheet`;
	}

	var d = new Date();
	var currYear = d.getFullYear();
	let currMonthNo= d.getMonth()+1;

	var firstDay = new Date(d.getFullYear(), d.getMonth(), 1);
	var presentDate = String(d.getDate()).padStart(2, "0");

	if (presentDate < 10) {
		presentDate = presentDate;
	}

	if(currMonthNo < 10){
		currMonthNo=("0"+currMonthNo);
	}



    var postData=JSON.stringify({
    	lenderFeePayment:type,
    	startDate:`${currYear}-${currMonthNo}-01`,
         endDate:`${currYear}-${currMonthNo}-${presentDate}`,	

    });


	$.ajax({
		url: feepaidUsers,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",


		success: function (data, textStatus, xhr) {
			console.log(data);

            $(".feepaiduserhref").attr("href",data.downloadUrl);

			if (data.excelResponse.length == 0) {
				$("#feepaidUserTable").empty();
				$(".feepaidusernodata").show();
				$("#loadingSec").hide();

			} else {
				$("#loadingSec").hide();
				var template = document.getElementById(
					"feepaidUsersInformation"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.excelResponse,
				});
				$("#feepaidUserTable").html(html);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$("#loadingSec").hide();
			$("#feepaidUserTable").empty();
			$(".feepaidusernodata").show();
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function activeLenderParticipation() {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var approveInterestPay =
			apiBaseURLOXY + "activLendersParicipationAmount";
	} else {
		var approveInterestPay =
			apiBaseURLOXY +"activLendersParicipationAmount";
	}

	$.ajax({
		url: approveInterestPay,
		type: "GET",
		success: function (data, textStatus, xhr) {
			console.log(data);

		   $(".downloadActiveParticipation").attr("href",data.downloadLink);
			if(data.activeUserList.length==0){
			$("#displayNoRecordsParticipation").show();

			}else{

			var template = document.getElementById(
				"activeLenderParticippationScript"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.activeUserList,
			});
			$("#displayActiveLendersParticpation").html(html);

			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function knowmembershipSearch() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	var startdate = $("#membershipKnowstartDate").val();
	var endDate = $("#membershipKnowEndDate").val();



$("#loadingSec").show();

	if (userisIn == "local") {
		var getrefereeInfo =
			apiBaseURLOXY  + "validityExpireBetweenDates";
	} else {
		var getrefereeInfo =
			apiBaseURLOXY  + "validityExpireBetweenDates";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
		startDate:startdate,
		endDate:endDate

	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: getrefereeInfo,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
		console.log(data);
		$("#loadingSec").hide();

             $(".knowmembershipPagination").hide();
             $(".SearchknowmembershipPagination").show();



			var template = document.getElementById("membershipKnoWScript").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.memberShipValidityResponse,
			});
			$("#membershipKnoWTable").html(html);


			var displayPageNo = data.count / 10;
			displayPageNo = displayPageNo + 1;
			$(".SearchknowmembershipPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {

					$("#loadingSec").show();

					var postData = {
						pageNo: num,
						pageSize: 10,
						startDate:startdate,
		                endDate:endDate

					};

					if (userisIn == "local") {
						var getrefereeInfo =
							apiBaseURLOXY   + "validityExpireBetweenDates";
					} else {
						var getrefereeInfo =
							apiBaseURLOXY  + "validityExpireBetweenDates";
					}

					var postData = JSON.stringify(postData);
					$.ajax({
						url: getrefereeInfo,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
                             $("#loadingSec").hide();
							$(".knowmembershipPagination").hide();

							var template =
								document.getElementById("membershipKnoWScript").innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.memberShipValidityResponse,
							});
							$("#membershipKnoWTable").html(html);

						},
						error: function (xhr, textStatus, errorThrown) {
							$("#loadingSec").hide();
							console.log("Error Something");

						},

						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", accessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}
function knowmembership() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");


		const d=new Date();

		var currentYear=d.getFullYear();
		var currentMonth=d.getMonth()+1 < 10 ? `0${d.getMonth()+1}` : d.getMonth()+1 ;
		var lastDate = new Date(d.getFullYear(), d.getMonth() + 1, 0);
		var currentDate=d.getDate() < 10 ?  `0${d.getDate()}` : d.getDate();

	    var startdate = `${currentYear}-${currentMonth}-01`;
	    var endDate = `${currentYear}-${currentMonth}-${currentDate}`;


	if (userisIn == "local") {
		var getrefereeInfo =
			apiBaseURLOXY  + "validityExpireBetweenDates";
	} else {
		var getrefereeInfo =
			apiBaseURLOXY  + "validityExpireBetweenDates";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
		startDate:startdate,
		endDate:endDate

	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: getrefereeInfo,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
		console.log(data);


          if(data.count==0){
          $(".knowDataMembership").show();

          }else{


             $(".SearchknowmembershipPagination").hide();
			var template = document.getElementById("membershipKnoWScript").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.memberShipValidityResponse,
			});
			$("#membershipKnoWTable").html(html);


			var displayPageNo = data.count / 10;
			displayPageNo = displayPageNo + 1;
			$(".knowmembershipPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					var postData = {
						pageNo: num,
						pageSize: 10,
						startDate:startdate,
		                endDate:endDate

					};

					if (userisIn == "local") {
						var getrefereeInfo =
							apiBaseURLOXY   + "validityExpireBetweenDates";
					} else {
						var getrefereeInfo =
							apiBaseURLOXY  + "validityExpireBetweenDates";
					}

					var postData = JSON.stringify(postData);
					$.ajax({
						url: getrefereeInfo,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							  $(".SearchknowmembershipPagination").hide();

							var template =
								document.getElementById("membershipKnoWScript").innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.memberShipValidityResponse,
							});
							$("#membershipKnoWTable").html(html);

						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", accessToken);
						},
					});
				});

          }

		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}
///**************** Latest loan Agreements ENDS************//

const feePaidClick = (id, userType) => {
	const loanId = id;
	const primaryType = userType;
	const amount = $(".enteredFeeValue").val();
	$("#modal-feePaid").modal("show");
	$(".loandId").val(loanId);
	$(".userType").val(primaryType);
	responsepaidinfo(loanId, primaryType, amount);
};

const responsepaidinfo = (loanId, primaryType, amount) => {

	const adminUrl =
		userisIn === "local"
			? `${apiBaseURLOXY}loan/${loanId}/feepaid?primaryType=${primaryType}`
			: `${apiBaseURLOXY}loan/${loanId}/feepaid?primaryType=${primaryType}`;

	fetch(adminUrl, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			// Handle success
		})
		.catch((error) => {
			console.log("Error Something");
		});
};

function loadLendersApplications() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getLenders =
			apiBaseURLOXY + suserId + "/loan/" + "ADMIN" + "/request/testsearch";
	} else {
		var getLenders =
			apiBaseURLOXY + suserId + "/loan/" + "ADMIN" + "/request/testsearch";
	}

	var getfornotifications = $(".requestidFromClick").html();

	if (getfornotifications == "LenderInterested") {

	
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				fieldValue: "LENDER",
				operator: "EQUALS",
			},

			logicalOperator: "AND",

			rightOperand: {
				fieldName: "user.status",
				fieldValue: "REGISTERED",
				operator: "EQUALS",
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else {
		
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				fieldValue: "LENDER",
				operator: "EQUALS",
			},

			logicalOperator: "AND",

			rightOperand: {
				fieldName: "user.status",
				fieldValue: "REGISTERED",
				operator: "EQUALS",
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	}

	var postData = JSON.stringify(postData);
	console.log(postData);
	$.ajax({
		url: getLenders,
		dataType: "json",
		contentType: "application/json",
		type: "POST",
		data: postData,
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			console.log(data);
			var template = document.getElementById("loadLendersListTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });

			$("#loadLendersList").html(html);
			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].lenderKycDocuments.length; j++) {
					var docType = data.results[i].lenderKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].lenderUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}

			bindCommentsClick();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			$(".dashBoardPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					if (getfornotifications == "LenderInterested") {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								fieldValue: "LENDER",
								operator: "EQUALS",
							},

							logicalOperator: "AND",

							rightOperand: {
								fieldName: "user.status",
								fieldValue: "REGISTERED",
								operator: "EQUALS",
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else {
							var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				fieldValue: "LENDER",
				operator: "EQUALS",
			},

			logicalOperator: "AND",

			rightOperand: {
				fieldName: "user.status",
				fieldValue: "REGISTERED",
				operator: "EQUALS",
			},
			page: {
				pageNo: num,
				pageSize: 5,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
					}

					var postData = JSON.stringify(postData);
					console.log(postData);
					if (userisIn == "local") {
						var getLenders =
							apiBaseURLOXY +
							suserId +
							"/loan/" +
							"ADMIN" +
							"/request/testsearch";
					} else {
						var getLenders =
							apiBaseURLOXY +
							suserId +
							"/loan/" +
							"ADMIN" +
							"/request/testsearch";
					}

					$.ajax({
						url: getLenders,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("loadLendersListTpl").innerHTML;

							Mustache.parse(template);

							var html = Mustache.to_html(template, {
								data: data.results,
							});

							//alert(html);
							$("#loadLendersList").html(html);
							for (var i = 0; i < data.results.length; i++) {
								for (
									j = 0;
									j < data.results[i].lenderKycDocuments.length;
									j++
								) {
									var docType =
										data.results[i].lenderKycDocuments[j].documentSubType;
									$(
										".user-ViewDocs" +
											data.results[i].lenderUser.id +
											" .show" +
											docType
									).attr("style", "display:block");
								}
							}
							bindCommentsClick();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadBorrowerApplications() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getLenders =
			apiBaseURLOXY + suserId + "/loan/" + sprimaryType + "/request/search";
	} else {
		var getLenders =
			apiBaseURLOXY + suserId + "/loan/" + sprimaryType + "/request/search";
	}

	var getfornotifications = $(".requestidFromClick").html();

	if (getfornotifications == "Interested") {
		var postData = {
			leftOperand: {
				fieldName: "user.adminComments",
				fieldValue: " ",
				operator: "NULL",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "userPrimaryType",
					fieldValue: "BORROWER",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else {
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				fieldValue: "BORROWER",
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
				logicalOperator: "AND",
				rightOperand: {
					leftOperand: {
						fieldName: "loanStatus",
						fieldValue: "Requested",
						operator: "EQUALS",
					},
					logicalOperator: "OR",
					rightOperand: {
						fieldName: "loanStatus",
						fieldValue: "Edit",
						operator: "EQUALS",
					},
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	}

	var postData = JSON.stringify(postData);
	console.log(postData);

	$.ajax({
		url: getLenders,
		dataType: "json",
		contentType: "application/json",
		type: "POST",
		data: postData,
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById("loadBorrowersListTpl").innerHTML;
			Mustache.parse(template);
			var newData = data.results;
			var html = Mustache.to_html(template, { data: newData });

			$("#loadBorrowersList").html(html);

			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].borrowerKycDocuments.length; j++) {
					var docType = data.results[i].borrowerKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].borrowerUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//$(".viewPan").colorbox();

			bindCommentsClick();

			/*888888888888888*/
			$(".dashBoardPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...
					if (getfornotifications == "Interested") {
						var postData = {
							leftOperand: {
								fieldName: "user.adminComments",
								fieldValue: " ",
								operator: "NULL",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "userPrimaryType",
									fieldValue: "BORROWER",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								fieldValue: "BORROWER",
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "AND",
								rightOperand: {
									leftOperand: {
										fieldName: "loanStatus",
										fieldValue: "Requested",
										operator: "EQUALS",
									},
									logicalOperator: "OR",
									rightOperand: {
										fieldName: "loanStatus",
										fieldValue: "Edit",
										operator: "EQUALS",
									},
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					}

					var postData = JSON.stringify(postData);
					console.log(postData);
					if (userisIn == "local") {
						var getLenders =
							apiBaseURLOXY +
							suserId +
							"/loan/" +
							sprimaryType +
							"/request/search";
					} else {
						var getLenders =
							apiBaseURLOXY +
							suserId +
							"/loan/" +
							sprimaryType +
							"/request/search";
					}

					$.ajax({
						url: getLenders,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"loadBorrowersListTpl"
							).innerHTML;

							Mustache.parse(template);

							var html = Mustache.to_html(template, {
								data: data.results,
							});

							//alert(html);
							$("#loadBorrowersList").html(html);

							for (var i = 0; i < data.results.length; i++) {
								for (
									j = 0;
									j < data.results[i].borrowerKycDocuments.length;
									j++
								) {
									var docType =
										data.results[i].borrowerKycDocuments[j].documentSubType;
									$(
										".user-ViewDocs" +
											data.results[i].borrowerUser.id +
											" .show" +
											docType
									).attr("style", "display:block");
								}
							}
							bindCommentsClick();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
			/*888888888888888*/
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

const loadLoans = (recordsType) => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const postData = JSON.stringify({
		leftOperand: {
			fieldName: "loanStatus",
			fieldValue: recordsType,
			operator: "EQUALS",
		},
		logicalOperator: "AND",
		rightOperand: {
			fieldName: "borrowerDisbursedDate",
			operator: "NOT_NULL",
		},
		page: {
			pageNo: 1,
			pageSize: 10,
		},
		sortBy: "loanId",
		sortOrder: "DESC",
	});

	const actOnLoan =
		userisIn === "local"
			? apiBaseURLOXY + suserId + "/loan/ADMIN/search"
			: apiBaseURLOXY + suserId + "/loan/ADMIN/search";

	fetch(actOnLoan, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: postData,
	})
		.then((response) => response.json())
		.then((data) => {
			totalEntries = data.totalCount;
			console.log(data.results);
			if (data.results.length == 0) {
				$("#displayNoRecords").show();
			} else {
				const template = document.getElementById("displayRecordsTpl").innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, { data });
				var html = Mustache.to_html(template, { data: data.results });

				$("#displayRecords").html(html);
				let displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".runningLoansPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						const postData = JSON.stringify({
							leftOperand: {
								fieldName: "loanStatus",
								fieldValue: recordsType,
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								fieldName: "borrowerDisbursedDate",
								operator: "NOT_NULL",
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanId",
							sortOrder: "DESC",
						});

						console.log(postData);

						const actOnLoan =
							userisIn === "local"
								? apiBaseURLOXY + suserId + "/loan/ADMIN/search"
								: apiBaseURLOXY + suserId + "/loan/ADMIN/search";

						fetch(actOnLoan, {
							method: "POST",
							headers: {
								"Content-Type": "application/json",
								accessToken: saccessToken,
							},
							body: postData,
						})
							.then((response) => response.json())
							.then((data) => {
								console.log(data.results);

								const template =
									document.getElementById("displayRecordsTpl").innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, { data });
								var html = Mustache.to_html(template, { data: data.results });

								$("#displayRecords").html(html);
								viewEMICARD();
							})
							.catch((error) => {
								console.log("Error Something");
							});
					});
			}
		})
		.catch((error) => {
			console.log("Error Something");
		});
};

const bindCommentsClick = () => {
	var paragraphs = document.querySelectorAll("p");
	for (var i = 0; i < paragraphs.length; i++) {
		paragraphs[i].innerHTML = paragraphs[i].innerHTML.replace(/,/g, "<br />");
	}
	$(".updateComments").click(function () {
		$("#modal-comments").modal("show");
		var laonID = $(this).attr("data-loanid");
		var currComment = $(".updateComments-" + laonID).html();
		$(".adminComment").val(currComment);
		$(".saveCommentBtn").attr("data-clickedid", laonID);
	});
};

const postComment = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var getUpdatedComment = $(".adminComment").val();
	var getLoanId = $(".saveCommentBtn").attr("data-clickedid");
	var hereisUpdatedComment = $(".adminComment").val();

	var updateCommentUrl =
		userisIn == "local"
			? apiBaseURLOXY +
			  suserId +
			  "/loan/ADMIN/request/" +
			  getLoanId +
			  "/comment"
			: apiBaseURLOXY +
			  suserId +
			  "/loan/ADMIN/request/" +
			  getLoanId +
			  "/comment";

	var postData = JSON.stringify({ comments: hereisUpdatedComment });

	fetch(updateCommentUrl, {
		method: "PATCH",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: postData,
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			$(".updateComments-" + getLoanId).html(hereisUpdatedComment);
			$("#modal-commentSuccesss").modal("show");
		})
		.catch((error) => {
			if (error.status === 400) {
				$("#modal-agreement-already").modal("show");
			} else {
				console.error("Error:", error);
			}
		});
};

const postOxyscore = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var getuserID = $(".postOxyscore").attr("data-clickedid");
	var hereisUpdatedOxyscore = $(".userOxyScore").val();

	var updateOxyscoreUrl =
		userisIn == "local"
			? apiBaseURLOXY + getuserID + "/oxyscore"
			: apiBaseURLOXY + getuserID + "/oxyscore";

	var postData = JSON.stringify({ oxyScore: hereisUpdatedOxyscore });

	fetch(updateOxyscoreUrl, {
		method: "PATCH",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: postData,
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			$("#modal-oxyscoreSuccesss").modal("show");
		})
		.catch((error) => {
			console.error("Error:", error);
		});
};

const viewEMICARD = () => {
	$(".viewEMIcard").click(function () {
		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		var getLoanId = $(this).attr("data-loanid");
		$(".loanIdDisplay").html(getLoanId);

		var updateEmiUrlCard =
			userisIn == "local"
				? apiBaseURLOXY + suserId + "/loan/ADMIN/" + getLoanId + "/emicard"
				: apiBaseURLOXY + suserId + "/loan/ADMIN/" + getLoanId + "/emicard";

		fetch(updateEmiUrlCard, {
			method: "GET",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
		})
			.then((response) => {
				if (!response.ok) {
					throw new Error("Network response was not ok");
				}
				return response.json();
			})
			.then((data) => {
				var template = document.getElementById("emiRecordsCallTpl").innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, { data: data.results });
				$("#displayEMIRecords").html(html);
				$("#modal-viewEMI").modal("show");
				$(".emiStatustrue").attr("disabled", "disabled");
			})
			.catch((error) => {
				console.error("Error:", error);
				$(".modal-body #text").html(error.responseJSON.errorMessage);
				if (error.responseJSON.errorCode == 404) {
					$("#modal-emiNotPresent").modal("show");
				}
			});
	});
};

const viewDoc = (userID, doctype) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var doctype = doctype;

	var getPAN =
		userisIn == "local"
			? apiBaseURLOXY + userID + "/download/" + doctype
			: apiBaseURLOXY + userID + "/download/" + doctype;
	console.log(getPAN);

	fetch(getPAN, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			if (data.downloadUrl != "") {
				console.log(data.downloadUrl);
				var sourcePath = data.downloadUrl;
				var contentTypeCheck = ".pdf";
				var typeContacts = ".txt";
				if (sourcePath.indexOf(contentTypeCheck) != -1) {
					alert(
						"We can view the PDF files in colorbox. Note: File will download automatically. Please check downloads."
					);
					window.open(data.downloadUrl, "_blank");
				} else if (sourcePath.indexOf(typeContacts) != -1) {
					window.open(data.downloadUrl, "_blank");
				} else {
					$.colorbox({ href: data.downloadUrl });
				}
			}
		})
		.catch((error) => {
			console.error("Error:", error);
		});
};

const updatingEMI = (loanid, emino, thisEMI) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var getLoanId = loanid;
	var emiNo = emino;

	var updateEmiUrlCard =
		userisIn == "local"
			? apiBaseURLOXY + "loan/" + getLoanId + "/" + emiNo + "/emipaid"
			: apiBaseURLOXY + "loan/" + getLoanId + "/" + emiNo + "/emipaid";

	var postData = { comments: "" };
	var postData = JSON.stringify(postData);

	fetch(updateEmiUrlCard, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: postData,
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			$("#modal-viewEMI").modal("hide");
			$("#modal-updataedEMI").modal("show");
			$("." + thisEMI).addClass("btn-success");
		})
		.catch((error) => {
			console.error("Error:", error);
		});
};

const displayUpdate_emi_Block = (emiNumber) => {
	$(".display_emi_block-" + emiNumber).show("slow");
};

const updateEMIStatus = (loanid, emino) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var getLoanId = loanid;
	var emiNo = emino;

	var updateEmiUrlCard =
		userisIn == "local"
			? apiBaseURLOXY + "loan/" + getLoanId + "/" + emiNo + "/eminotreceived"
			: apiBaseURLOXY + "loan/" + getLoanId + "/" + emiNo + "/eminotreceived";

	fetch(updateEmiUrlCard, {
		method: "PATCH",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {})
		.catch((error) => {
			console.error("Error:", error);
		});
};

const oxyscore = (userID) => {
	$("#modal-oxyscore").modal("show");
	var userID = userID;
	$(".postOxyscore").attr("data-clickedid", userID);
};

const UpdatePreclose = () => {
	$(".loadingSec").show();
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let id = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;
	var localLoanId = $(".getLoanID").attr("data-loanId");

	let loanId = localLoanId;

	var precloseUrl =
		userisIn == "local"
			? apiBaseURLOXY + "loan/" + loanId + "/loanpreclose"
			: apiBaseURLOXY + "loan/" + loanId + "/loanpreclose";

	fetch(precloseUrl, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: accessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			$(".loadingSec").hide();
			$("#modal-viewEMI").modal("hide");
			$("#modal-preclose").modal("show");
		})
		.catch((error) => {
			console.error("Error:", error);
		});
};

const UpdatePreclosebyplatform = () => {
	$(".loadingSec").show();
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let id = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;
	var localLoanId = $(".getLoanID").attr("data-loanId");

	let loanId = localLoanId;

	var precloseUrl =
		userisIn == "local"
			? apiBaseURLOXY + "loan/" + loanId + "/loanPrecloseByPlatform"
			: apiBaseURLOXY + "loan/" + loanId + "/loanPrecloseByPlatform";

	fetch(precloseUrl, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: accessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			$(".loadingSec").hide();
			$("#modal-viewEMI").modal("hide");
			$("#modal-preclosebyplatform").modal("show");
		})
		.catch((error) => {
			console.error("Error:", error);
		});
};

function searchUsers(userType) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	console.log("in search function");
	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);
	var lenderid = $(".lenderid input").val();
	lenderid = lenderid.substr(2);

	var borrowerid = $(".borrowerid input").val();
	borrowerid = borrowerid.substr(2);

	var loanId = ".loanid".val();
	loanId = loanId.substr(2);

	console.log("lender id " + lenderid);
	console.log("User Type: " + userType);
	console.log("borrowerid is :" + borrowerid);
	var minamtValue = $(".minAmount").val();
	var maxamtValue = $(".maxAmount").val();

	console.log(minamtValue + " " + maxamtValue);

	var minRoi = $(".minRoi").val();
	var maxRoi = $(".maxRoi").val();

	console.log(minRoi + " " + maxRoi);

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;
	if (primaryType == "LENDER") {
		var fieldValueforSearch = "LENDER";
	} else {
		var fieldValueforSearch = "BORROWER";
	}

	if (userSelecctedOption == "amount") {
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				operator: "EQUALS",
				fieldValue: userType,
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "loanRequestAmount",
					fieldValue: minamtValue,
					operator: "GTE",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanRequestAmount",
					fieldValue: maxamtValue,
					operator: "LTE",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 9,
			},
		};
	} else if (userSelecctedOption == "loanID") {
		var postData = {
			fieldName: "lenderUserId",
			fieldValue: lenderid,
			operator: "EQUALS",
			page: {
				pageNo: 1,
				pageSize: 100,
			},
			sortBy: "loanActiveDate",
			sortOrder: "ASC",
		};
	} else if (userSelecctedOption == "lenderID") {
		var postData = {
			fieldName: "lenderUserId",
			fieldValue: loanId,
			operator: "EQUALS",
			page: {
				pageNo: 1,
				pageSize: 100,
			},
			sortBy: "loanActiveDate",
			sortOrder: "ASC",
		};
	} else if (userSelecctedOption == "borrowerID") {
		var postData = {
			fieldName: "borrowerUserId",
			fieldValue: borrowerid,
			operator: "EQUALS",
			page: {
				pageNo: 1,
				pageSize: 100,
			},
			sortBy: "loanActiveDate",
			sortOrder: "ASC",
		};
	} else {
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				operator: "EQUALS",
				fieldValue: userType,
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "rateOfInterest",
					fieldValue: minRoi,
					operator: "GTE",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "rateOfInterest",
					fieldValue: maxRoi,
					operator: "LTE",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 9,
			},
		};
	}

	var postData = JSON.stringify(postData);
	console.log(postData);

	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
	} else {
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
	}

	$.ajax({
		url: getStatUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			console.log(totalEntries);
			//  $(".nodata-pl").hide();
			var template = document.getElementById("displayRecordsTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, { data: data.results });

			$("#displayRecords").html(html);
			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".searchborrowerPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (primaryType == "LENDER") {
						var fieldValueforSearch = "BORROWER";
					} else {
						var fieldValueforSearch = "LENDER";
					}

					if (userSelecctedOption == "amount") {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								operator: "EQUALS",
								fieldValue: fieldValueforSearch,
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "loanRequestAmount",
									fieldValue: minamtValue,
									operator: "GTE",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanRequestAmount",
									fieldValue: maxamtValue,
									operator: "LTE",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
						};
					} else {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								operator: "EQUALS",
								fieldValue: fieldValueforSearch,
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "rateOfInterest",
									fieldValue: minRoi,
									operator: "GTE",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "rateOfInterest",
									fieldValue: maxRoi,
									operator: "LTE",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
						};
					}
					var postData = JSON.stringify(postData);
					console.log(postData);

					if (userisIn == "local") {
						var getStatUrl =
							apiBaseURLOXY +
							userId +
							"/loan/" +
							primaryType +
							"/request/search";
					} else {
						var getStatUrl =
							" https://fintech.oxyloans.com/oxyloans/v1/user/" +
							userId +
							"/loan/" +
							primaryType +
							"/request/search";
					}

					$.ajax({
						url: getStatUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("loanListiongsTpl").innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});

							$("#loadloanListings ").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function searchUsersPhase1(userType) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	console.log("in search function");
	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);
	var lenderid = $(".lenderid input").val();
	lenderid = lenderid.substr(2);

	var borrowerid = $(".borrowerid input").val();
	borrowerid = borrowerid.substr(2);

	if (userSelecctedOption == "mobileNumber") {
		var mobileNumber = $(".mobileNumber input").val();
		console.log(mobileNumber);
	}

	if (userSelecctedOption == "userName") {
		var userName = $(".userName input").val();
		console.log(userName);
	}
	if (userSelecctedOption == "panumber") {
		var panNumber = $(".panNumber input").val();
		console.log(userName);
	}

	if (userSelecctedOption == "city") {
		var city = $("#cityValue").val();
		console.log(city);
	}

	console.log("lender id " + lenderid);
	console.log("User Type: " + userType);
	console.log("borrowerid is :" + borrowerid);

	var minamtValue = $(".minAmount").val();
	var maxamtValue = $(".maxAmount").val();

	console.log(minamtValue + " " + maxamtValue);

	var minRoi = $(".minRoi").val();
	var maxRoi = $(".maxRoi").val();

	var city = $("#cityValue").val();

	console.log(city);

	console.log(minRoi + " " + maxRoi);

	var oxyscore = $(".oxyscore").val();
	console.log(oxyscore);

	var utm = $("#utmValue").val();
	console.log(utm);

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (primaryType == "LENDER") {
		var fieldValueforSearch = "LENDER";
	} else {
		var fieldValueforSearch = "BORROWER";
	}

	if (userSelecctedOption == "mobileNumber") {
		var postData = {
			leftOperand: {
				fieldName: "user.mobileNumber",
				fieldValue: mobileNumber,
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
				logicalOperator: "OR",
				rightOperand: {
					fieldName: "parentRequestId",
					operator: "NOT_NULL",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "userName") {
		var postData = {
			leftOperand: {
				logicalOperator: "AND",
				rightOperand: {
					logicalOperator: "OR",
					rightOperand: {
						fieldName: "user.personalDetails.firstName",
						operator: "LIKE",
						fieldValue: userName,
					},
					leftOperand: {
						fieldName: "user.personalDetails.lastName",
						operator: "LIKE",
						fieldValue: userName,
					},
				},
				leftOperand: {
					fieldName: "userPrimaryType",
					fieldValue: userType,
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "parentRequestId",
				operator: "NULL",
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "city") {
		var postData = {
			leftOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "userPrimaryType",
						fieldValue: userType,
						operator: "EQUALS",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "user.city",
						fieldValue: city,
						operator: "ILIKE",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
			},
			logicalOperator: "OR",
			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "userPrimaryType",
						fieldValue: userType,
						operator: "EQUALS",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "user.personalDetails.address",
						fieldValue: city,
						operator: "ILIKE",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "amount&city") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "user.primaryType",
					fieldValue: "BORROWER",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.city",
					fieldValue: city,
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "parentRequestId",
						operator: "NULL",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "userPrimaryType",
						fieldValue: "BORROWER",
						operator: "EQUALS",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					leftOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: minamtValue,
						operator: "GTE",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: maxamtValue,
						operator: "LTE",
					},
				},
			},

			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "utm&amount") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "user.primaryType",
					fieldValue: "BORROWER",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.urchinTrackingModule",
					fieldValue: utm,
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "parentRequestId",
						operator: "NULL",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "userPrimaryType",
						fieldValue: "BORROWER",
						operator: "EQUALS",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					leftOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: minamtValue,
						operator: "GTE",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: maxamtValue,
						operator: "LTE",
					},
				},
			},

			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "utm&city") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "user.primaryType",
					fieldValue: "BORROWER",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.city",
					fieldValue: city,
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "parentRequestId",
						operator: "NULL",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "userPrimaryType",
						fieldValue: "BORROWER",
						operator: "EQUALS",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.urchinTrackingModule",
					fieldValue: utm,
					operator: "EQUALS",
				},
			},

			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "roi") {
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				operator: "EQUALS",
				fieldValue: "BORROWER",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "rateOfInterest",
					fieldValue: minRoi,
					operator: "GTE",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "rateOfInterest",
					fieldValue: maxRoi,
					operator: "LTE",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 9,
			},
		};
	} else if (userSelecctedOption == "amount") {
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				operator: "EQUALS",
				fieldValue: "BORROWER",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "loanRequestAmount",
					fieldValue: minamtValue,
					operator: "GTE",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanRequestAmount",
					fieldValue: maxamtValue,
					operator: "LTE",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 9,
			},
		};
	} else if (userSelecctedOption == "utm") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "userPrimaryType",
					fieldValue: "BORROWER",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.status",
					fieldValue: "REGISTERED",
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "parentRequestId",
						operator: "NOT_NULL",
					},
					logicalOperator: "OR",
					rightOperand: {
						fieldName: "parentRequestId",
						operator: "NULL",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.urchinTrackingModule",
					fieldValue: utm,
					operator: "EQUALS",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "panumber") {
		var postData = {
			leftOperand: {
				fieldName: "user.personalDetails.panNumber",
				fieldValue: panNumber,
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
				logicalOperator: "OR",
				rightOperand: {
					fieldName: "parentRequestId",
					operator: "NOT_NULL",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else {
		var postData = {
			leftOperand: {
				fieldName: "userId",
				fieldValue: borrowerid,
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
				logicalOperator: "AND",
				rightOperand: {
					leftOperand: {
						fieldName: "loanStatus",
						fieldValue: "Requested",
						operator: "EQUALS",
					},
					logicalOperator: "OR",
					rightOperand: {
						fieldName: "loanStatus",
						fieldValue: "Edit",
						operator: "EQUALS",
					},
				},
			},
		};
	}

	var postData = JSON.stringify(postData);
	console.log(postData);

	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	} else {
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	}
	$.ajax({
		url: getStatUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			if (utm != "") {
				$(".displayUTMResults").show();
			}
			$(".utnNameV").html($("#utmValue").val());
			$(".totalutm").html(data.totalCount);

			totalEntries = data.totalCount;
			console.log(totalEntries);
			var template = document.getElementById("loadBorrowersListTpl").innerHTML;

			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data.results });

			$("#loadBorrowersList").html(html);

			$(".dashBoardPagination").hide();
			$(".searchborrowerPagination").show();
			bindCommentsClick();
			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].borrowerKycDocuments.length; j++) {
					var docType = data.results[i].borrowerKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].borrowerUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}
			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".searchborrowerPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (primaryType == "LENDER") {
						var fieldValueforSearch = "BORROWER";
					} else {
						var fieldValueforSearch = "LENDER";
					}
					userSelecctedOption = $(".choosenType").val();
					// alert(userSelecctedOption);
					if (userSelecctedOption == "mobileNumber") {
						var postData = {
							leftOperand: {
								fieldName: "user.mobileNumber",
								fieldValue: mobileNumber,
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "OR",
								rightOperand: {
									fieldName: "parentRequestId",
									operator: "NOT_NULL",
								},
							},
							page: {
								pageNo: 1,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "userName") {
						var postData = {
							leftOperand: {
								logicalOperator: "AND",
								rightOperand: {
									logicalOperator: "OR",
									rightOperand: {
										fieldName: "user.personalDetails.firstName",
										operator: "LIKE",
										fieldValue: userName,
									},
									leftOperand: {
										fieldName: "user.personalDetails.lastName",
										operator: "LIKE",
										fieldValue: userName,
									},
								},
								leftOperand: {
									fieldName: "userPrimaryType",
									fieldValue: userType,
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								fieldName: "parentRequestId",
								operator: "NULL",
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "city") {
						var postData = {
							leftOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "userPrimaryType",
										fieldValue: userType,
										operator: "EQUALS",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "user.city",
										fieldValue: city,
										operator: "ILIKE",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
							},
							logicalOperator: "OR",
							rightOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "userPrimaryType",
										fieldValue: userType,
										operator: "EQUALS",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "user.personalDetails.address",
										fieldValue: city,
										operator: "ILIKE",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "amount&city") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "user.primaryType",
									fieldValue: "BORROWER",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.city",
									fieldValue: city,
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "parentRequestId",
										operator: "NULL",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "userPrimaryType",
										fieldValue: "BORROWER",
										operator: "EQUALS",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									leftOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: minamtValue,
										operator: "GTE",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: maxamtValue,
										operator: "LTE",
									},
								},
							},

							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "utm&amount") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "user.primaryType",
									fieldValue: "BORROWER",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.urchinTrackingModule",
									fieldValue: utm,
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "parentRequestId",
										operator: "NULL",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "userPrimaryType",
										fieldValue: "BORROWER",
										operator: "EQUALS",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									leftOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: minamtValue,
										operator: "GTE",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: maxamtValue,
										operator: "LTE",
									},
								},
							},

							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "utm&city") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "user.primaryType",
									fieldValue: "BORROWER",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.city",
									fieldValue: city,
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "parentRequestId",
										operator: "NULL",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "userPrimaryType",
										fieldValue: "BORROWER",
										operator: "EQUALS",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.urchinTrackingModule",
									fieldValue: utm,
									operator: "EQUALS",
								},
							},

							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "roi") {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								operator: "EQUALS",
								fieldValue: "BORROWER",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "rateOfInterest",
									fieldValue: minRoi,
									operator: "GTE",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "rateOfInterest",
									fieldValue: maxRoi,
									operator: "LTE",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
						};
					} else if (userSelecctedOption == "amount") {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								operator: "EQUALS",
								fieldValue: "BORROWER",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "loanRequestAmount",
									fieldValue: minamtValue,
									operator: "GTE",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanRequestAmount",
									fieldValue: maxamtValue,
									operator: "LTE",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
						};
					} else if (userSelecctedOption == "utm") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "userPrimaryType",
									fieldValue: "BORROWER",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.status",
									fieldValue: "REGISTERED",
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.urchinTrackingModule",
									fieldValue: utm,
									operator: "EQUALS",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "panumber") {
						var postData = {
							leftOperand: {
								fieldName: "user.personalDetails.panNumber",
								fieldValue: panNumber,
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "OR",
								rightOperand: {
									fieldName: "parentRequestId",
									operator: "NOT_NULL",
								},
							},
							page: {
								pageNo: 1,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else {
						var postData = {
							leftOperand: {
								fieldName: "userId",
								fieldValue: borrowerid,
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "OR",
								rightOperand: {
									fieldName: "parentRequestId",
									operator: "NOT_NULL",
								},
							},
							page: {
								pageNo: 1,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					}
					var postData = JSON.stringify(postData);
					console.log(postData);

					if (userisIn == "local") {
						var getStatUrl =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					} else {
						var getStatUrl =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					}

					$.ajax({
						url: getStatUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							totalEntries = data.totalCount;
							console.log(totalEntries);
							var template = document.getElementById(
								"loadBorrowersListTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadBorrowersList").html(html);
							bindCommentsClick();
							for (var i = 0; i < data.results.length; i++) {
								for (
									j = 0;
									j < data.results[i].borrowerKycDocuments.length;
									j++
								) {
									var docType =
										data.results[i].borrowerKycDocuments[j].documentSubType;
									$(
										".user-ViewDocs" +
											data.results[i].borrowerUser.id +
											" .show" +
											docType
									).attr("style", "display:block");
								}
							}
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function searchRunningloans() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);

	var borrowerid = $("#borrowerid").val();
	borrowerid = borrowerid.substr(2);

	var firstName = $(".firstName").val();
	var lastName = $(".lastName").val();

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userSelecctedOption == "userName") {
		var postData = {
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			firstName: firstName,
			lastName: lastName,
			userId: "0",
		};
	} else {
		var postData = {
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			firstName: "",
			lastName: "",
			userId: borrowerid,
		};
	}
	var postData = JSON.stringify(postData);
	console.log(postData);
	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + "0/application/loansbyapplication";
	} else {
		var getStatUrl = apiBaseURLOXY + "0/application/loansbyapplication";
	}

	$.ajax({
		url: getStatUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;

			console.log(totalEntries);
			if (totalEntries == 0) {
				alert("Provided user don't have any running loans in the system.");
				//$(".noLoanstoDisplay").show();
				return false;
			}
			$(".noLoanstoDisplay").hide();
			$(".totalActiveLoans").show();
			$(".totalActiveLoans").html("Total Active Loans are " + totalEntries);
			//  $(".nodata-pl").hide();
			var template = document.getElementById("displayRecordsTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, { data: data.results });

			$("#displayRecords").html(html);

			$(".runningLoansPagination").hide();
			$(".searchrunningloansPagination").show();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//alert("loading is done");

			$(".searchrunningloansPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					if (userSelecctedOption == "userName") {
						var postData = {
							page: {
								pageNo: num,
								pageSize: 10,
							},
							firstName: firstName,
							lastName: lastName,
							userId: "0",
						};
					} else {
						var postData = {
							page: {
								pageNo: num,
								pageSize: 10,
							},
							firstName: "",
							lastName: "",
							userId: borrowerid,
						};
					}
					var postData = JSON.stringify(postData);
					console.log(postData);

					if (userisIn == "local") {
						var getStatUrl = apiBaseURLOXY + "0/application/loansbyapplication";
					} else {
						var getStatUrl =
							" https://fintech.oxyloans.com/oxyloans/v1/user/0/application/loansbyapplication";
					}
					$.ajax({
						url: getStatUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("displayRecordsTpl").innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.results,
							});

							$("#displayRecords").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function searchLenderUers(usertype) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);

	var lenderid = $(".id input").val();
	lenderid = lenderid.substr(2);

	console.log("lender id " + lenderid);
	console.log("usertype " + usertype);

	var Name = $(".name input").val();
	console.log("Name " + Name);

	if (userSelecctedOption == "mobileNumber") {
		var mobileNumber = $(".mobileNumber input").val();
		console.log(mobileNumber);
	}

	var city = $("#cityValue").val();
	console.log(city);

	var minamtValue = $(".minAmount").val();
	var maxamtValue = $(".maxAmount").val();

	console.log(minamtValue + " " + maxamtValue);

	var minRoi = $(".minRoi").val();
	var maxRoi = $(".maxRoi").val();

	console.log(minRoi + " " + maxRoi);

	var utm = $("#utmValue").val();
	console.log(utm);

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (primaryType == "LENDER") {
		var fieldValueforSearch = "LENDER";
	} else {
		var fieldValueforSearch = "BORROWER";
	}

	if (userSelecctedOption == "amount") {
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				operator: "EQUALS",
				fieldValue: usertype,
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "loanRequestAmount",
					fieldValue: minamtValue,
					operator: "GTE",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanRequestAmount",
					fieldValue: maxamtValue,
					operator: "LTE",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 9,
			},
		};
	} else if (userSelecctedOption == "amount&city") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "user.primaryType",
					fieldValue: "LENDER",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.city",
					fieldValue: city,
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "parentRequestId",
						operator: "NULL",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "userPrimaryType",
						fieldValue: "LENDER",
						operator: "EQUALS",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					leftOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: minamtValue,
						operator: "GTE",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: maxamtValue,
						operator: "LTE",
					},
				},
			},
		};
	} else if (userSelecctedOption == "mobileNumber") {
		var postData = {
			leftOperand: {
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.mobileNumber",
					operator: "EQUALS",
					fieldValue: mobileNumber,
				},
				leftOperand: {
					fieldName: "userPrimaryType",
					fieldValue: usertype,
					operator: "EQUALS",
				},
			},

			logicalOperator: "AND",

			rightOperand: {
				fieldName: "parentRequestId",
				operator: "NULL",
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "city") {
		var postData = {
			leftOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "userPrimaryType",
						fieldValue: usertype,
						operator: "EQUALS",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "user.city",
						fieldValue: city,
						operator: "ILIKE",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
			},
			logicalOperator: "OR",
			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "userPrimaryType",
						fieldValue: usertype,
						operator: "EQUALS",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "user.personalDetails.address",
						fieldValue: city,
						operator: "ILIKE",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "name") {
		var postData = {
			leftOperand: {
				logicalOperator: "AND",
				rightOperand: {
					logicalOperator: "OR",
					rightOperand: {
						fieldName: "user.personalDetails.firstName",
						operator: "LIKE",
						fieldValue: Name,
					},
					leftOperand: {
						fieldName: "user.personalDetails.lastName",
						operator: "LIKE",
						fieldValue: Name,
					},
				},
				leftOperand: {
					fieldName: "userPrimaryType",
					fieldValue: fieldValueforSearch,
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "parentRequestId",
				operator: "NULL",
			},
			page: {
				pageNo: 1,
				pageSize: 100,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "id") {
		var postData = {
			leftOperand: {
				fieldName: "userId",
				fieldValue: lenderid,
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "parentRequestId",
				operator: "NULL",
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "utm") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "userPrimaryType",
					fieldValue: "BORROWER",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.status",
					fieldValue: "REGISTERED",
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",

			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "parentRequestId",
						operator: "NOT_NULL",
					},
					logicalOperator: "OR",
					rightOperand: {
						fieldName: "parentRequestId",
						operator: "NULL",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.urchinTrackingModule",
					fieldValue: utm,
					operator: "EQUALS",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "utm&amount") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "user.primaryType",
					fieldValue: "LENDER",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.urchinTrackingModule",
					fieldValue: utm,
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "parentRequestId",
						operator: "NULL",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "userPrimaryType",
						fieldValue: "LENDER",
						operator: "EQUALS",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					leftOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: minamtValue,
						operator: "GTE",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: maxamtValue,
						operator: "LTE",
					},
				},
			},

			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "utm&city") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "user.primaryType",
					fieldValue: "LENDER",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.city",
					fieldValue: city,
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "parentRequestId",
						operator: "NULL",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "userPrimaryType",
						fieldValue: "LENDER",
						operator: "EQUALS",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.urchinTrackingModule",
					fieldValue: utm,
					operator: "EQUALS",
				},
			},

			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else {
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				operator: "EQUALS",
				fieldValue: usertype,
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "rateOfInterest",
					fieldValue: minRoi,
					operator: "GTE",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "rateOfInterest",
					fieldValue: maxRoi,
					operator: "LTE",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 9,
			},
		};
	}
	var postData = JSON.stringify(postData);
	console.log(postData);

	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/testsearch";
	} else {
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/testsearch";
	}

	$.ajax({
		url: getStatUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			if (utm != "") {
				$(".displayUTMResults").show();
			}
			$(".utnNameV").html($("#utmValue").val());
			$(".totalutm").html(data.totalCount);

			totalEntries = data.totalCount;
			console.log(totalEntries);
			var template = document.getElementById("loadLendersListTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, { data: data.results });

			$("#loadLendersList").html(html);
			$(".dashBoardPagination").hide();
			$(".searchlenderPagination").show();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".searchlenderPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					if (primaryType == "LENDER") {
						var fieldValueforSearch = "BORROWER";
					} else {
						var fieldValueforSearch = "LENDER";
					}

					if (userSelecctedOption == "amount") {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								operator: "EQUALS",
								fieldValue: usertype,
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "loanRequestAmount",
									fieldValue: minamtValue,
									operator: "GTE",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanRequestAmount",
									fieldValue: maxamtValue,
									operator: "LTE",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
						};
					} else if (userSelecctedOption == "amount&city") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "user.primaryType",
									fieldValue: "LENDER",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.city",
									fieldValue: city,
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "parentRequestId",
										operator: "NULL",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "userPrimaryType",
										fieldValue: "LENDER",
										operator: "EQUALS",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									leftOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: minamtValue,
										operator: "GTE",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: maxamtValue,
										operator: "LTE",
									},
								},
							},
						};
					} else if (userSelecctedOption == "mobileNumber") {
						var postData = {
							leftOperand: {
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.mobileNumber",
									operator: "EQUALS",
									fieldValue: mobileNumber,
								},
								leftOperand: {
									fieldName: "userPrimaryType",
									fieldValue: fieldValueforSearch,
									operator: "EQUALS",
								},
							},

							logicalOperator: "AND",

							rightOperand: {
								fieldName: "parentRequestId",
								operator: "NULL",
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "city") {
						var postData = {
							leftOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "userPrimaryType",
										fieldValue: usertype,
										operator: "EQUALS",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "user.city",
										fieldValue: city,
										operator: "ILIKE",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
							},
							logicalOperator: "OR",
							rightOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "userPrimaryType",
										fieldValue: usertype,
										operator: "EQUALS",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "user.personalDetails.address",
										fieldValue: city,
										operator: "ILIKE",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "name") {
						var postData = {
							leftOperand: {
								logicalOperator: "AND",
								rightOperand: {
									logicalOperator: "OR",
									rightOperand: {
										fieldName: "user.personalDetails.firstName",
										operator: "LIKE",
										fieldValue: Name,
									},
									leftOperand: {
										fieldName: "user.personalDetails.lastName",
										operator: "LIKE",
										fieldValue: Name,
									},
								},
								leftOperand: {
									fieldName: "userPrimaryType",
									fieldValue: fieldValueforSearch,
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								fieldName: "parentRequestId",
								operator: "NULL",
							},
							page: {
								pageNo: num,
								pageSize: 100,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "id") {
						var postData = {
							leftOperand: {
								fieldName: "userId",
								fieldValue: lenderid,
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								fieldName: "parentRequestId",
								operator: "NULL",
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "utm") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "userPrimaryType",
									fieldValue: "LENDER",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.status",
									fieldValue: "REGISTERED",
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.urchinTrackingModule",
									fieldValue: utm,
									operator: "EQUALS",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "utm&amount") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "user.primaryType",
									fieldValue: "LENDER",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.urchinTrackingModule",
									fieldValue: utm,
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "parentRequestId",
										operator: "NULL",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "userPrimaryType",
										fieldValue: "LENDER",
										operator: "EQUALS",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									leftOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: minamtValue,
										operator: "GTE",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: maxamtValue,
										operator: "LTE",
									},
								},
							},

							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "utm&city") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "user.primaryType",
									fieldValue: "LENDER",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.city",
									fieldValue: city,
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "parentRequestId",
										operator: "NULL",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "userPrimaryType",
										fieldValue: "LENDER",
										operator: "EQUALS",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.urchinTrackingModule",
									fieldValue: utm,
									operator: "EQUALS",
								},
							},

							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								operator: "EQUALS",
								fieldValue: usertype,
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "rateOfInterest",
									fieldValue: minRoi,
									operator: "GTE",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "rateOfInterest",
									fieldValue: maxRoi,
									operator: "LTE",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
						};
					}
					var postData = JSON.stringify(postData);
					console.log(postData);
					//alert(1);

					if (userisIn == "local") {
						var getStatUrl =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/testsearch";
					} else {
						// https://fintech.oxyloans.com/oxyloans/
						var getStatUrl =
							" https://fintech.oxyloans.com/oxyloans/v1/user/" +
							suserId +
							"/loan/ADMIN/request/testsearch";
					}

					$.ajax({
						url: getStatUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("loadLendersListTpl").innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadLendersList ").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("error");
							console.log(xhr)
							if (xhr.status === 400) {
								var errorData = JSON.parse(xhr.responseText);
								// Extract the error message from the parsed response
								var errorMessage = errorData.errorMessage;
											   
								// Show the modal dialog
								$("#modal-transactiondanger").modal("show");
								// Display the error message in the modal body
								$("#modal-transactiondanger .modal-body").html(errorMessage);
								 setTimeout(function () {
									location.reload();      
								}, 4000);                          
							}                                            
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},

		error: function (xhr, textStatus, errorThrown) {
			console.log("error");
			console.log(xhr)
			if (xhr.status === 400) {
				var errorData = JSON.parse(xhr.responseText);
				// Extract the error message from the parsed response
				var errorMessage = errorData.errorMessage;
							   
				// Show the modal dialog
				$("#modal-transactiondanger").modal("show");
				// Display the error message in the modal body
				$("#modal-transactiondanger .modal-body").html(errorMessage);
				 setTimeout(function () {
					location.reload();      
				}, 4000);                          
			}                                            
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewPAN(userID) {
	console.log(userID);

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getPAN = apiBaseURLOXY + userID + "/download/PAN";
	} else {
		var getPAN = apiBaseURLOXY + userID + "/download/PAN";
	}
	$.ajax({
		url: getPAN,
		type: "GET",
		success: function (data, textStatus, xhr) {
			if (data.downloadUrl != "") {
				console.log(data.downloadUrl);
				window.open(data.downloadUrl, "_blank");
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getKYC() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getPASSPORT = apiBaseURLOXY + suserId + "/download/PASSPORT";
		var getAADHAR = apiBaseURLOXY + suserId + "/download/AADHAR";
		var getBANKSTATEMENT = apiBaseURLOXY + suserId + "/download/BANKSTATEMENT";
	} else {
		var getPASSPORT = apiBaseURLOXY + suserId + "/download/PASSPORT";
		var getAADHAR = apiBaseURLOXY + suserId + "/download/AADHAR";
		var getBANKSTATEMENT = apiBaseURLOXY + suserId + "/download/BANKSTATEMENT";
	}

	$.ajax({
		url: getPAN,
		type: "GET",
		success: function (data, textStatus, xhr) {
			if (data.downloadUrl != "") {
				$(".pan-image-upload-wrap, .pan-uploadedButton").hide();
				$(".pan-file-upload-content").show();
				$(".panImage").attr("src", data.downloadUrl);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});

	$.ajax({
		url: getPASSPORT,
		type: "GET",
		success: function (data, textStatus, xhr) {
			if (data.downloadUrl != "") {
				$(".passport-image-upload-wrap, .passport-uploadedButton").hide();
				$(".passport-file-upload-content").show();
				$(".passportImage").attr("src", data.downloadUrl);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});

	$.ajax({
		url: getAADHAR,
		type: "GET",
		success: function (data, textStatus, xhr) {
			if (data.downloadUrl != "") {
				$(".aadhar-image-upload-wrap, .aadhar-uploadedButton").hide();
				$(".aadhar-file-upload-content").show();
				$(".aadharImage").attr("src", data.downloadUrl);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});

	$.ajax({
		url: getBANKSTATEMENT,
		type: "GET",
		success: function (data, textStatus, xhr) {
			if (data.downloadUrl != "") {
				$(".bs-image-upload-wrap, .bs-uploadedButton").hide();
				$(".bs-file-upload-content").show();
				$(".bsImage").attr(
					"src",
					"http://182.18.139.198/FEOxyLoans/assets/images/pdf.png"
				);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function signout() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	writeCookie("sUserId", "");
	writeCookie("sUserType", "");
	writeCookie("saccessToken", "");
	writeCookie("tokenTime", "");
	writeCookie("cmsSkip", "");
	writeCookie("interestRejected", "");
	writeCookie("principalRejected", "");
	writeCookie("fdverifySkip", "");

	let id = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;
	if (userisIn == "local") {
		var signoutUrl = apiBaseURLOXY + "logout";
	} else {
		var signoutUrl = apiBaseURLOXY + "logout";
	}
	$.ajax({
		url: signoutUrl,
		type: "POST",
		success: function (data, textStatus, xhr) {
			window.location = "/new/userlogin";
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			window.location = "/new/userlogin";
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function changePrimarytype(userType, id) {
	
	$("#modal-change-primarytype").modal("show");
	$(".yesChangeUsesr").attr("data-reqID", id);
	$(".yesChangeUsesr").attr("data-type", userType);
}

function displayLoanInformation(loanID) {
	$(".displayAllLoansInfo").hide();

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var getLoanId = loanID;
	if (userisIn == "local") {
		var updateEmiUrlCard =
			apiBaseURLOXY + suserId + "/loan/ADMIN/" + getLoanId + "/emicard";
	} else {
		var updateEmiUrlCard =
			apiBaseURLOXY + suserId + "/loan/ADMIN/" + getLoanId + "/emicard";
	}

	$.ajax({
		url: updateEmiUrlCard,
		type: "GET",
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$(".displayLoanInformation-" + loanID).show();
			var template = document.getElementById("emiRecordsCallTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });
			$("#displayEMIRecordsAtAT-" + loanID).html(html);
			$(".emiStatustrue").attr("disabled", "disabled");
		},
		statusCode: {
			400: function (response) {
				$("#modal-agreement-already").modal("show");
			},
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function downloadReportClick() {
	console.log("clicked");
	var dataElementName = $(this).attr("data-varName");
	var data = $("#" + dataElementName).html();

	data = JSONData;
	downloadReport(JSONData, "EMIs Information", "OxyLoans-Admin-EMI");
}

$(document).ready(function () {
	$(".yesChangeUsesr").click(function () {
		$("#modal-change-primarytype").modal("hide");

		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		let id = suserId;
		let primaryType = sprimaryType;
		let accessToken = saccessToken;

		var outSideUserid = $(this).attr("data-reqID");
		var outSidePrimarytype = $(this).attr("data-type");
		console.log(outSideUserid);
		console.log(outSidePrimarytype);

		if (userisIn == "local") {
			var primarytypeUrl =
				apiBaseURLOXY +
				outSideUserid +
				"/changeprimarytype/" +
				outSidePrimarytype +
				"";
		} else {
			var primarytypeUrl =
				apiBaseURLOXY +
				outSideUserid +
				"/changeprimarytype/" +
				outSidePrimarytype +
				"";
		}

		$.ajax({
			url: primarytypeUrl,
			type: "PATCH",
			success: function (data, textStatus, xhr) {},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", accessToken);
			},
		});
	});
});

function downloadReport(JSONData, ReportTitle, ShowLabel) {
	console.log("downloading");
	//If JSONData is not an object then JSON.parse will parse the JSON string in an Object
	var arrData = typeof JSONData != "object" ? JSON.parse(JSONData) : JSONData;

	var CSV = "sep=," + "\r\n\n";

	//This condition will generate the Label/Header
	if (ShowLabel) {
		var row = "";

		//This loop will extract the label from 1st index of on array
		for (var index in arrData[0]) {
			//Now convert each value to string and comma-seprated
			row += index + ",";
		}

		row = row.slice(0, -1);

		//append Label row with line break
		CSV += row + "\r\n";
	}

	//1st loop is to extract each row
	for (var i = 0; i < arrData.length; i++) {
		var row = "";

		//2nd loop will extract each column and convert it in string comma-seprated
		for (var index in arrData[i]) {
			row += '"' + arrData[i][index] + '",';
		}

		row.slice(0, row.length - 1);

		//add a line break after each row
		CSV += row + "\r\n";
	}

	if (CSV == "") {
		alert("Invalid data");
		return;
	}

	//Generate a file name
	var fileName = "MyReport_";
	//this will remove the blank-spaces from the title and replace it with an underscore
	fileName += ReportTitle.replace(/ /g, "_");

	//Initialize file format you want csv or xls
	var uri = "data:text/csv;charset=utf-8," + escape(CSV);

	// Now the little tricky part.
	// you can use either>> window.open(uri);
	// but this will not work in some browsers
	// or you will not get the correct file extension

	//this trick will generate a temp <a /> tag
	var link = document.createElement("a");
	link.href = uri;

	//set the visibility hidden so it will not effect on your web-layout
	link.style = "visibility:hidden";
	link.download = fileName + ".csv";

	//this part will append the anchor tag and remove it after automatic click
	document.body.appendChild(link);
	link.click();
	document.body.removeChild(link);
}

function updateUserStatus(id, status) {
	$("#modal-activateLender").modal("show");
	$(".activateLender-Btn").attr("data-reqID", id);
	$(".activateLender-Btn").attr("data-status", status);
}

function activateLender() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var id = $(".activateLender-Btn").attr("data-reqID");
	var status = $(".activateLender-Btn").attr("data-status");

	if (userisIn == "local") {
		var updateUserStatus =
			apiBaseURLOXY + suserId + "/loan/ADMIN/updateuserstatus";
	} else {
		var updateUserStatus =
			apiBaseURLOXY + suserId + "/loan/ADMIN/updateuserstatus";
	}

	if (status == "ACTIVE") {
		status = "REGISTERED";
	} else {
		status = "ACTIVE";
	}

	var postData = { id: id, status: status };
	var postData = JSON.stringify(postData);
	console.log(postData);

	$.ajax({
		url: updateUserStatus,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			// alert("user activated");
			$("#modal-activateLender").modal("hide");
			$("#modal-useractivate").modal("show");

			$("#" + id).prop("disabled", true);
		},
		statusCode: {
			400: function (response) {
				$("#modal-approveuserKycNotUploaded").modal("show");
			},
		},

		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewLoanRecord(userID) {
	$(".loadingSec").show();
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	alert(userID);
	$(".loadingSec").hide();

	var postData = {
		fieldName: "borrowerUserId",
		fieldValue: userID,
		operator: "EQUALS",
		page: {
			pageNo: 1,
			pageSize: 100,
		},
		sortBy: "loanActiveDate",
		sortOrder: "ASC",
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
	} else {
		var getStatUrl =
			" https://fintech.oxyloans.com/oxyloans/v1/user/" +
			suserId +
			"/loan/ADMIN/search";
	}

	/**************************/
	$.ajax({
		url: getStatUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			console.log(totalEntries);
			//  $(".nodata-pl").hide();
			var template = document.getElementById("displayRecordsTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, { data: data.results });

			$("#displayRecords").html(html);
			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".searchborrowerPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (primaryType == "LENDER") {
						var fieldValueforSearch = "BORROWER";
					} else {
						var fieldValueforSearch = "LENDER";
					}

					var postData = {
						fieldName: "borrowerUserId",
						fieldValue: userID,
						operator: "EQUALS",
						page: {
							pageNo: num,
							pageSize: 100,
						},
						sortBy: "loanActiveDate",
						sortOrder: "ASC",
					};

					var postData = JSON.stringify(postData);
					console.log(postData);
					//alert(1);

					if (userisIn == "local") {
						//http://35.154.48.120:8080/oxynew/
						var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
					} else {
						// https://fintech.oxyloans.com/oxyloans/
						var getStatUrl =
							" https://fintech.oxyloans.com/oxyloans/v1/user/" +
							suserId +
							"/loan/ADMIN/search";
					}

					//var getStatUrl = apiBaseURLOXY+userId+"/loan/"+primaryType+"/request/search";
					$.ajax({
						url: getStatUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("loanListiongsTpl").innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});

							$("#loadloanListings ").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	/***********************************/
}

function getUserPersonalDetails(userID) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var personalDetailsUrl = apiBaseURLOXY + "personal/" + userID + "";
	} else {
		var personalDetailsUrl = apiBaseURLOXY + "personal/" + userID + "";
	}

	$.ajax({
		url: personalDetailsUrl,
		type: "GET",
		success: function (data, textStatus, xhr) {
			alert(userID);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function userIntrested(userType, id, adminComments) {
	$("#modal-interested-borrower").modal("show");
	$(".userInterestedBtn").attr("data-reqID", id);
}

function borrowerInteresteduser() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var id = $(".userInterestedBtn").attr("data-reqID");

	if (userisIn == "local") {
		var updateUserStatus = apiBaseURLOXY + suserId + "/loan/ADMIN/report";
	} else {
		var updateUserStatus = apiBaseURLOXY + suserId + "/loan/ADMIN/report";
	}

	var postData = {
		id: id,
		email: "admin@oxyloans.com",
		adminComments: "INTERESTED",
	};

	var postData = JSON.stringify(postData);
	console.log(postData);

	$.ajax({
		url: updateUserStatus,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-interested-borrower").modal("hide");
			$("#modal-useractivate").modal("show");
			$("#" + id).prop("disabled", true);
		},
		statusCode: {
			400: function (response) {
				$("#modal-interested-borrower").modal("hide");
				$("#modal-notuploadeddocs").modal("show");
			},
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".modal-body #text1").html(arguments[0].responseJSON.errorMessage);

			if (arguments[0].responseJSON.errorCode == 112) {
				$("#modal-alreadyDoneSendOffer").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewLoanRequests(loanID, id) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var getLoanId = loanID;
	var userId = id;

	if (userisIn == "local") {
		var updateEmiUrlCard =
			apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	} else {
		var updateEmiUrlCard =
			apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	}

	var postData = {
		leftOperand: {
			leftOperand: {
				fieldName: "user.id",
				fieldValue: userId,
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "parentRequestId",
				operator: "NOT_NULL",
			},
		},
		logicalOperator: "OR",
		rightOperand: {
			fieldName: "parentRequestId",
			fieldValue: loanID,
			operator: "EQUALS",
		},
		page: {
			pageNo: 1,
			pageSize: 10,
		},
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: updateEmiUrlCard,
		data: postData,
		dataType: "json",
		contentType: "application/json",
		type: "POST",

		success: function (data, textStatus, xhr) {
			$(".viewLoanRequests-" + loanID).show();

			if (data.results.length == 0) {
				$("#displayNoLoanRecords").show();
			} else {
				var template = document.getElementById(
					"loadloanRequestsIntrested"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, { data: data.results });
				$("#viewLoanRequestsIntrested-" + loanID).html(html);

				for (var i = 0; i < data.results.length; i++) {
					for (j = 0; j < data.results[i].lenderKycDocuments.length; j++) {
						var docType = data.results[i].lenderKycDocuments[j].documentSubType;
						$(
							".user-ViewDocs" +
								data.results[i].lenderUser.id +
								" .show" +
								docType
						).attr("style", "display:block");
					}
				}

				bindCommentsClick();

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				//$(".viewPan").colorbox();
				bindCommentsClick();

				/*888888888888888*/
				$(".interstedPagination1")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...

						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "user.id",
									fieldValue: userId,
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "parentRequestId",
									operator: "NOT_NULL",
								},
							},
							logicalOperator: "OR",
							rightOperand: {
								fieldName: "parentRequestId",
								fieldValue: loanID,
								operator: "EQUALS",
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
						};

						var postData = JSON.stringify(postData);

						if (userisIn == "local") {
							var updateEmiUrlCard =
								apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
						} else {
							var updateEmiUrlCard =
								apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
						}
						$.ajax({
							url: updateEmiUrlCard,
							data: postData,
							dataType: "json",
							contentType: "application/json",
							type: "POST",
							success: function (data, textStatus, xhr) {
								$(".viewLoanRequests-" + loanID).show();

								var template = document.getElementById(
									"loadloanRequestsIntrested"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.results,
								});
								$("#viewLoanRequestsIntrested-" + loanID).html(html);

								for (var i = 0; i < data.results.length; i++) {
									for (
										j = 0;
										j < data.results[i].lenderKycDocuments.length;
										j++
									) {
										var docType =
											data.results[i].lenderKycDocuments[j].documentSubType;
										$(
											".user-ViewDocs" +
												data.results[i].lenderUser.id +
												" .show" +
												docType
										).attr("style", "display:block");
									}
								}
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadIntrestedApplications() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateEmiUrlCard =
			apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	} else {
		var updateEmiUrlCard =
			apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	}

	var postData = {
		leftOperand: {
			fieldName: "user.adminComments",
			fieldValue: "INTERESTED",
			operator: "EQUALS",
		},
		logicalOperator: "AND",
		rightOperand: {
			fieldName: "parentRequestId",
			operator: "NULL",
		},
		page: {
			pageNo: 1,
			pageSize: 10,
		},
		sortBy: "loanRequestedDate",
		sortOrder: "DESC",
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateEmiUrlCard,
		data: postData,
		dataType: "json",
		contentType: "application/json",
		type: "POST",

		success: function (data, textStatus, xhr) {
			console.log(data);

			totalEntries = data.totalCount;
			var template = document.getElementById(
				"loadBorrowersInterestedListTpl"
			).innerHTML;

			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data.results });
			$("#loadBorrowersInterestedList").html(html);
			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].borrowerKycDocuments.length; j++) {
					var docType = data.results[i].borrowerKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].borrowerUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}

			bindCommentsClick();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//$(".viewPan").colorbox();
			bindCommentsClick();

			$(".interstedPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						leftOperand: {
							fieldName: "user.adminComments",
							fieldValue: "INTERESTED",
							operator: "EQUALS",
						},
						logicalOperator: "AND",
						rightOperand: {
							fieldName: "parentRequestId",
							operator: "NULL",
						},
						page: {
							pageNo: num,
							pageSize: 10,
						},
						sortBy: "loanRequestedDate",
						sortOrder: "DESC",
					};

					var postData = JSON.stringify(postData);

					if (userisIn == "local") {
						var updateEmiUrlCard =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					} else {
						var updateEmiUrlCard =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					}

					$.ajax({
						url: updateEmiUrlCard,
						data: postData,
						dataType: "json",
						contentType: "application/json",
						type: "POST",

						success: function (data, textStatus, xhr) {
							totalEntries = data.totalCount;
							var template = document.getElementById(
								"loadBorrowersInterestedListTpl"
							).innerHTML;

							Mustache.parse(template);

							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadBorrowersInterestedList").html(html);

							for (var i = 0; i < data.results.length; i++) {
								for (
									j = 0;
									j < data.results[i].borrowerKycDocuments.length;
									j++
								) {
									var docType =
										data.results[i].borrowerKycDocuments[j].documentSubType;
									$(
										".user-ViewDocs" +
											data.results[i].borrowerUser.id +
											" .show" +
											docType
									).attr("style", "display:block");
								}
							}

							bindCommentsClick();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewLoanRequestsAccepted(loanID, id) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var getLoanId = loanID;
	var userId = id;

	if (userisIn == "local") {
		var updateEmiUrlCard =
			apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	} else {
		var updateEmiUrlCard =
			apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	}

	var postData = {
		leftOperand: {
			leftOperand: {
				fieldName: "user.id",
				fieldValue: userId,
				operator: "EQUALS",
			},
			logicalOperator: "AND",

			rightOperand: {
				leftOperand: {
					fieldName: "parentRequestId",
					operator: "NOT_NULL",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanStatus",
					fieldValue: "Accepted",
					operator: "EQUALS",
				},
			},
		},
		logicalOperator: "OR",

		rightOperand: {
			leftOperand: {
				fieldName: "parentRequestId",
				fieldValue: getLoanId,
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "loanStatus",
				fieldValue: "Accepted",
				operator: "EQUALS",
			},
		},
		page: {
			pageNo: 1,
			pageSize: 20,
		},
	};

	var postData = JSON.stringify(postData);
	console.log(postData);

	$.ajax({
		url: updateEmiUrlCard,
		data: postData,
		dataType: "json",
		contentType: "application/json",
		type: "POST",

		success: function (data, textStatus, xhr) {
			$(".viewLoanRequestsAccepted-" + loanID).show();

			if (data.results.length == 0) {
				$("#displayNoLoanRecords").show();
			} else {
				var template = document.getElementById(
					"loadloanRequestsAccepted"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, { data: data.results });
				$("#viewLoanRequestsAccepted-" + loanID).html(html);

				for (var i = 0; i < data.results.length; i++) {
					for (j = 0; j < data.results[i].lenderKycDocuments.length; j++) {
						var docType = data.results[i].lenderKycDocuments[j].documentSubType;
						$(
							".user-ViewDocs" +
								data.results[i].lenderUser.id +
								" .show" +
								docType
						).attr("style", "display:block");
					}
				}

				bindCommentsClick();

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				//$(".viewPan").colorbox();
				bindCommentsClick();

				/*888888888888888*/
				$(".interstedPagination1")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...

						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "user.id",
									fieldValue: userId,
									operator: "EQUALS",
								},
								logicalOperator: "AND",

								rightOperand: {
									leftOperand: {
										fieldName: "parentRequestId",
										operator: "NOT_NULL",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "loanStatus",
										fieldValue: "Accepted",
										operator: "EQUALS",
									},
								},
							},
							logicalOperator: "OR",

							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									fieldValue: getLoanId,
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanStatus",
									fieldValue: "Accepted",
									operator: "EQUALS",
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
						};

						var postData = JSON.stringify(postData);

						if (userisIn == "local") {
							var updateEmiUrlCard =
								apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
						} else {
							var updateEmiUrlCard =
								apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
						}

						$.ajax({
							url: updateEmiUrlCard,
							data: postData,
							dataType: "json",
							contentType: "application/json",
							type: "POST",
							success: function (data, textStatus, xhr) {
								$(".viewLoanRequestsAccepted-" + loanID).show();

								var template = document.getElementById(
									"loadloanRequestsAccepted"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.results,
								});
								$("#viewLoanRequestsAccepted-" + loanID).html(html);

								for (var i = 0; i < data.results.length; i++) {
									for (
										j = 0;
										j < data.results[i].lenderKycDocuments.length;
										j++
									) {
										var docType =
											data.results[i].lenderKycDocuments[j].documentSubType;
										$(
											".user-ViewDocs" +
												data.results[i].lenderUser.id +
												" .show" +
												docType
										).attr("style", "display:block");
									}
								}
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function userApproved(loanid, lenderid) {
	$("#modal-approve-user").modal("show");
	$(".approveuser-Btn").attr("data-reqID", loanid);
}

function approveUsertoBorrower() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var getloanid = $(".approveuser-Btn").attr("data-reqID");

	if (userisIn == "local") {
		var updateUserStatus = apiBaseURLOXY + suserId + "/loan/ADMIN/report";
	} else {
		var updateUserStatus = apiBaseURLOXY + suserId + "/loan/ADMIN/report";
	}
	postData = {
		adminComments: "APPROVED",
		loanId: getloanid,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	$.ajax({
		url: updateUserStatus,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			// alert("Updated");
			$("#modal-approve-user").modal("hide");
			$("#modal-userloanApprove").modal("show");

			$("#" + getloanid).prop("disabled", true);
		},
		statusCode: {
			400: function (response) {
				$("#modal-userloanApprovestage").modal("show");
			},
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadApprovedApplications() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateEmiUrlCard =
			apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	} else {
		var updateEmiUrlCard =
			apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	}

	var getfornotifications = $(".requestidFromClick").html();

	if (getfornotifications == "Disbursed") {
		var postData = {
			leftOperand: {
				fieldName: "loanStatus",
				fieldValue: "Active",
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "adminComments",
				fieldValue: " ",
				operator: "NULL",
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanId",
			sortOrder: "DESC",
		};
	} else {
		var postData = {
			leftOperand: {
				fieldName: "adminComments",
				fieldValue: "APPROVED",
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "enachType",
					fieldValue: "MANUALENACH",
					operator: "EQUALS",
				},
				logicalOperator: "OR",
				rightOperand: {
					fieldName: "isECSActivated",
					fieldValue: "t",
					operator: "EQUALS",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	}

	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateEmiUrlCard,
		data: postData,
		dataType: "json",
		contentType: "application/json",
		type: "POST",

		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById("loadBorrowersListTpl").innerHTML;
			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data.results });
			$("#loadBorrowersList").html(html);

			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].borrowerKycDocuments.length; j++) {
					var docType = data.results[i].borrowerKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].borrowerUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}

			bindCommentsClick();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			bindCommentsClick();

			/*888888888888888*/
			$(".approvedPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...
					var getfornotifications = $(".requestidFromClick").html();

					if (getfornotifications == "Disbursed") {
						var postData = {
							leftOperand: {
								fieldName: "loanStatus",
								fieldValue: "Active",
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								fieldName: "adminComments",
								fieldValue: " ",
								operator: "NULL",
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanId",
							sortOrder: "DESC",
						};
					} else {
						var postData = {
							leftOperand: {
								fieldName: "adminComments",
								fieldValue: "APPROVED",
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "enachType",
									fieldValue: "MANUALENACH",
									operator: "EQUALS",
								},
								logicalOperator: "OR",
								rightOperand: {
									fieldName: "isECSActivated",
									fieldValue: "t",
									operator: "EQUALS",
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					}
					var postData = JSON.stringify(postData);

					if (userisIn == "local") {
						var updateEmiUrlCard =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					} else {
						var updateEmiUrlCard =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					}

					$.ajax({
						url: updateEmiUrlCard,
						data: postData,
						dataType: "json",
						contentType: "application/json",
						type: "POST",

						success: function (data, textStatus, xhr) {
							totalEntries = data.totalCount;
							// console.log(totalEntries);
							var template = document.getElementById(
								"loadBorrowersListTpl"
							).innerHTML;
							//console.log(template);
							Mustache.parse(template);
							//alert(template);
							//var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadBorrowersList").html(html);

							for (var i = 0; i < data.results.length; i++) {
								for (
									j = 0;
									j < data.results[i].borrowerKycDocuments.length;
									j++
								) {
									var docType =
										data.results[i].borrowerKycDocuments[j].documentSubType;
									$(
										".user-ViewDocs" +
											data.results[i].borrowerUser.id +
											" .show" +
											docType
									).attr("style", "display:block");
								}
							}

							bindCommentsClick();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadDisbursedApplications() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateEmiUrlCard = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
	} else {
		var updateEmiUrlCard = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
	}

	var postData = {
		fieldName: "adminComments",
		fieldValue: "DISBURSED",
		operator: "EQUALS",
		page: {
			pageNo: 1,
			pageSize: 10,
		},
		sortBy: "loanActiveDate",
		sortOrder: "DESC",
	};

	var postData = JSON.stringify(postData);
	console.log(postData);

	$.ajax({
		url: updateEmiUrlCard,
		data: postData,
		dataType: "json",
		contentType: "application/json",
		type: "POST",

		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById("loadBorrowersListTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });
			$("#loadBorrowersList").html(html);

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".disbursedPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						fieldName: "adminComments",
						fieldValue: "DISBURSED",
						operator: "EQUALS",
						page: {
							pageNo: num,
							pageSize: 10,
						},
						sortBy: "loanActiveDate",
						sortOrder: "DESC",
					};

					var postData = JSON.stringify(postData);

					if (userisIn == "local") {
						var updateEmiUrlCard =
							apiBaseURLOXY + suserId + "/loan/ADMIN/search";
					} else {
						var updateEmiUrlCard =
							apiBaseURLOXY + suserId + "/loan/ADMIN/search";
					}

					$.ajax({
						url: updateEmiUrlCard,
						data: postData,
						dataType: "json",
						contentType: "application/json",
						type: "POST",

						success: function (data, textStatus, xhr) {
							totalEntries = data.totalCount;
							var template = document.getElementById(
								"loadBorrowersListTpl"
							).innerHTML;

							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadBorrowersList").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function userDisbursed(loanid, disbursedBtnObj) {
	//Changes by Liveen Starts
	currentDisburdedBtnObj = disbursedBtnObj;
	////Changes by Liveen Ends
	$("#modal-Disbursementdate").modal("show");
	//Changes by Liveen Starts
	$(".brDisbursedDateError").hide();
	//Changes by Liveen Ends
	$(".saveEmidateBtn").attr("data-loanid", loanid);
}

function updateDisbursementDate() {
	////Changes by Liveen Starts
	var isValid = true;
	var brDisburseDate = $(".borrowerDisbursementDate").val();
	if (brDisburseDate == "") {
		$(".brDisbursedDateError").show();

		isValid = false;
	} else {
		$(".brDisbursedDateError").hide();
	}
	if (isValid) {
		$("#modal-Disbursementdate").modal("hide");
		////Changes by Liveen Ends
		$("#modal-enterDisbursementDate").modal("show");
		var loanid = $(".saveEmidateBtn").attr("data-loanid");
		$(".userDisbursementDate").attr("data-loanid", loanid);
		//Changes by Liveen Starts
	}
	////Changes by Liveen Ends
}

function saveDisbursementDate() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var hereisUpdatedBorrowerdate = $(".borrowerDisbursementDate").val();
	var getLoanId = $(".userDisbursementDate").attr("data-loanid");

	if (userisIn == "local") {
		var updateCommentUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/report";
	} else {
		var updateCommentUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/report";
	}
	var postData = {
		loanId: getLoanId,
		disbursedDate: hereisUpdatedBorrowerdate,
		adminComments: "DISBURSED",
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	//Changes by Liveen Starts
	$(currentDisburdedBtnObj).attr("id", "user-DISBURSED");
	////Changes by Liveen Ends
	$.ajax({
		url: updateCommentUrl,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-enterDisbursementDate").modal("hide");

			$("#modal-disbursementdatesuccess").modal("show");
		},
		statusCode: {
			400: function (response) {
				$("#modal-loanActive").modal("show");
				//Changes by Liveen Starts
				$(currentDisburdedBtnObj).attr("id", "user-");
				//Changes by Liveen Ends
			},
		},

		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			//Changes by Liveen Starts
			$(currentDisburdedBtnObj).attr("id", "user-");
			//Changes by Liveen Ends
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewloaninfo(loanid) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var loanId = loanid;
	if (userisIn == "local") {
		var getDocsCall = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
	} else {
		var getDocsCall = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
	}

	var postData = {
		fieldName: "loanId",
		fieldValue: loanId,
		operator: "EQUALS",
	};
	var postData = JSON.stringify(postData);
	console.log(postData);

	$.ajax({
		url: getDocsCall,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("userloanstatus").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });
			$("#displayloanRecords").html(html);
			$("#modal-viewuserdetails").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadeNACHActiveUSers() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getLenders = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
	} else {
		var getLenders = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
	}

	var postData = {
		fieldName: "enachMandate.mandateStatus",
		fieldValue: "SUCCESS",
		operator: "EQUALS",
		page: { pageNo: 1, pageSize: 10 },
		sortBy: "loanId",
		sortOrder: "DESC",
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: getLenders,
		dataType: "json",
		contentType: "application/json",
		type: "POST",
		data: postData,
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;

			var template = document.getElementById("displayRecordsTpl").innerHTML;

			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data.results });
			$("#displayRecords").html(html);

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			bindCommentsClick();

			/*888888888888888*/
			$(".enachPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						fieldName: "enachMandate.mandateStatus",
						fieldValue: "SUCCESS",
						operator: "EQUALS",
						page: { pageNo: num, pageSize: 10 },
						sortBy: "loanId",
						sortOrder: "DESC",
					};

					var postData = JSON.stringify(postData);

					if (userisIn == "local") {
						var getLenders = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
					} else {
						var getLenders = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
					}

					$.ajax({
						url: getLenders,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("displayRecordsTpl").innerHTML;

							Mustache.parse(template);

							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#displayRecords").html(html);
							//bindCommentsClick();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
			/*888888888888888*/
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function borrowerFeeamount(id) {
	$("#modal-borrowerFeeRoi").modal("show");
	$(".saveEmidateBtn").attr("data-clickedid", id);
	// alert(loanid);
}

function updateBorrowerFeeROI() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var UpdatedBorrowerFeeROI = $(".borrowerFeeRoi").val();
	var getId = $(".saveEmidateBtn").attr("data-clickedid");
	// console.log(getId);
	if (userisIn == "local") {
		var updateCommentUrl = apiBaseURLOXY + suserId + "/ADMIN/borrowerfee";
	} else {
		var updateCommentUrl = apiBaseURLOXY + suserId + "/ADMIN/borrowerfee";
	}
	var postData = {
		id: getId,

		roi: UpdatedBorrowerFeeROI,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);

	$.ajax({
		url: updateCommentUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			//alert('updated');
			$("#modal-borrowerFeesuccess").modal("show");
		},

		error: function (request, error) {
			if (arguments[0].responseJSON.errorCode == 118) {
				$("#modal-borrowerFeeError").modal("show");
			}
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function autoRiskCalculation(id) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + "calculateprofilerisk?userId=" + id;
	} else {
		var getStatUrl = apiBaseURLOXY + "calculateprofilerisk?userId=" + id;
	}
	$.ajax({
		url: getStatUrl,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$("#modal-sucessriskCalculation").modal("show");
		},
		statusCode: {
			400: function (response) {
				$("#modal-riskCalWithoutScore #text-risk").html(
					arguments[0].responseJSON.errorMessage
				);

				if (arguments[0].responseJSON.errorCode == 404) {
					$("#modal-riskCalWithoutScore").modal("show");
				}
			},
		},
		error: function (xhr, textStatus, errorThrown) {
			if (arguments[0].responseJSON.errorCode == 119) {
				$("#modal-riskCalWithoutScore").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function userRiskcalculate(id) {
	$("#modal-borrower-RiskCalculation").modal("show");
	$(".userRiskCalculation").attr("data-clickedid", id);
}

function borrowerRiskCalculation() {
	//$("#modal-riskCalculation").modal("show");

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var userId = $(".userRiskCalculation").attr("data-clickedid");
	$(".riskCalculationBtn").attr("data-clickedid", userId);
	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + userId + "/getprofileandexperian";
	} else {
		var getStatUrl = apiBaseURLOXY + userId + "/getprofileandexperian";
	}
	$.ajax({
		url: getStatUrl,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$("#modal-borrower-RiskCalculation").modal("hide");

			$("#modal-riskCalculation").modal("show");
			//changes by livin mandeva starts
			$(".experianPointsError").hide();
			$(".salaryPointsError").hide();
			$(".companeyPointsError").hide();
			$(".experiancePointsError").hide();
			//changes by livin mandeva ends
			if (data.employementType == "SALARIED") {
				$("#diaplaySalary").html(data.salary);
				$("#diaplayExperiance").html(data.experinace);
				$("#diaplayCompaney").html(data.companyName);
				$("#diaplayScore").html(data.experinaScore);
			} else {
				$("#diaplayIncome").html(data.netIncome);
				$("#diaplayOrganizationfound").html(data.organizationFound);
				$("#diaplayOrganization").html(data.organization);
				$("#diaplayScore").html(data.experinaScore);
			}

			$("#experianPoints").val(data.riskProfileDto.cibilScore);
			$("#salaryPoints").val(data.riskProfileDto.salaryOrIncome);
			$("#companeyPoints").val(data.riskProfileDto.companyOrOrganization);
			$("#experiancePoints").val(
				data.riskProfileDto.experianceOrExistenceOfOrganization
			);
			$("#gradeValue").val(data.riskProfileDto.grade);
		},
		error: function (xhr, textStatus, errorThrown) {
			if (arguments[0].responseJSON.errorCode == 119) {
				$("#modal-riskCalWithoutScore").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function riskCalculation() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var cibilScorePoints = $(".experian").val();
	var salaryOrIncomePoints = $(".salary").val();
	var companyOrOrganizationPoints = $(".companey").val();
	var experianceOrExistenceOfOrganizationPoints = $(".experiance").val();
	var grade = $("#gradeValue").val();

	var isValid = true;

	if (cibilScorePoints == "") {
		$(".experianPointsError").show();
		isValid = false;
	} else if (cibilScorePoints > 25) {
		$(".experianPointsError").html("You can't enter more than 25 points.");
		$(".experianPointsError").show();
		isValid = false;
	} else {
		$(".experianPointsError").hide();
	}

	if (salaryOrIncomePoints == "") {
		$(".salaryPointsError").show();
		isValid = false;
	} else if (salaryOrIncomePoints > 25) {
		$(".salaryPointsError").html("You can't enter more than 25 points.");
		$(".salaryPointsError").show();
		isValid = false;
	} else {
		$(".salaryPointsError").hide();
	}

	if (companyOrOrganizationPoints == "") {
		$(".companeyPointsError").show();
		isValid = false;
	} else if (companyOrOrganizationPoints > 25) {
		$(".companeyPointsError").html("You can't enter more than 25 points.");
		$(".companeyPointsError").show();
		isValid = false;
	} else {
		$(".companeyPointsError").hide();
	}

	if (experianceOrExistenceOfOrganizationPoints == "") {
		$(".experiancePointsError").show();
		isValid = false;
	} else if (experianceOrExistenceOfOrganizationPoints > 25) {
		$(".experiancePointsError").html("You can't enter more than 25 points.");
		$(".experiancePointsError").show();
		isValid = false;
	} else {
		$(".experiancePointsError").hide();
	}

	var getId = $(".riskCalculationBtn").attr("data-clickedid");
	if (userisIn == "local") {
		var updateCommentUrl =
			apiBaseURLOXY + suserId + "/loan/ADMIN/calculateprofilerisk";
	} else {
		var updateCommentUrl =
			apiBaseURLOXY + suserId + "/loan/ADMIN/calculateprofilerisk";
	}
	var postData = {
		id: getId,
		salaryOrIncomePoints: salaryOrIncomePoints,

		companyOrOrganizationPoints: companyOrOrganizationPoints,

		experianceOrExistenceOfOrganizationPoints:
			experianceOrExistenceOfOrganizationPoints,

		cibilScorePoints: cibilScorePoints,
		grade: grade,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	if (isValid == true) {
		$.ajax({
			url: updateCommentUrl,
			type: "POST",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				//alert('updated');
				$("#modal-riskCalculation").modal("hide");
				$("#modal-sucessriskCalculation").modal("show");
			},

			error: function (request, error) {
				console.log("error");
			},

			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

function userSendOffer(loanreqid, id) {
	var broi = $(".sendbtn" + loanreqid).attr("data-broi");
	var dduration = $(".sendbtn" + loanreqid).attr("data-duration");
	var durationtype = $(".sendbtn" + loanreqid).attr("data-durationtype");

	if (durationtype == null || durationtype == "") {
		$("#modal-userloanApprovestage .modal-body").html(
			"superadmin comments are not given to this borrower."
		);
		$("#modal-userloanApprovestage").modal("show");
		return false;
	}
	$("#tenure option[value='" + dduration + "']").attr("selected", "selected");
	$("#rateOfInterest option[value='" + broi + "']").attr(
		"selected",
		"selected"
	);
	var $radio = $("input:radio[name=Duration]");
	if ($radio.is(":checked") === false) {
		$radio.filter("[value=" + durationtype + "]").prop("checked", true);
	}

	$("input[name=Duration]").attr("disabled", true);

	$("#modal-borrower-sendoffer").modal("show");
	$(".borrowersendofferBtn").attr("data-clickedid", id);
	$(".borrowersendofferBtn").attr("data-reqid", loanreqid);
}

function borrowersendoffer() {
	$("#modal-borrower-sendoffer").modal("hide");
	$("#modal-Sendofferamount").modal("show");
	////Changes by Liveen Starts
	$(".loanAmountError").hide();
	$(".roiError").hide();
	$(".tenureError").hide();
	$(".processingFeeError").hide();
	////Changes by Liveen Ends
	var id = $(".borrowersendofferBtn").attr("data-clickedid");
	var loanreqid = $(".borrowersendofferBtn").attr("data-reqid");
	$(".sendLoanoffer").attr("data-clickedid", id);
	$(".sendLoanoffer").attr("data-reqid", loanreqid);
}

function sendUserOffer() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var loanOfferAmount = $("#loanOfferAmount").val();
	var rateOfInterest = $("#rateOfInterest").val();
	var tenure = $("#tenure").val();
	var processingFee = $("#processingFee").val();
	var comments = $("#comments").val();
	var tenuretype = $("input[name='Duration']:checked").val();
	var loanReqId = $(".sendLoanoffer").attr("data-reqid");
	var userId = $(".sendLoanoffer").attr("data-clickedid");

	var isValid = true;

	if (loanOfferAmount == "") {
		$(".loanAmountError").show();
		isValid = false;
	} else {
		$(".loanAmountError").hide();
	}

	if (rateOfInterest == "") {
		$(".roiError").show();
		isValid = false;
	} else {
		$(".roiError").hide();
	}

	if (tenure == "") {
		$(".tenureError").show();
		isValid = false;
	} else {
		$(".tenureError").hide();
	}

	if (processingFee == "") {
		$(".processingFeeError").html(
			"Please Select fee percentage to autopopulate the fee amount."
		);
		$(".processingFeeError").show();
		isValid = false;
	} else {
		$(".processingFeeError").hide();
	}

	if (userisIn == "local") {
		var updateCommentUrl = apiBaseURLOXY + userId + "/loan/sendOffer";
	} else {
		var updateCommentUrl = apiBaseURLOXY + userId + "/loan/sendOffer";
	}
	var postData = {
		loanOfferedAmount: loanOfferAmount,
		loanRequestedId: loanReqId,
		rateOfInterest: rateOfInterest,
		duration: tenure,
		durationType: tenuretype,
		fee: processingFee,
		comments: comments,
	};
	var postData = JSON.stringify(postData);

	console.log(postData);
	if (isValid == true) {
		$.ajax({
			url: updateCommentUrl,
			type: "POST",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				$("#modal-Sendofferamount").modal("hide");
				$("#modal-SendOfferSent").modal("show");
				setTimeout(function () {
					location.reload();
				}, 2000);
			},

			error: function (request, error) {
				$("#modal-Sendofferamount").modal("hide");

				$(".modal-body #text1").html(arguments[0].responseJSON.errorMessage);

				if (arguments[0].responseJSON.errorCode == 108) {
					$("#modal-alreadyDoneSendOffer").modal("show");
				} else if (arguments[0].responseJSON.errorCode == 115) {
					$("#modal-alreadyDoneSendOffer").modal("show");
				}
			},

			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

$(document).ready(function () {
	$("#experianPoints, #salaryPoints,#companeyPoints,#experiancePoints").on(
		"keypress",
		function (e) {
			var $this = $(this);
			var regex = new RegExp("^[0-9\b]+$");
			var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);
			if ($this.val().length > 1) {
				e.preventDefault();
				return false;
			}
			if (regex.test(str)) {
				return true;
			}
			e.preventDefault();
			return false;
		}
	);

	$("#cibilScoreValue").on("keypress", function (e) {
		var $this = $(this);
		var regex = new RegExp("^[0-9\b]+$");
		var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);
		if ($this.val().length > 2) {
			e.preventDefault();
			return false;
		}
		if (regex.test(str)) {
			return true;
		}
		e.preventDefault();
		return false;
	});
	$("#cibilScoreValue").on("keyup", function (e) {
		$(".cibilError").hide();
	});

	$("#loanOfferAmount, #percentageValue").change(function () {
		var loanValue = $("#loanOfferAmount").val();
		var percentagevalue = $("#percentageValue").val();
		var processingFees = (loanValue * percentagevalue) / 100;
		var processingFeesGST = (processingFees * 18) / 100;
		var totalprocessingFee = processingFees + processingFeesGST;

		$(".displayprocessingFees").val(totalprocessingFee);
	});

	$("#experianPoints, #salaryPoints,#companeyPoints,#experiancePoints").keyup(
		function () {
			var experianPoints = parseInt($("#experianPoints").val());
			var salaryPoints = parseInt($("#salaryPoints").val());
			var companeyPoints = parseInt($("#companeyPoints").val());
			var experiancePoints = parseInt($("#experiancePoints").val());

			var totalPoints =
				experianPoints + salaryPoints + companeyPoints + experiancePoints;

			if (
				experianPoints != "" &&
				salaryPoints != "" &&
				companeyPoints != "" &&
				experiancePoints != ""
			) {
				if (totalPoints <= 25) {
					$("#gradeValue").val("D");
				} else if (totalPoints > 26 && totalPoints < 50) {
					$("#gradeValue").val("C");
				} else if (totalPoints > 51 && totalPoints < 75) {
					$("#gradeValue").val("B");
				} else if (totalPoints > 76 && totalPoints < 100) {
					$("#gradeValue").val("A");
				}
			}
			console.log(totalPoints);
		}
	);
});

function loadWalletDetails() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + "0/gettestlenderwallettrns";
	} else {
		var actOnLoan = apiBaseURLOXY + "0/gettestlenderwallettrns";
	}
	var postData = {
		pageNo: 1,
		pageSize: 10,
	};
	var postData = JSON.stringify(postData);
	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			// console.log(data.results);
			if (data.results.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"wallettransactiondetails"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, { data: data.results });
				$("#displaywallettrns").html(html);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".acceptedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 10,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...

						var postData = {
							pageNo: num,
							pageSize: 10,
						};
						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var actOnLoan = apiBaseURLOXY + "0/gettestlenderwallettrns";
						} else {
							var actOnLoan = apiBaseURLOXY + "0/gettestlenderwallettrns";
						}

						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								//console.log(data.results);

								var template = document.getElementById(
									"wallettransactiondetails"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.results,
								});
								$("#displaywallettrns").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	$(".loadingSec").hide();
}

function downLoadWalletTrnsImage(suserId, docId, doctype) {
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	var doctype = doctype;
	var documnetId = docId;

	if (userisIn == "local") {
		var getPAN =
			apiBaseURLOXY + suserId + "/download/" + doctype + "/" + documnetId;
	} else {
		var getPAN =
			apiBaseURLOXY + suserId + "/download/" + doctype + "/" + documnetId;
	}

	$.ajax({
		url: getPAN,
		type: "GET",
		success: function (data, textStatus, xhr) {
			if (data.downloadUrl != "") {
				console.log(data.downloadUrl);
				var sourcePath = data.downloadUrl;
				var contentTypeCheck = ".pdf";
				if (sourcePath.indexOf(contentTypeCheck) != -1) {
					window.open(data.downloadUrl, "_blank");
				} else {
					$.colorbox({ href: data.downloadUrl });
				}
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function lenderwalletTransactionApprove(documentId) {
	$("#modal-approveComments").modal("show");
	$(".saveApproveCommentsBtn").attr("data-clickedid", documentId);
}

function updatewalletApproveComments() {
	$("#modal-lenderwalletApproveComments").modal("show");
	var documentId = $(".saveApproveCommentsBtn").attr("data-clickedid");
	$(".lenderApproveCommentsBtn").attr("data-clickedid", documentId);
}

function saveupdatewalletApproveComments() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var comments = $(".approveComment").val();
	var id = $(".lenderApproveCommentsBtn").attr("data-clickedid");

	$(".lenderApproveCommentsBtn").attr("disabled", true);
	const walletApprovedUser = $("#walletApprovedUsers").val();

	let isValid = true;

	if (walletApprovedUser == "") {
		$(".walletApprovedError").show();
		$(".lenderApproveCommentsBtn").attr("disabled", false);
		isValid = false;
	}

	if (userisIn == "local") {
		var updateCommentUrl =
			apiBaseURLOXY + "updateescrowwallettransaction/" + id + "";
	} else {
		var updateCommentUrl =
			apiBaseURLOXY + "updateescrowwallettransaction/" + id + "";
	}

	var postData = {
		comments: comments,
		status: "approved",
		adminName: walletApprovedUser,
		// documnetId:id
	};
	var postData = JSON.stringify(postData);

	if (isValid == true) {
		$.ajax({
			url: updateCommentUrl,
			type: "POST",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				$("#modal-lenderwalletApproveComments").modal("hide");
				$("#modal-transactionAprrove").modal("show");
				$("#" + id).prop("disabled", true);
				$(".lenderApproveCommentsBtn").attr("disabled", false);
				//$('#' + id).prop("disabled", false);
			},

			error: function (request, error) {
				console.log("error");
				$("#modal-lenderwalletApproveComments").modal("hide");
				$("#modal-transactionAprrove").modal("hide");

				$(".modal-body #display_text").html(
					arguments[0].responseJSON.errorMessage
				);
				if (arguments[0].responseJSON.errorCode == 114) {
					$("#modal-walletapprovedreject").modal("show");
				}
				$(".lenderApproveCommentsBtn").attr("disabled", false);
			},

			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}

	return isValid;
}

function lenderwalletTransactionReject(documentId) {
	$("#modal-rejectComments").modal("show");
	$(".saveRejectCommentsBtn").attr("data-clickedid", documentId);
}

function updatewalletRejectComments() {
	$("#modal-lenderwalletRejectComments").modal("show");
	var documentId = $(".saveRejectCommentsBtn").attr("data-clickedid");
	$(".lenderRejectCommentsBtn").attr("data-clickedid", documentId);
}

function saveupdatewalletRejectComments() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var comments = $(".approveComment").val();
	var id = $(".lenderRejectCommentsBtn").attr("data-clickedid");

	if (userisIn == "local") {
		var updateCommentUrl =
			apiBaseURLOXY + "updateescrowwallettransaction/" + id + "";
	} else {
		var updateCommentUrl =
			apiBaseURLOXY + "updateescrowwallettransaction/" + id + "";
	}

	var postData = {
		comments: comments,
		status: "rejected",
		// adminName: "Admin",
	};
	var postData = JSON.stringify(postData);
	$.ajax({
		url: updateCommentUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-lenderwalletRejectComments").modal("hide");
			$("#modal-transactionReject").modal("show");
			$("#" + id).prop("disabled", true);
			//$('#' + id).prop("disabled", false);
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function searchwalletUsers() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);

	var firstName = $(".firstName").val();
	var lastName = $(".lastName").val();
	console.log("Name " + firstName + " " + lastName);

	var lenderid = $(".id input").val();
	lenderid = lenderid.substr(2);

	console.log("lender id " + lenderid);
	if (userSelecctedOption == "name") {
		var postData = {
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			firstName: firstName,
			lastName: lastName,
		};
	}

	var postData = JSON.stringify(postData);
	console.log(postData);
	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + "searchlenderwallet";
	} else {
		var getStatUrl = apiBaseURLOXY + "searchlenderwallet";
	}

	$.ajax({
		url: getStatUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById(
				"wallettransactiondetails"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });
			$("#displaywallettrns").html(html);
			$(".acceptedPagination").hide();
			$(".searchlenderwalletPagination").show();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".searchlenderwalletPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (userSelecctedOption == "name") {
						var postData = {
							page: {
								pageNo: num,
								pageSize: 10,
							},
							firstName: firstName,
							lastName: lastName,
						};
					}
					var postData = JSON.stringify(postData);
					console.log(postData);

					if (userisIn == "local") {
						var getStatUrl = apiBaseURLOXY + "searchlenderwallet";
					} else {
						var getStatUrl = apiBaseURLOXY + "searchlenderwallet";
					}

					$.ajax({
						url: getStatUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"wallettransactiondetails"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#displaywallettrns").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}
function searchwalletbyLoanid() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var lenderid = $(".id input").val();
	lenderid = lenderid.substr(2);

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
   console.log(sprimaryType)
	if (sprimaryType === "PRIMARYADMIN") {
		var adminurl = "/lenderWalletTransactions";
	} else if (sprimaryType === "MASTERADMIN") {
		var adminurl = "/testLenderWalletTransactions";
	} else if (sprimaryType === "SUBADMIN") {
		var adminurl = "/testLenderWalletTransactions";
	} else {
		var adminurl = "/testLenderWalletTransactions";
	}
	

	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + lenderid + adminurl;
	} else {
		var getStatUrl = apiBaseURLOXY + lenderid + adminurl;
	}


		$.ajax({
			url: getStatUrl,
			type: "POST",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				console.log(data);
				totalEntries = data.totalCount;
				var templateElement = document.getElementById("wallettransactionbyloanid");
				if (!templateElement) {
					console.error('Element with ID "wallettransactionbyloanid" not found.');
					return;
				}
				var template = templateElement.innerHTML;
	
				Mustache.parse(template);
				console.log(data.results);
				var html = Mustache.to_html(template, { data: data.results });
	
				$("#displaywallettrns").html(html);
				$(".acceptedPagination").hide();
				$(".searchlenderwalletPagination").show();
	
				var displayPageNo = Math.ceil(totalEntries / 10);
	
				$(".searchlenderwalletPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						var postData = JSON.stringify({
							pageNo: num,
							pageSize: 10,
						});
						console.log(postData);
	
						var adminurl;
						if (sprimaryType === "PRIMARYADMIN") {
							adminurl = "/testLenderWalletTransactions";
						} else if (sprimaryType === "MASTERADMIN") {
							adminurl = "/testLenderWalletTransactions";
						} else if (sprimaryType === "SUBADMIN") {
							adminurl = "/testLenderWalletTransactions";
						} else {
							adminurl = "/testLenderWalletTransactions";
						}
	
						var getStatUrl = apiBaseURLOXY + lenderid + adminurl;
	
						$.ajax({
							url: getStatUrl,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var templateElement = document.getElementById("wallettransactionbyloanid");
								if (!templateElement) {
									console.error('Element with ID "wallettransactionbyloanid" not found.');
									return;
								}
								var template = templateElement.innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.results,
								});
								$("#displaywallettrns").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
								if (xhr.status === 400) {
									var errorData = JSON.parse(xhr.responseText);
									var errorMessage = errorData.errorMessage;
									$("#modal-transactiondanger").modal("show");
									$("#modal-transactiondanger .modal-body").html(errorMessage);
									setTimeout(function () {
										location.reload();
									}, 4000);
								}
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");
				if (xhr.status === 400) {
					var errorData = JSON.parse(xhr.responseText);
					console.log(errorData)
					var errorMessage = errorData.errorMessage;
					$("#modal-transactiondanger").modal("show");
					$("#modal-transactiondanger .modal-body").html(errorMessage);
					setTimeout(function () {
						location.reload();
					}, 4000);
				}
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});

}
function loadExpiredBorrowerApplications() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getLenders =
			apiBaseURLOXY + suserId + "/loan/" + sprimaryType + "/request/search";
	} else {
		var getLenders =
			apiBaseURLOXY + suserId + "/loan/" + sprimaryType + "/request/search";
	}

	var postData = {
		leftOperand: {
			leftOperand: {
				fieldName: "userPrimaryType",
				fieldValue: "BORROWER",
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "user.status",
				fieldValue: "ACTIVE",
				operator: "EQUALS",
			},
		},
		logicalOperator: "AND",
		rightOperand: {
			leftOperand: {
				fieldName: "parentRequestId",
				fieldValue: 0,
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "loanOfferedAmount.loanOfferdStatus",
				fieldValue: "LOANOFFEREXPIRED",
				operator: "EQUALS",
			},
		},
		page: {
			pageNo: 1,
			pageSize: 10,
		},
		sortBy: "loanRequestedDate",
		sortOrder: "DESC",
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: getLenders,
		dataType: "json",
		contentType: "application/json",
		type: "POST",
		data: postData,
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById("loadBorrowersListTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });
			$("#loadBorrowersList").html(html);

			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].borrowerKycDocuments.length; j++) {
					var docType = data.results[i].borrowerKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].borrowerUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//$(".viewPan").colorbox();
			bindCommentsClick();

			/*888888888888888*/
			$(".dashBoardPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						leftOperand: {
							leftOperand: {
								fieldName: "userPrimaryType",
								fieldValue: "BORROWER",
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								fieldName: "user.status",
								fieldValue: "ACTIVE",
								operator: "EQUALS",
							},
						},
						logicalOperator: "AND",
						rightOperand: {
							leftOperand: {
								fieldName: "parentRequestId",
								fieldValue: 0,
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								fieldName: "loanOfferedAmount.loanOfferdStatus",
								fieldValue: "LOANOFFEREXPIRED",
								operator: "EQUALS",
							},
						},
						page: {
							pageNo: num,
							pageSize: 10,
						},
						sortBy: "loanRequestedDate",
						sortOrder: "DESC",
					};

					var postData = JSON.stringify(postData);
					console.log(postData);
					if (userisIn == "local") {
						var getLenders =
							apiBaseURLOXY +
							suserId +
							"/loan/" +
							sprimaryType +
							"/request/search";
					} else {
						var getLenders =
							apiBaseURLOXY +
							suserId +
							"/loan/" +
							sprimaryType +
							"/request/search";
					}
					$.ajax({
						url: getLenders,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"loadBorrowersListTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadBorrowersList").html(html);

							for (var i = 0; i < data.results.length; i++) {
								for (
									j = 0;
									j < data.results[i].borrowerKycDocuments.length;
									j++
								) {
									var docType =
										data.results[i].borrowerKycDocuments[j].documentSubType;
									$(
										".user-ViewDocs" +
											data.results[i].borrowerUser.id +
											" .show" +
											docType
									).attr("style", "display:block");
								}
							}

							bindCommentsClick();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
			/*888888888888888*/
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadRejectedBorrowerApplications() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getLenders =
			apiBaseURLOXY + suserId + "/loan/" + sprimaryType + "/request/search";
	} else {
		var getLenders =
			apiBaseURLOXY + suserId + "/loan/" + sprimaryType + "/request/search";
	}

	var postData = {
		leftOperand: {
			leftOperand: {
				fieldName: "userPrimaryType",
				fieldValue: "BORROWER",
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "user.status",
				fieldValue: "ACTIVE",
				operator: "EQUALS",
			},
		},
		logicalOperator: "AND",
		rightOperand: {
			leftOperand: {
				fieldName: "parentRequestId",
				fieldValue: 0,
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "loanOfferedAmount.loanOfferdStatus",
				fieldValue: "LOANOFFERREJECTED",
				operator: "EQUALS",
			},
		},
		page: {
			pageNo: 1,
			pageSize: 10,
		},
		sortBy: "loanRequestedDate",
		sortOrder: "DESC",
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: getLenders,
		dataType: "json",
		contentType: "application/json",
		type: "POST",
		data: postData,
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById("loadBorrowersListTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });
			$("#loadBorrowersList").html(html);

			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].borrowerKycDocuments.length; j++) {
					var docType = data.results[i].borrowerKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].borrowerUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//$(".viewPan").colorbox();
			bindCommentsClick();

			/*888888888888888*/
			$(".dashBoardPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						leftOperand: {
							leftOperand: {
								fieldName: "userPrimaryType",
								fieldValue: "BORROWER",
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								fieldName: "user.status",
								fieldValue: "ACTIVE",
								operator: "EQUALS",
							},
						},
						logicalOperator: "AND",
						rightOperand: {
							leftOperand: {
								fieldName: "parentRequestId",
								fieldValue: 0,
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								fieldName: "loanOfferedAmount.loanOfferdStatus",
								fieldValue: "LOANOFFERREJECTED",
								operator: "EQUALS",
							},
						},
						page: {
							pageNo: num,
							pageSize: 10,
						},
						sortBy: "loanRequestedDate",
						sortOrder: "DESC",
					};

					var postData = JSON.stringify(postData);
					console.log(postData);
					if (userisIn == "local") {
						var getLenders =
							apiBaseURLOXY +
							suserId +
							"/loan/" +
							sprimaryType +
							"/request/search";
					} else {
						var getLenders =
							apiBaseURLOXY +
							suserId +
							"/loan/" +
							sprimaryType +
							"/request/search";
					}
					$.ajax({
						url: getLenders,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"loadBorrowersListTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadBorrowersList").html(html);

							for (var i = 0; i < data.results.length; i++) {
								for (
									j = 0;
									j < data.results[i].borrowerKycDocuments.length;
									j++
								) {
									var docType =
										data.results[i].borrowerKycDocuments[j].documentSubType;
									$(
										".user-ViewDocs" +
											data.results[i].borrowerUser.id +
											" .show" +
											docType
									).attr("style", "display:block");
								}
							}

							bindCommentsClick();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
			/*888888888888888*/
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadAcceptedBorrowerApplications() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getLenders =
			apiBaseURLOXY + suserId + "/loan/" + sprimaryType + "/request/search";
	} else {
		var getLenders =
			apiBaseURLOXY + suserId + "/loan/" + sprimaryType + "/request/search";
	}

	var postData = {
		leftOperand: {
			leftOperand: {
				fieldName: "userPrimaryType",
				fieldValue: "BORROWER",
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "user.status",
				fieldValue: "ACTIVE",
				operator: "EQUALS",
			},
		},
		logicalOperator: "AND",
		rightOperand: {
			leftOperand: {
				fieldName: "parentRequestId",
				operator: "NULL",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "loanOfferedAmount.loanOfferdStatus",
				fieldValue: "LOANOFFERACCEPTED",
				operator: "EQUALS",
			},
		},
		page: {
			pageNo: 1,
			pageSize: 10,
		},
		sortBy: "loanRequestedDate",
		sortOrder: "DESC",
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: getLenders,
		dataType: "json",
		contentType: "application/json",
		type: "POST",
		data: postData,
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById("loadBorrowersListTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });
			$("#loadBorrowersList").html(html);

			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].borrowerKycDocuments.length; j++) {
					var docType = data.results[i].borrowerKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].borrowerUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//$(".viewPan").colorbox();
			bindCommentsClick();

			/*888888888888888*/
			$(".dashBoardPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						leftOperand: {
							leftOperand: {
								fieldName: "userPrimaryType",
								fieldValue: "BORROWER",
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								fieldName: "user.status",
								fieldValue: "ACTIVE",
								operator: "EQUALS",
							},
						},
						logicalOperator: "AND",
						rightOperand: {
							leftOperand: {
								fieldName: "parentRequestId",
								operator: "NULL",
							},
							logicalOperator: "AND",
							rightOperand: {
								fieldName: "loanOfferedAmount.loanOfferdStatus",
								fieldValue: "LOANOFFERACCEPTED",
								operator: "EQUALS",
							},
						},
						page: {
							pageNo: num,
							pageSize: 10,
						},
						sortBy: "loanRequestedDate",
						sortOrder: "DESC",
					};

					var postData = JSON.stringify(postData);
					console.log(postData);
					if (userisIn == "local") {
						var getLenders =
							apiBaseURLOXY +
							suserId +
							"/loan/" +
							sprimaryType +
							"/request/search";
					} else {
						var getLenders =
							apiBaseURLOXY +
							suserId +
							"/loan/" +
							sprimaryType +
							"/request/search";
					}
					$.ajax({
						url: getLenders,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"loadBorrowersListTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadBorrowersList").html(html);

							for (var i = 0; i < data.results.length; i++) {
								for (
									j = 0;
									j < data.results[i].borrowerKycDocuments.length;
									j++
								) {
									var docType =
										data.results[i].borrowerKycDocuments[j].documentSubType;
									$(
										".user-ViewDocs" +
											data.results[i].borrowerUser.id +
											" .show" +
											docType
									).attr("style", "display:block");
								}
							}

							bindCommentsClick();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
			/*888888888888888*/
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function usercibilScore(id) {
	$("#modal-borrower-cibilscore").modal("show");
	////Changes by Liveen Starts
	$(".cibilError").hide();
	////Changes by Liveen Ends
	$(".borrowercibilscoreBtn").attr("data-clickedid", id);
}

function borrowercibilscore() {
	$("#modal-borrower-cibilscore").modal("hide");
	$("#modal-cibilScore").modal("show");
	var id = $(".borrowercibilscoreBtn").attr("data-clickedid");
	$(".savecibilscoreBtn").attr("data-clickedId", id);
}

function updateCibilScore() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var enteredcibilSore = $("#cibilScoreValue").val();
	var userId = $(".savecibilscoreBtn").attr("data-clickedId");

	var isValid = true;

	if (enteredcibilSore == "") {
		$(".cibilError").show();
		isValid = false;
	} else if (enteredcibilSore > 900) {
		$(".cibilError").html("Cibil Score not grater than 900.");
		$(".cibilError").show();
		isValid = false;
	}

	if (userisIn == "local") {
		var updateCommentUrl = apiBaseURLOXY + userId + "/creditScoreByPaisabazaar";
	} else {
		var updateCommentUrl = apiBaseURLOXY + userId + "/creditScoreByPaisabazaar";
	}
	var postData = { creditScoreByPaisabazaar: enteredcibilSore };

	var postData = JSON.stringify(postData);
	console.log(postData);
	if (isValid == true) {
		$.ajax({
			url: updateCommentUrl,
			type: "PATCH",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				$("#modal-cibilScore").modal("hide");
				alert("updated");
			},

			error: function (request, error) {
				console.log("error");
			},

			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}

	return isValid;
}

const cicReport = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const statement =
		userisIn === "local"
			? apiBaseURLOXY + "getcicreport"
			: apiBaseURLOXY + "getcicreport";

	fetch(statement, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			window.open(data.downloadUrl, "_blank");
		})
		.catch((error) => {
			console.log("Error Something");
		});
};

function loadofferAcceptedUsers() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateEmiUrlCard =
			apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	} else {
		var updateEmiUrlCard =
			apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	}

	var getfornotifications = $(".requestidFromClick").html();

	if (getfornotifications == "approved") {
		var postData = {
			leftOperand: {
				fieldName: "loanStatus",
				fieldValue: "Agreed",
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "adminComments",
				fieldValue: " ",
				operator: "NULL",
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanId",
			sortOrder: "DESC",
		};
	} else {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "userPrimaryType",
					fieldValue: "BORROWER",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.adminComments",
					fieldValue: "INTERESTED",
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanOfferedAmount.loanOfferdStatus",
					fieldValue: "LOANOFFERACCEPTED",
					operator: "EQUALS",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 9,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	}

	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateEmiUrlCard,
		data: postData,
		dataType: "json",
		contentType: "application/json",
		type: "POST",

		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById(
				"loadBorrowersInterestedListTpl"
			).innerHTML;

			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data.results });
			$("#loadBorrowersInterestedList").html(html);
			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].borrowerKycDocuments.length; j++) {
					var docType = data.results[i].borrowerKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].borrowerUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}

			bindCommentsClick();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//$(".viewPan").colorbox();
			bindCommentsClick();

			/*888888888888888*/
			$(".interstedPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (getfornotifications == "approved") {
						var postData = {
							leftOperand: {
								fieldName: "loanStatus",
								fieldValue: "Agreed",
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								fieldName: "adminComments",
								fieldValue: " ",
								operator: "NULL",
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanId",
							sortOrder: "DESC",
						};
					} else {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "userPrimaryType",
									fieldValue: "BORROWER",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.adminComments",
									fieldValue: "INTERESTED",
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanOfferedAmount.loanOfferdStatus",
									fieldValue: "LOANOFFERACCEPTED",
									operator: "EQUALS",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					}

					var postData = JSON.stringify(postData);

					if (userisIn == "local") {
						var updateEmiUrlCard =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					} else {
						var updateEmiUrlCard =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					}

					$.ajax({
						url: updateEmiUrlCard,
						data: postData,
						dataType: "json",
						contentType: "application/json",
						type: "POST",

						success: function (data, textStatus, xhr) {
							totalEntries = data.totalCount;
							var template = document.getElementById(
								"loadBorrowersInterestedListTpl"
							).innerHTML;

							Mustache.parse(template);

							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadBorrowersInterestedList").html(html);
							for (var i = 0; i < data.results.length; i++) {
								for (
									j = 0;
									j < data.results[i].borrowerKycDocuments.length;
									j++
								) {
									var docType =
										data.results[i].borrowerKycDocuments[j].documentSubType;
									$(
										".user-ViewDocs" +
											data.results[i].borrowerUser.id +
											" .show" +
											docType
									).attr("style", "display:block");
								}
							}

							bindCommentsClick();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function searchUsersIntrested(userType) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	console.log("in search function");
	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);
	var lenderid = $(".lenderid input").val();
	lenderid = lenderid.substr(2);

	var borrowerid = $(".borrowerid input").val();
	borrowerid = borrowerid.substr(2);

	if (userSelecctedOption == "mobileNumber") {
		var mobileNumber = $(".mobileNumber input").val();
		console.log(mobileNumber);
	}

	if (userSelecctedOption == "userName") {
		var userName = $(".userName input").val();
		console.log(userName);
	}

	if (userSelecctedOption == "city") {
		var city = $("#cityValue").val();
		console.log(city);
	}

	console.log("lender id " + lenderid);
	console.log("User Type: " + userType);
	console.log("borrowerid is :" + borrowerid);

	var minamtValue = $(".minAmount").val();
	var maxamtValue = $(".maxAmount").val();

	console.log(minamtValue + " " + maxamtValue);

	var minRoi = $(".minRoi").val();
	var maxRoi = $(".maxRoi").val();

	var city = $("#cityValue").val();

	console.log(city);

	console.log(minRoi + " " + maxRoi);

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (primaryType == "LENDER") {
		var fieldValueforSearch = "LENDER";
	} else {
		var fieldValueforSearch = "BORROWER";
	}

	if (userSelecctedOption == "mobileNumber") {
		var postData = {
			leftOperand: {
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.mobileNumber",
					operator: "EQUALS",
					fieldValue: mobileNumber,
				},
				leftOperand: {
					fieldName: "userPrimaryType",
					fieldValue: userType,
					operator: "EQUALS",
				},
			},

			logicalOperator: "AND",

			rightOperand: {
				fieldName: "parentRequestId",
				operator: "NULL",
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "userName") {
		var postData = {
			leftOperand: {
				logicalOperator: "AND",
				rightOperand: {
					logicalOperator: "OR",
					rightOperand: {
						fieldName: "user.personalDetails.firstName",
						operator: "LIKE",
						fieldValue: userName,
					},
					leftOperand: {
						fieldName: "user.personalDetails.lastName",
						operator: "LIKE",
						fieldValue: userName,
					},
				},
				leftOperand: {
					fieldName: "userPrimaryType",
					fieldValue: userType,
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "user.adminComments",
					fieldValue: "INTERESTED",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "city") {
		var postData = {
			leftOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "userPrimaryType",
						fieldValue: userType,
						operator: "EQUALS",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "user.city",
						fieldValue: city,
						operator: "ILIKE",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					leftOperand: {
						fieldName: "user.adminComments",
						fieldValue: "INTERESTED",
						operator: "EQUALS",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "parentRequestId",
						operator: "NULL",
					},
				},
			},
			logicalOperator: "OR",
			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "userPrimaryType",
						fieldValue: userType,
						operator: "EQUALS",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "user.personalDetails.address",
						fieldValue: city,
						operator: "ILIKE",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					leftOperand: {
						fieldName: "user.adminComments",
						fieldValue: "INTERESTED",
						operator: "EQUALS",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "parentRequestId",
						operator: "NULL",
					},
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "amount&city") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "user.primaryType",
					fieldValue: "BORROWER",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.city",
					fieldValue: city,
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "parentRequestId",
						operator: "NULL",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "userPrimaryType",
						fieldValue: "BORROWER",
						operator: "EQUALS",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					leftOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: minamtValue,
						operator: "GTE",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: maxamtValue,
						operator: "LTE",
					},
				},
			},

			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "roi") {
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				operator: "EQUALS",
				fieldValue: "BORROWER",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "rateOfInterest",
					fieldValue: minRoi,
					operator: "GTE",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "rateOfInterest",
					fieldValue: maxRoi,
					operator: "LTE",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 9,
			},
		};
	} else if (userSelecctedOption == "amount") {
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				operator: "EQUALS",
				fieldValue: "BORROWER",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "loanRequestAmount",
					fieldValue: minamtValue,
					operator: "GTE",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanRequestAmount",
					fieldValue: maxamtValue,
					operator: "LTE",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 9,
			},
		};
	} else {
		var postData = {
			leftOperand: {
				fieldName: "userId",
				fieldValue: borrowerid,
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.adminComments",
					fieldValue: "INTERESTED",
					operator: "EQUALS",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	}
	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	} else {
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	}
	$.ajax({
		url: getStatUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			console.log(totalEntries);
			//  $(".nodata-pl").hide();
			var template = document.getElementById(
				"loadBorrowersInterestedListTpl"
			).innerHTML;
			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data.results });

			$("#loadBorrowersInterestedList").html(html);
			$(".interstedPagination").hide();
			$(".searchinterstedPagination").show();
			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].borrowerKycDocuments.length; j++) {
					var docType = data.results[i].borrowerKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].borrowerUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}
			bindCommentsClick();
			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".searchinterstedPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (primaryType == "LENDER") {
						var fieldValueforSearch = "BORROWER";
					} else {
						var fieldValueforSearch = "LENDER";
					}
					userSelecctedOption = $(".choosenType").val();
					// alert(userSelecctedOption);
					if (userSelecctedOption == "mobileNumber") {
						var postData = {
							leftOperand: {
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.mobileNumber",
									operator: "EQUALS",
									fieldValue: mobileNumber,
								},
								leftOperand: {
									fieldName: "userPrimaryType",
									fieldValue: userType,
									operator: "EQUALS",
								},
							},

							logicalOperator: "AND",

							rightOperand: {
								fieldName: "parentRequestId",
								operator: "NULL",
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "userName") {
						var postData = {
							leftOperand: {
								logicalOperator: "AND",
								rightOperand: {
									logicalOperator: "OR",
									rightOperand: {
										fieldName: "user.personalDetails.firstName",
										operator: "LIKE",
										fieldValue: userName,
									},
									leftOperand: {
										fieldName: "user.personalDetails.lastName",
										operator: "LIKE",
										fieldValue: userName,
									},
								},
								leftOperand: {
									fieldName: "userPrimaryType",
									fieldValue: userType,
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "user.adminComments",
									fieldValue: "INTERESTED",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "city") {
						var postData = {
							leftOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "userPrimaryType",
										fieldValue: userType,
										operator: "EQUALS",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "user.city",
										fieldValue: city,
										operator: "ILIKE",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									leftOperand: {
										fieldName: "user.adminComments",
										fieldValue: "INTERESTED",
										operator: "EQUALS",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "parentRequestId",
										operator: "NULL",
									},
								},
							},
							logicalOperator: "OR",
							rightOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "userPrimaryType",
										fieldValue: userType,
										operator: "EQUALS",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "user.personalDetails.address",
										fieldValue: city,
										operator: "ILIKE",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									leftOperand: {
										fieldName: "user.adminComments",
										fieldValue: "INTERESTED",
										operator: "EQUALS",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "parentRequestId",
										operator: "NULL",
									},
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "amount&city") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "user.primaryType",
									fieldValue: "BORROWER",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.city",
									fieldValue: city,
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "parentRequestId",
										operator: "NULL",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "userPrimaryType",
										fieldValue: "BORROWER",
										operator: "EQUALS",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									leftOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: minamtValue,
										operator: "GTE",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: maxamtValue,
										operator: "LTE",
									},
								},
							},

							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "roi") {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								operator: "EQUALS",
								fieldValue: "BORROWER",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "rateOfInterest",
									fieldValue: minRoi,
									operator: "GTE",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "rateOfInterest",
									fieldValue: maxRoi,
									operator: "LTE",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
						};
					} else if (userSelecctedOption == "amount") {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								operator: "EQUALS",
								fieldValue: "BORROWER",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "loanRequestAmount",
									fieldValue: minamtValue,
									operator: "GTE",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanRequestAmount",
									fieldValue: maxamtValue,
									operator: "LTE",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
						};
					} else {
						var postData = {
							leftOperand: {
								fieldName: "userId",
								fieldValue: borrowerid,
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.adminComments",
									fieldValue: "INTERESTED",
									operator: "EQUALS",
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					}
					var postData = JSON.stringify(postData);
					console.log(postData);
					//alert(1);
					if (userisIn == "local") {
						//http://35.154.48.120:8080/oxynew/
						var getStatUrl =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					} else {
						// https://fintech.oxyloans.com/oxyloans/
						var getStatUrl =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					}
					//var getStatUrl = apiBaseURLOXY+userId+"/loan/"+primaryType+"/request/search";
					$.ajax({
						url: getStatUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							totalEntries = data.totalCount;
							console.log(totalEntries);
							var template = document.getElementById(
								"loadBorrowersInterestedListTpl"
							).innerHTML;
							//var template = document.getElementById('loadBorrowersListTpl').innerHTML;
							Mustache.parse(template);
							// var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.results,
							});

							$("#loadBorrowersInterestedList").html(html);

							bindCommentsClick();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function searchUsersofferAccepted(userType) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	console.log("in search function");
	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);
	var lenderid = $(".lenderid input").val();
	lenderid = lenderid.substr(2);

	var borrowerid = $(".borrowerid input").val();
	borrowerid = borrowerid.substr(2);

	if (userSelecctedOption == "mobileNumber") {
		var mobileNumber = $(".mobileNumber input").val();
		console.log(mobileNumber);
	}

	if (userSelecctedOption == "userName") {
		var userName = $(".userName input").val();
		console.log(userName);
	}

	if (userSelecctedOption == "city") {
		var city = $("#cityValue").val();
		console.log(city);
	}

	console.log("lender id " + lenderid);
	console.log("User Type: " + userType);
	console.log("borrowerid is :" + borrowerid);

	var minamtValue = $(".minAmount").val();
	var maxamtValue = $(".maxAmount").val();

	console.log(minamtValue + " " + maxamtValue);

	var minRoi = $(".minRoi").val();
	var maxRoi = $(".maxRoi").val();

	var city = $("#cityValue").val();

	console.log(city);

	console.log(minRoi + " " + maxRoi);

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (primaryType == "LENDER") {
		var fieldValueforSearch = "LENDER";
	} else {
		var fieldValueforSearch = "BORROWER";
	}

	if (userSelecctedOption == "mobileNumber") {
		var postData = {
			leftOperand: {
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.mobileNumber",
					operator: "EQUALS",
					fieldValue: mobileNumber,
				},
				leftOperand: {
					fieldName: "userPrimaryType",
					fieldValue: userType,
					operator: "EQUALS",
				},
			},

			logicalOperator: "AND",

			rightOperand: {
				fieldName: "parentRequestId",
				operator: "NULL",
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "userName") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "user.personalDetails.firstName",
					operator: "LIKE",
					fieldValue: userName,
				},
				logicalOperator: "OR",
				rightOperand: {
					fieldName: "user.personalDetails.lastName",
					operator: "LIKE",
					fieldValue: userName,
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanOfferedAmount.loanOfferdStatus",
					fieldValue: "LOANOFFERACCEPTED",
					operator: "EQUALS",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "city") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "userPrimaryType",
					fieldValue: userType,
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.city",
					fieldValue: city,
					operator: "ILIKE",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanOfferedAmount.loanOfferdStatus",
					fieldValue: "LOANOFFERACCEPTED",
					operator: "EQUALS",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "amount&city") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "user.primaryType",
					fieldValue: "BORROWER",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.city",
					fieldValue: city,
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "parentRequestId",
						operator: "NULL",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "userPrimaryType",
						fieldValue: "BORROWER",
						operator: "EQUALS",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					leftOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: minamtValue,
						operator: "GTE",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: maxamtValue,
						operator: "LTE",
					},
				},
			},

			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "roi") {
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				operator: "EQUALS",
				fieldValue: "BORROWER",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "rateOfInterest",
					fieldValue: minRoi,
					operator: "GTE",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "rateOfInterest",
					fieldValue: maxRoi,
					operator: "LTE",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 9,
			},
		};
	} else if (userSelecctedOption == "amount") {
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				operator: "EQUALS",
				fieldValue: "BORROWER",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "loanRequestAmount",
					fieldValue: minamtValue,
					operator: "GTE",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanRequestAmount",
					fieldValue: maxamtValue,
					operator: "LTE",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 9,
			},
		};
	} else {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "userId",
					fieldValue: borrowerid,
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.adminComments",
					fieldValue: "INTERESTED",
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanOfferedAmount.loanOfferdStatus",
					fieldValue: "LOANOFFERACCEPTED",
					operator: "EQUALS",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	}

	var postData = JSON.stringify(postData);
	console.log(postData);
	if (userisIn == "local") {
		
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	} else {
		
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
		
	}
	$.ajax({
		url: getStatUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			console.log(totalEntries);
			//  $(".nodata-pl").hide();
			var template = document.getElementById(
				"loadBorrowersInterestedListTpl"
			).innerHTML;
			//var template = document.getElementById('loadBorrowersListTpl').innerHTML;
			Mustache.parse(template);
			// var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, { data: data.results });

			$("#loadBorrowersInterestedList").html(html);
			$(".interstedPagination").hide();
			$(".searchinterstedPagination").show();
			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].borrowerKycDocuments.length; j++) {
					var docType = data.results[i].borrowerKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].borrowerUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}
			bindCommentsClick();
			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".searchinterstedPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (primaryType == "LENDER") {
						var fieldValueforSearch = "BORROWER";
					} else {
						var fieldValueforSearch = "LENDER";
					}
					userSelecctedOption = $(".choosenType").val();
					// alert(userSelecctedOption);
					if (userSelecctedOption == "mobileNumber") {
						var postData = {
							leftOperand: {
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.mobileNumber",
									operator: "EQUALS",
									fieldValue: mobileNumber,
								},
								leftOperand: {
									fieldName: "userPrimaryType",
									fieldValue: userType,
									operator: "EQUALS",
								},
							},

							logicalOperator: "AND",

							rightOperand: {
								fieldName: "parentRequestId",
								operator: "NULL",
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "userName") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "user.personalDetails.firstName",
									operator: "LIKE",
									fieldValue: userName,
								},
								logicalOperator: "OR",
								rightOperand: {
									fieldName: "user.personalDetails.lastName",
									operator: "LIKE",
									fieldValue: userName,
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanOfferedAmount.loanOfferdStatus",
									fieldValue: "LOANOFFERACCEPTED",
									operator: "EQUALS",
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "city") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "userPrimaryType",
									fieldValue: userType,
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.city",
									fieldValue: city,
									operator: "ILIKE",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanOfferedAmount.loanOfferdStatus",
									fieldValue: "LOANOFFERACCEPTED",
									operator: "EQUALS",
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "amount&city") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "user.primaryType",
									fieldValue: "BORROWER",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.city",
									fieldValue: city,
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "parentRequestId",
										operator: "NULL",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "userPrimaryType",
										fieldValue: "BORROWER",
										operator: "EQUALS",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									leftOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: minamtValue,
										operator: "GTE",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: maxamtValue,
										operator: "LTE",
									},
								},
							},

							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "roi") {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								operator: "EQUALS",
								fieldValue: "BORROWER",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "rateOfInterest",
									fieldValue: minRoi,
									operator: "GTE",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "rateOfInterest",
									fieldValue: maxRoi,
									operator: "LTE",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
						};
					} else if (userSelecctedOption == "amount") {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								operator: "EQUALS",
								fieldValue: "BORROWER",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "loanRequestAmount",
									fieldValue: minamtValue,
									operator: "GTE",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanRequestAmount",
									fieldValue: maxamtValue,
									operator: "LTE",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
						};
					} else {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "userId",
									fieldValue: borrowerid,
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.adminComments",
									fieldValue: "INTERESTED",
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanOfferedAmount.loanOfferdStatus",
									fieldValue: "LOANOFFERACCEPTED",
									operator: "EQUALS",
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					}
					var postData = JSON.stringify(postData);
					console.log(postData);
					
					if (userisIn == "local") {
						
						var getStatUrl =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					} else {
						
						var getStatUrl =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					}
					
					$.ajax({
						url: getStatUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							totalEntries = data.totalCount;
							console.log(totalEntries);
							var template = document.getElementById(
								"loadBorrowersInterestedListTpl"
							).innerHTML;
							
							Mustache.parse(template);
						
							var html = Mustache.to_html(template, {
								data: data.results,
							});

							$("#loadBorrowersInterestedList").html(html);

							bindCommentsClick();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function searchUsersApprovedtoEsign(userType) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	console.log("in search function");
	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);
	var lenderid = $(".lenderid input").val();
	lenderid = lenderid.substr(2);

	var borrowerid = $(".borrowerid input").val();
	borrowerid = borrowerid.substr(2);

	if (userSelecctedOption == "mobileNumber") {
		var mobileNumber = $(".mobileNumber input").val();
		console.log(mobileNumber);
	}

	if (userSelecctedOption == "userName") {
		var userName = $(".userName input").val();
		console.log(userName);
	}

	if (userSelecctedOption == "city") {
		var city = $("#cityValue").val();
		console.log(city);
	}

	console.log("lender id " + lenderid);
	console.log("User Type: " + userType);
	console.log("borrowerid is :" + borrowerid);

	var minamtValue = $(".minAmount").val();
	var maxamtValue = $(".maxAmount").val();

	console.log(minamtValue + " " + maxamtValue);

	var minRoi = $(".minRoi").val();
	var maxRoi = $(".maxRoi").val();

	var city = $("#cityValue").val();

	console.log(city);

	console.log(minRoi + " " + maxRoi);

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (primaryType == "LENDER") {
		var fieldValueforSearch = "LENDER";
	} else {
		var fieldValueforSearch = "BORROWER";
	}

	if (userSelecctedOption == "mobileNumber") {
		var postData = {
			leftOperand: {
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.mobileNumber",
					operator: "EQUALS",
					fieldValue: mobileNumber,
				},
				leftOperand: {
					fieldName: "userPrimaryType",
					fieldValue: userType,
					operator: "EQUALS",
				},
			},

			logicalOperator: "AND",

			rightOperand: {
				fieldName: "parentRequestId",
				operator: "NULL",
			},
			page: {
				pageNo: 1,
				pageSize: 100,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "userName") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "user.personalDetails.firstName",
					operator: "LIKE",
					fieldValue: userName,
				},
				logicalOperator: "OR",
				rightOperand: {
					fieldName: "user.personalDetails.lastName",
					operator: "LIKE",
					fieldValue: userName,
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanOfferedAmount.loanOfferdStatus",
					fieldValue: "LOANOFFERACCEPTED",
					operator: "EQUALS",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "city") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "userPrimaryType",
					fieldValue: userType,
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.city",
					fieldValue: city,
					operator: "ILIKE",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanOfferedAmount.loanOfferdStatus",
					fieldValue: "LOANOFFERACCEPTED",
					operator: "EQUALS",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "amount&city") {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "user.primaryType",
					fieldValue: "BORROWER",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.city",
					fieldValue: city,
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					leftOperand: {
						fieldName: "parentRequestId",
						operator: "NULL",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "userPrimaryType",
						fieldValue: "BORROWER",
						operator: "EQUALS",
					},
				},
				logicalOperator: "AND",
				rightOperand: {
					leftOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: minamtValue,
						operator: "GTE",
					},
					logicalOperator: "AND",
					rightOperand: {
						fieldName: "loanRequestAmount",
						fieldValue: maxamtValue,
						operator: "LTE",
					},
				},
			},

			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	} else if (userSelecctedOption == "roi") {
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				operator: "EQUALS",
				fieldValue: "BORROWER",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "rateOfInterest",
					fieldValue: minRoi,
					operator: "GTE",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "rateOfInterest",
					fieldValue: maxRoi,
					operator: "LTE",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 9,
			},
		};
	} else if (userSelecctedOption == "amount") {
		var postData = {
			leftOperand: {
				fieldName: "userPrimaryType",
				operator: "EQUALS",
				fieldValue: "BORROWER",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "loanRequestAmount",
					fieldValue: minamtValue,
					operator: "GTE",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanRequestAmount",
					fieldValue: maxamtValue,
					operator: "LTE",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 9,
			},
		};
	} else {
		var postData = {
			leftOperand: {
				leftOperand: {
					fieldName: "userId",
					fieldValue: borrowerid,
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "user.adminComments",
					fieldValue: "INTERESTED",
					operator: "EQUALS",
				},
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "parentRequestId",
					operator: "NULL",
				},
				logicalOperator: "AND",
				rightOperand: {
					fieldName: "loanOfferedAmount.loanOfferdStatus",
					fieldValue: "LOANOFFERACCEPTED",
					operator: "EQUALS",
				},
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	}

	var postData = JSON.stringify(postData);
	console.log(postData);

	if (userisIn == "local") {
		
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	} else {
		
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
		
	}
	$.ajax({
		url: getStatUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			console.log(totalEntries);
			
			var template = document.getElementById(
				"loadBorrowersInterestedListTpl"
			).innerHTML;
			
			Mustache.parse(template);
			
			var html = Mustache.to_html(template, { data: data.results });

			$("#loadBorrowersInterestedList").html(html);
			$(".interstedPagination").hide();
			$(".searchinterstedPagination").show();
			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].borrowerKycDocuments.length; j++) {
					var docType = data.results[i].borrowerKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].borrowerUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}
			bindCommentsClick();
			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".searchinterstedPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
			

					if (primaryType == "LENDER") {
						var fieldValueforSearch = "BORROWER";
					} else {
						var fieldValueforSearch = "LENDER";
					}
					userSelecctedOption = $(".choosenType").val();
					
					if (userSelecctedOption == "mobileNumber") {
						var postData = {
							leftOperand: {
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.mobileNumber",
									operator: "EQUALS",
									fieldValue: mobileNumber,
								},
								leftOperand: {
									fieldName: "userPrimaryType",
									fieldValue: userType,
									operator: "EQUALS",
								},
							},

							logicalOperator: "AND",

							rightOperand: {
								fieldName: "parentRequestId",
								operator: "NULL",
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "userName") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "user.personalDetails.firstName",
									operator: "LIKE",
									fieldValue: userName,
								},
								logicalOperator: "OR",
								rightOperand: {
									fieldName: "user.personalDetails.lastName",
									operator: "LIKE",
									fieldValue: userName,
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanOfferedAmount.loanOfferdStatus",
									fieldValue: "LOANOFFERACCEPTED",
									operator: "EQUALS",
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "city") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "userPrimaryType",
									fieldValue: userType,
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.city",
									fieldValue: city,
									operator: "ILIKE",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanOfferedAmount.loanOfferdStatus",
									fieldValue: "LOANOFFERACCEPTED",
									operator: "EQUALS",
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "amount&city") {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "user.primaryType",
									fieldValue: "BORROWER",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.city",
									fieldValue: city,
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									leftOperand: {
										fieldName: "parentRequestId",
										operator: "NULL",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "userPrimaryType",
										fieldValue: "BORROWER",
										operator: "EQUALS",
									},
								},
								logicalOperator: "AND",
								rightOperand: {
									leftOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: minamtValue,
										operator: "GTE",
									},
									logicalOperator: "AND",
									rightOperand: {
										fieldName: "loanRequestAmount",
										fieldValue: maxamtValue,
										operator: "LTE",
									},
								},
							},

							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					} else if (userSelecctedOption == "roi") {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								operator: "EQUALS",
								fieldValue: "BORROWER",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "rateOfInterest",
									fieldValue: minRoi,
									operator: "GTE",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "rateOfInterest",
									fieldValue: maxRoi,
									operator: "LTE",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
						};
					} else if (userSelecctedOption == "amount") {
						var postData = {
							leftOperand: {
								fieldName: "userPrimaryType",
								operator: "EQUALS",
								fieldValue: "BORROWER",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "loanRequestAmount",
									fieldValue: minamtValue,
									operator: "GTE",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanRequestAmount",
									fieldValue: maxamtValue,
									operator: "LTE",
								},
							},
							page: {
								pageNo: num,
								pageSize: 9,
							},
						};
					} else {
						var postData = {
							leftOperand: {
								leftOperand: {
									fieldName: "userId",
									fieldValue: borrowerid,
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "user.adminComments",
									fieldValue: "INTERESTED",
									operator: "EQUALS",
								},
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "parentRequestId",
									operator: "NULL",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "loanOfferedAmount.loanOfferdStatus",
									fieldValue: "LOANOFFERACCEPTED",
									operator: "EQUALS",
								},
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					}
					var postData = JSON.stringify(postData);
					console.log(postData);
					
					if (userisIn == "local") {
						
						var getStatUrl =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					} else {
						
						var getStatUrl =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					}

					$.ajax({
						url: getStatUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							totalEntries = data.totalCount;
							console.log(totalEntries);
							var template = document.getElementById(
								"loadBorrowersInterestedListTpl"
							).innerHTML;

							Mustache.parse(template);

							var html = Mustache.to_html(template, {
								data: data.results,
							});

							$("#loadBorrowersInterestedList").html(html);

							bindCommentsClick();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function searchUsersDisbursedloans() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userSelecctedOption = $(".choosenType").val();
	

	var borrowerid = $(".borrowerid input").val();
	borrowerid = borrowerid.substr(2);

	var loanId = $(".loanid  input").val();
	

	console.log("loanId " + loanId);
	console.log("lender id " + lenderid);
	console.log("borrowerid is :" + borrowerid);

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (primaryType == "LENDER") {
		var fieldValueforSearch = "LENDER";
	} else if (primaryType == "ADMIN") {
		var fieldValueforSearch = "ADMIN";
	} else {
		var fieldValueforSearch = "BORROWER";
	}

	if (userSelecctedOption == "loanID") {
		var postData = {
			leftOperand: {
				fieldName: "loanId",
				fieldValue: loanId,
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				leftOperand: {
					fieldName: "adminComments",
					fieldValue: "APPROVED",
					operator: "EQUALS",
				},
				logicalOperator: "AND",
				rightOperand: {
					leftOperand: {
						fieldName: "enachType",
						fieldValue: "MANUALENACH",
						operator: "EQUALS",
					},
					logicalOperator: "OR",
					rightOperand: {
						fieldName: "isECSActivated",
						fieldValue: "t",
						operator: "EQUALS",
					},
				},
				page: {
					pageNo: 1,
					pageSize: 10,
				},
				sortBy: "loanId",
				sortOrder: "DESC",
			},
		};
	} else {
		var postData = {
			leftOperand: {
				fieldName: "userId",
				fieldValue: borrowerid,
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "loanStatus",
				fieldValue: "Accepted",
				operator: "EQUALS",
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		};
	}
	var postData = JSON.stringify(postData);
	console.log(postData);
	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	} else {
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	}

	$.ajax({
		url: getStatUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;

			console.log(totalEntries);
			$(".totalActiveLoans").show();
			$(".totalActiveLoans").html("Total Active Loans are " + totalEntries);
			//  $(".nodata-pl").hide();
			var template = document.getElementById("loadBorrowersListTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, { data: data.results });

			$("#loadBorrowersList").html(html);

			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].borrowerKycDocuments.length; j++) {
					var docType = data.results[i].borrowerKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].borrowerUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}
			$(".approvedPagination").hide();
			$(".searchapprovedPagination").show();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//alert("loading is done");

			$(".searchapprovedPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (primaryType == "LENDER") {
						var fieldValueforSearch = "BORROWER";
					} else {
						var fieldValueforSearch = "LENDER";
					}

					if (userSelecctedOption == "loanID") {
						var postData = {
							leftOperand: {
								fieldName: "loanId",
								fieldValue: loanId,
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "adminComments",
									fieldValue: "APPROVED",
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									leftOperand: {
										fieldName: "enachType",
										fieldValue: "MANUALENACH",
										operator: "EQUALS",
									},
									logicalOperator: "OR",
									rightOperand: {
										fieldName: "isECSActivated",
										fieldValue: "t",
										operator: "EQUALS",
									},
								},
								page: {
									pageNo: num,
									pageSize: 10,
								},
								sortBy: "loanId",
								sortOrder: "DESC",
							},
						};
					} else {
						var postData = {
							leftOperand: {
								fieldName: "borrowerUserId",
								fieldValue: borrowerid,
								operator: "EQUALS",
							},
							logicalOperator: "AND",
							rightOperand: {
								fieldName: "loanStatus",
								fieldValue: "Accepted",
								operator: "EQUALS",
							},
							page: {
								pageNo: num,
								pageSize: 10,
							},
							sortBy: "loanRequestedDate",
							sortOrder: "DESC",
						};
					}
					var postData = JSON.stringify(postData);
					console.log(postData);
					//alert(1);

					if (userisIn == "local") {
						var getStatUrl =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					} else {
				
						var getStatUrl =
							" https://fintech.oxyloans.com/oxyloans/v1/user/" +
							suserId +
							"/loan/ADMIN/request/search";
					}

					
					$.ajax({
						url: getStatUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"loadBorrowersListTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.results,
							});

							$("#loadBorrowersList").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

const loadUTMfields = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if(sprimaryType   === "MASTERADMIN"){
		var urlmaster="getUtmFieldsmaster"
	}else{
		var urlmaster="getUtmFieldstest"
	}

	var utmUrl =
		userisIn == "local"
			? apiBaseURLOXY + urlmaster
			: apiBaseURLOXY + urlmaster;

	fetch(utmUrl, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			for (var i = 0; i < data.utm.length; i++) {
				var docType = data.utm[i];
				$("#utmValue").append(
					'<option value="' + docType + '">' + docType + "</option>"
				);
			}
		})
		.catch((error) => {
			console.error("Error:", error);
		});
};

function updateEMI_newFunc(emiID, loanID, emiNumber) {
	var paymentStatus = $(
		".display_emi_block-" + emiNumber + " .paymentStatus"
	).val();
	var modeOfPayment = $(
		".display_emi_block-" + emiNumber + " .modeOfPayment"
	).val();
	var transactionReferenceNumber = $(
		".display_emi_block-" + emiNumber + " .transactionRefernceNumber"
	).val();
	var penalty = $(".display_emi_block-" + emiNumber + " .penalty").val();
	var receivedAmount = $(
		".display_emi_block-" + emiNumber + " .receivedAmount"
	).val();
	var amountReceived = $(
		".display_emi_block-" + emiNumber + " .amountPaidDate"
	).val();
	console.log(
		paymentStatus +
			" " +
			modeOfPayment +
			" " +
			transactionReferenceNumber +
			" " +
			penalty +
			" " +
			receivedAmount +
			" " +
			amountReceived
	);
	var postData = {
		emiId: emiID,
		loanId: loanID,
		modeOfPayment: modeOfPayment,
		transactionReferenceNumber: transactionReferenceNumber,
		paymentStatus: paymentStatus,
		amountPaidDate: amountReceived,
		partialPaymentAmount: receivedAmount,
	};
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var postData = JSON.stringify(postData);
	if (userisIn == "local") {
		
		var updateEMI_url = apiBaseURLOXY + emiID + "/paymentDetails";
	} else {
		
		var updateEMI_url = apiBaseURLOXY + emiID + "/paymentDetails";
	}

	$.ajax({
		url: updateEMI_url,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			alert("EMI Updated Successfully");
		},
		statusCode: {
			200: function (response) {
				$("#sucessotp").show();
			},
			400: function (response) {
				$(".errorotp").show();
			},
			401: function (response) {
				//alert('Invalid username or password.');
				$(".erroruser").show();
			},
			409: function (response) {
				// alert('1');
				$("#modal-emailerror").modal("show");
			},
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
		error: function (request, error) {
			if (arguments[0].responseJSON.errorCode == 113) {
				$(".errorotp").show();
			}
		},
	});
	event.preventDefault();
}

const viewExperianReport = (id) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var getStatUrl =
		userisIn == "local"
			? apiBaseURLOXY + id + "/getexperian"
			: apiBaseURLOXY + id + "/getexperian";

	fetch(getStatUrl, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			$("#modal-experianReport").modal("show");
			$("#creditAccountActive").html(data.creditAccountActive);
			$("#creditAccountClosed").html(data.creditAccountClosed);
			$("#creditAccountTotal").html(data.creditAccountTotal);
			$("#outstandingBalanceAll").html(data.outstandingBalanceAll);
			$("#outstandingBalanceSecured").html(data.outstandingBalanceSecured);
			$("#outstandingBalanceUnSecured").html(data.outstandingBalanceUnSecured);
			$("#score").html(data.score);
		})
		.catch((error) => {
			console.error("Error:", error);

			$(".modal-body #text").html(error.responseJSON.errorMessage);

			if (error.responseJSON.errorCode == 404) {
				$("#modal-usernothaveexperianscore").modal("show");
			}
		});
};

const userRejectOffer = (loanID, id, l4RejectBtnObj) => {
	currentL4RejectBtnObj = l4RejectBtnObj;
	$("#modal-borrower-rejectoffer").modal("show");
	$(".borrowerRejectofferBtn").attr("data-reqid", loanID);
};

function borrowersRejectoffer() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var getLoanId = $(".borrowerRejectofferBtn").attr("data-reqid");
	var userId = $(".borrowerRejectofferBtn").attr("data-clickedid");
	getLoanId = parseInt(getLoanId);


	if (userisIn == "local") {
		var updateEmiUrlCard = apiBaseURLOXY + getLoanId + "/rejectloanoffer";
	} else {
		var updateEmiUrlCard = apiBaseURLOXY + getLoanId + "/rejectloanoffer";
	}

	$(currentL4RejectBtnObj).attr("disabled", true);
	
	$.ajax({
		url: updateEmiUrlCard,
		type: "POST",
		data: postData,
		dataType: "json",
		contentType: "application/json",

		success: function (data, textStatus, xhr) {
			$("#modal-borrower-rejectoffer").modal("hide");
			$("#modal-adminrejectedoffer").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".modal-body #text1").html(arguments[0].responseJSON.errorMessage);

			//Changes by Liveen Starts
			$(currentL4RejectBtnObj).attr("disabled", false);
			//Changes by Liveen Ends
			if (arguments[0].responseJSON.errorCode == 114) {
				$("#modal-borrower-rejectoffer").modal("hide");
				$("#modal-loandisbursedcompleted").modal("show");
			} else if (arguments[0].responseJSON.errorCode == 110) {
				$("#modal-alreadyDoneSendOffer").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadlendersLoansInfo() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateEmiUrlCard = apiBaseURLOXY + "lendersLoanInformation";
	} else {
		var updateEmiUrlCard = apiBaseURLOXY + "lendersLoanInformation";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateEmiUrlCard,
		data: postData,
		dataType: "json",
		contentType: "application/json",
		type: "POST",

		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById("loadLendersListTpl").innerHTML;

			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data.results });
			$("#loadLendersList").html(html);

			bindCommentsClick();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//$(".viewPan").colorbox();
			bindCommentsClick();

			/*888888888888888*/
			$(".interstedPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						pageNo: num,
						pageSize: 10,
					};

					var postData = JSON.stringify(postData);

					if (userisIn == "local") {
						var updateEmiUrlCard = apiBaseURLOXY + "lendersLoanInformation";
					} else {
						var updateEmiUrlCard = apiBaseURLOXY + "lendersLoanInformation";
					}

					$.ajax({
						url: updateEmiUrlCard,
						data: postData,
						dataType: "json",
						contentType: "application/json",
						type: "POST",

						success: function (data, textStatus, xhr) {
							totalEntries = data.totalCount;
							var template =
								document.getElementById("loadLendersListTpl").innerHTML;

							Mustache.parse(template);

							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadLendersList").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadborrowerUsersforlender() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var lenderId = $(".requestidFromClick").html();

	if (userisIn == "local") {
		var updateEmiUrlCard = apiBaseURLOXY + lenderId + "/individualLoans  ";
	} else {
		var updateEmiUrlCard = apiBaseURLOXY + lenderId + "/individualLoans";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateEmiUrlCard,
		data: postData,
		dataType: "json",
		contentType: "application/json",
		type: "POST",

		success: function (data, textStatus, xhr) {
			totalEntries = data.count;
			var template = document.getElementById("loadLendersListTpl").innerHTML;

			Mustache.parse(template);

			var html = Mustache.to_html(template, {
				data: data.userLoansInfoList,
			});
			$("#loadLendersList").html(html);

			bindCommentsClick();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//$(".viewPan").colorbox();
			bindCommentsClick();

			/*888888888888888*/
			$(".interstedPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						pageNo: num,
						pageSize: 10,
					};

					var postData = JSON.stringify(postData);

					if (userisIn == "local") {
						var updateEmiUrlCard =
							apiBaseURLOXY + lenderId + "/totalLendersDetails";
					} else {
						var updateEmiUrlCard =
							apiBaseURLOXY + lenderId + "/totalLendersDetails";
					}

					$.ajax({
						url: updateEmiUrlCard,
						data: postData,
						dataType: "json",
						contentType: "application/json",
						type: "POST",

						success: function (data, textStatus, xhr) {
							totalEntries = data.totalCount;
							var template =
								document.getElementById("loadLendersListTpl").innerHTML;

							Mustache.parse(template);

							var html = Mustache.to_html(template, {
								data: data.userLoansInfoList,
							});
							$("#loadLendersList").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");

							$(".modal-body #text").html(
								arguments[0].responseJSON.errorMessage
							);

							if (arguments[0].responseJSON.errorCode == 101) {
								$("#modal-noloansforthislender").modal("show");
							}
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");

			$(".modal-body #text").html(arguments[0].responseJSON.errorMessage);

			if (arguments[0].responseJSON.errorCode == 101) {
				$("#modal-noloansforthislender").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

const downloadTotalLoanLendersInfo = (lenderId) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var statement =
		userisIn == "local"
			? apiBaseURLOXY + lenderId + "/loansInformation "
			: apiBaseURLOXY + lenderId + "/loansInformation";

	console.log(statement);

	fetch(statement, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			window.open(data.downloadUrl);
		})
		.catch((error) => {
			console.error("Error:", error);
		});
};

const downloadTotalLoanLendersInfo1 = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var lenderId = $(".requestidFromClick").html();

	var statement =
		userisIn == "local"
			? apiBaseURLOXY + lenderId + "/loansInformation "
			: apiBaseURLOXY + lenderId + "/loansInformation";

	console.log(statement);

	fetch(statement, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			window.open(data.downloadUrl);
		})
		.catch((error) => {
			console.error("Error:", error);
		});
};

function loadborrowersLoansInfo() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateEmiUrlCard = apiBaseURLOXY + "borrowersLoanInformation";
	} else {
		var updateEmiUrlCard = apiBaseURLOXY + "borrowersLoanInformation";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateEmiUrlCard,
		data: postData,
		dataType: "json",
		contentType: "application/json",
		type: "POST",

		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById("loadborrowersListTpl").innerHTML;

			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data.results });
			$("#loadborrowersList").html(html);

			bindCommentsClick();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//$(".viewPan").colorbox();
			bindCommentsClick();

			/*888888888888888*/
			$(".interstedPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						pageNo: num,
						pageSize: 10,
					};

					var postData = JSON.stringify(postData);

					if (userisIn == "local") {
						var updateEmiUrlCard = apiBaseURLOXY + "borrowersLoanInformation";
					} else {
						var updateEmiUrlCard = apiBaseURLOXY + "borrowersLoanInformation";
					}

					$.ajax({
						url: updateEmiUrlCard,
						data: postData,
						dataType: "json",
						contentType: "application/json",
						type: "POST",

						success: function (data, textStatus, xhr) {
							totalEntries = data.totalCount;
							var template = document.getElementById(
								"loadborrowersListTpl"
							).innerHTML;

							Mustache.parse(template);

							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadborrowersListTpl").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadlenderUsersforborrower() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var borrowerId = $(".requestidFromClick").html();

	//alert(lenderId);
	if (userisIn == "local") {
		var updateEmiUrlCard =
			apiBaseURLOXY + borrowerId + "/individualLoansForBorrower";
	} else {
		var updateEmiUrlCard =
			apiBaseURLOXY + borrowerId + "/individualLoansForBorrower";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateEmiUrlCard,
		data: postData,
		dataType: "json",
		contentType: "application/json",
		type: "POST",

		success: function (data, textStatus, xhr) {
			totalEntries = data.count;
			var template = document.getElementById("loadborrowersListTpl").innerHTML;

			Mustache.parse(template);

			var html = Mustache.to_html(template, {
				data: data.userLoansInfoList,
			});
			$("#loadborrowersList").html(html);

			bindCommentsClick();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//$(".viewPan").colorbox();
			bindCommentsClick();

			/*888888888888888*/
			$(".interstedPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						pageNo: num,
						pageSize: 10,
					};

					var postData = JSON.stringify(postData);

					if (userisIn == "local") {
						var updateEmiUrlCard =
							apiBaseURLOXY + borrowerId + "/totalLendersDetails";
					} else {
						var updateEmiUrlCard =
							apiBaseURLOXY + borrowerId + "/totalLendersDetails";
					}

					$.ajax({
						url: updateEmiUrlCard,
						data: postData,
						dataType: "json",
						contentType: "application/json",
						type: "POST",

						success: function (data, textStatus, xhr) {
							totalEntries = data.totalCount;
							var template = document.getElementById(
								"loadborrowersListTpl"
							).innerHTML;

							Mustache.parse(template);

							var html = Mustache.to_html(template, {
								data: data.userLoansInfoList,
							});
							$("#loadborrowersList").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");

							$(".modal-body #text").html(
								arguments[0].responseJSON.errorMessage
							);

							if (arguments[0].responseJSON.errorCode == 101) {
								$("#modal-noloansforthisborrower").modal("show");
							}
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");

			$(".modal-body #text").html(arguments[0].responseJSON.errorMessage);

			if (arguments[0].responseJSON.errorCode == 101) {
				$("#modal-noloansforthisborrower").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

const downloadTotalLoanBorrowersInfo = (borrowerId) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var statement =
		userisIn == "local"
			? apiBaseURLOXY + borrowerId + "/individualLoansForBorrower"
			: apiBaseURLOXY + borrowerId + "/individualLoansForBorrower";

	console.log(statement);

	fetch(statement, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			window.open(data.downloadUrl);
		})
		.catch((error) => {
			console.error("Error:", error);
		});
};

const downloadTotalLoanBorrowersInfo1 = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var borrowerId = $(".requestidFromClick").html();

	var statement =
		userisIn == "local"
			? apiBaseURLOXY + borrowerId + "/individualLoansForBorrower"
			: apiBaseURLOXY + borrowerId + "/individualLoansForBorrower";

	console.log(statement);

	fetch(statement, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			window.open(data.downloadUrl);
		})
		.catch((error) => {
			console.error("Error:", error);
		});
};

function loadRunningLoans() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	//alert(recordsType);

	var postData = {
		page: {
			pageNo: 1,
			pageSize: 10,
		},
	};

	var postData = JSON.stringify(postData);
	// console.log(postData);

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + "0/application/loansbyapplication";
	} else {
		var actOnLoan = apiBaseURLOXY + "0/application/loansbyapplication";
	}

	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			if (data.results.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById("displayRecordsTpl").innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, { data: data.results });

				$("#displayRecords").html(html);
				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".runningLoansPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...

						var postData = {
							page: {
								pageNo: num,
								pageSize: 10,
							},
						};

						var postData = JSON.stringify(postData);
						//console.log(postData);
						if (userisIn == "local") {
							var actOnLoan =
								apiBaseURLOXY + "0/application/loansbyapplication";
						} else {
							var actOnLoan =
								apiBaseURLOXY + "0/application/loansbyapplication";
						}
						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template =
									document.getElementById("displayRecordsTpl").innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.results,
								});

								$("#displayRecords").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewLoanLenders(parentId, id) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateEmiUrlCard = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
	} else {
		var updateEmiUrlCard = apiBaseURLOXY + suserId + "/loan/ADMIN/search";
	}

	var postData = {
		leftOperand: {
			fieldName: "loanStatus",
			fieldValue: "Active",
			operator: "EQUALS",
		},

		logicalOperator: "AND",
		rightOperand: {
			leftOperand: {
				fieldName: "borrowerParentRequestId",
				fieldValue: parentId,
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "adminComments",
				fieldValue: "DISBURSED",
				operator: "EQUALS",
			},
		},
		page: {
			pageNo: 1,
			pageSize: 30,
		},
		sortBy: "loanId",
		sortOrder: "DESC",
	};

	var postData = JSON.stringify(postData);
	console.log(postData);

	$.ajax({
		url: updateEmiUrlCard,
		data: postData,
		dataType: "json",
		contentType: "application/json",
		type: "POST",

		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			$(".viewrunningLoanLenders-" + parentId).show();

			if (data.results.length == 0) {
				$("#displayNoLoanRecords").show();
			} else {
				var template = document.getElementById(
					"loadLendersRunningloans"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, { data: data.results });
				$("#viewrunningLoanLenders-" + parentId).html(html);

				bindCommentsClick();

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				//$(".viewPan").colorbox();
				bindCommentsClick();

				/*888888888888888*/
				$(".interstedPagination1")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...

						var postData = {
							leftOperand: {
								fieldName: "loanStatus",
								fieldValue: "Active",
								operator: "EQUALS",
							},

							logicalOperator: "AND",
							rightOperand: {
								leftOperand: {
									fieldName: "borrowerParentRequestId",
									fieldValue: parentId,
									operator: "EQUALS",
								},
								logicalOperator: "AND",
								rightOperand: {
									fieldName: "adminComments",
									fieldValue: "DISBURSED",
									operator: "EQUALS",
								},
							},

							page: {
								pageNo: num,
								pageSize: 30,
							},
							sortBy: "loanId",
							sortOrder: "DESC",
						};

						var postData = JSON.stringify(postData);

						if (userisIn == "local") {
							var updateEmiUrlCard =
								apiBaseURLOXY + suserId + "/loan/ADMIN/search";
						} else {
							var updateEmiUrlCard =
								apiBaseURLOXY + suserId + "/loan/ADMIN/search";
						}

						$.ajax({
							url: updateEmiUrlCard,
							data: postData,
							dataType: "json",
							contentType: "application/json",
							type: "POST",
							success: function (data, textStatus, xhr) {
								$(".viewrunningLoanLenders-" + parentId).show();

								var template = document.getElementById(
									"loadLendersRunningloans"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.results,
								});
								$("#viewrunningLoanLenders-" + parentId).html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});

	/* Getting Interest info Starts*/
	if (userisIn == "local") {
		var getinterestInfo = apiBaseURLOXY + suserId + "/InterestAmount";
	} else {
		var getinterestInfo = apiBaseURLOXY + suserId + "/InterestAmount";
	}
	/* Getting Interest info ENDS*/
}

function userManualenachApproval(id, loanId) {
	$("#modal-borrower-maualenach").modal("show");
	$(".borrowermaualenachBtn").attr("data-reqid", id);
	$(".borrowermaualenachBtn").attr("data-loanId", loanId);
}

const borrowersmaualenach = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userId = parseInt($(".borrowermaualenachBtn").attr("data-reqid"));
	var loanid = $(".borrowermaualenachBtn").attr("data-loanId");

	var updateEmiUrlCard =
		userisIn == "local"
			? apiBaseURLOXY + userId + "/updtnachtype"
			: apiBaseURLOXY + userId + "/updtnachtype";

	var postData = JSON.stringify({ enachType: "MANUALENACH", loanId: loanid });

	fetch(updateEmiUrlCard, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: postData,
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			$("#modal-borrower-maualenach").modal("hide");
			$("#modal-adminmanualeNACH").modal("show");
		})
		.catch((error) => {
			console.error("Error:", error);
		});
};

$(document).ready(function () {
	$("#minimumeNACHamount").click(function () {
		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		var enteredborrowerid = $("#borrowerId").val();
		var enteredAppId = $("#applicationId").val();
		var enteredTenure = $("#tenure").val();
		var enteredemiAmount = $("#emiAmount").val();
		

		enteredborrowerid = enteredborrowerid.trim();
		enteredAppId = enteredAppId.trim();
		enteredemiAmount = enteredemiAmount.trim();

		var isValid = true;

		if (enteredborrowerid == "") {
			$(".borrowerIdError").show();
			isValid = false;
		} else {
			$(".borrowerIdError").hide();
		}

		if (enteredAppId == "") {
			$(".appIdError").show();
			isValid = false;
		} else {
			$(".appIdError").hide();
		}

		if (enteredTenure == "") {
			$(".tenureError").show();
			isValid = false;
		} else {
			$(".tenureError").hide();
		}

		if (enteredemiAmount == "") {
			$(".emiAmountError").show();
			isValid = false;
		} else {
			$(".emiAmountError").hide();
		}

		var postData = {
			applicationId: enteredAppId,
			borrowerId: enteredborrowerid,
			tenure: enteredTenure,
			amount: enteredemiAmount,
			// "emiDate":enteredemiDate
		};
		var postData = JSON.stringify(postData);
		console.log(postData);

		if (userisIn == "local") {
			var updateEmiUrlCard = apiBaseURLOXY + "saveeanchminimumwtdrwusers";
		} else {
			var updateEmiUrlCard = apiBaseURLOXY + "saveeanchminimumwtdrwusers";
		}

		console.log(updateEmiUrlCard);

		if (isValid == true) {
			$.ajax({
				url: updateEmiUrlCard,
				type: "POST",
				data: postData,
				contentType: "application/json",
				dataType: "json",
				success: function (data, textStatus, xhr) {
					$("#modal-setMinimumeNACHSuccess").modal("show");
				},
				error: function (xhr, textStatus, errorThrown) {
					console.log("error");

					$(".modal-body #text").html(arguments[0].responseJSON.errorMessage);
					if (arguments[0].responseJSON.errorCode == 122) {
						$("#modal-noLoansPresent").modal("show");
					}
				},
				beforeSend: function (xhr) {
					xhr.setRequestHeader("accessToken", saccessToken);
				},
			});
		}
		return isValid;
	});
});

function loadMinimumAmounteNACHusers() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var postData = {
		page: {
			pageNo: 1,
			pageSize: 10,
		},
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + "getenachminimumwithdrawusers";
	} else {
		var actOnLoan = apiBaseURLOXY + "getenachminimumwithdrawusers";
	}

	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			if (data.results.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"loadBorrowersInterestedListTpl"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, { data: data.results });

				$("#loadBorrowersInterestedList").html(html);
				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".interstedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...

						var postData = {
							page: {
								pageNo: num,
								pageSize: 10,
							},
						};

						var postData = JSON.stringify(postData);
						//console.log(postData);
						if (userisIn == "local") {
							var actOnLoan = apiBaseURLOXY + "getenachminimumwithdrawusers";
						} else {
							var actOnLoan = apiBaseURLOXY + "getenachminimumwithdrawusers";
						}
						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template = document.getElementById(
									"loadBorrowersInterestedListTpl"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.results,
								});

								$("#loadBorrowersInterestedList").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function SearchMinEnachUsers() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userSelecctedOption = $(".choosenType").val();
	console.log(userSelecctedOption);

	var borrowerid = $("#borrowerid").val();
	borrowerid = borrowerid.substr(2);

	var firstName = $(".firstName").val();
	var lastName = $(".lastName").val();

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userSelecctedOption == "userName") {
		var postData = {
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			firstName: firstName,
			lastName: lastName,
			userId: "0",
		};
	} else {
		var postData = {
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			firstName: "",
			lastName: "",
			userId: borrowerid,
		};
	}

	var postData = JSON.stringify(postData);
	console.log(postData);
	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + "searchenachminimumwithdrawusers ";
	} else {
		var getStatUrl = apiBaseURLOXY + "searchenachminimumwithdrawusers ";
	}

	$.ajax({
		url: getStatUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById(
				"loadBorrowersInterestedListTpl"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, { data: data.results });

			$("#loadBorrowersInterestedList").html(html);

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//alert("loading is done");

			$(".searchinterstedPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (userSelecctedOption == "userName") {
						var postData = {
							page: {
								pageNo: num,
								pageSize: 10,
							},
							firstName: firstName,
							lastName: lastName,
							userId: 0,
						};
					} else {
						var postData = {
							page: {
								pageNo: num,
								pageSize: 10,
							},
							firstName: "",
							lastName: "",
							userId: borrowerid,
						};
					}

					var postData = JSON.stringify(postData);
					console.log(postData);

					if (userisIn == "local") {
						var getStatUrl = apiBaseURLOXY + "searchenachminimumwithdrawusers ";
					} else {
						var getStatUrl = apiBaseURLOXY + "searchenachminimumwithdrawusers ";
					}

					$.ajax({
						url: getStatUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"loadBorrowersInterestedListTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.results,
							});

							$("#loadBorrowersInterestedList").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

const userManualEsignApproval = (loanId) => {
	$("#modal-borrowerManualEsign").modal("show");
	$(".borrowerManualEsign-Btn").attr("data-loanId", loanId);
};

const borrowerManualEsign = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var getloanid = $(".borrowerManualEsign-Btn").attr("data-loanId");

	var updateEmiUrlCard =
		userisIn == "local"
			? apiBaseURLOXY + getloanid + "/manualEsignProcess"
			: apiBaseURLOXY + getloanid + "/manualEsignProcess";

	fetch(updateEmiUrlCard, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			return response.json();
		})
		.then((data) => {
			$("#modal-borrowerManualEsign").modal("hide");
			$("#modal-adminmanualEsign").modal("show");
		})
		.catch((error) => {
			console.error("Error:", error);

			$(".modal-body #text1").html(error.responseJSON.errorMessage);

			if (error.responseJSON.errorCode == 110) {
				$("#modal-alreadyDoneSendOffer").modal("show");
			}
		});
};

const UpdateEmiAppLevel = (applicationId, penalty) => {
	$("#modal-UpdateEmiAppLevel").modal("show");
	$(".loanIdDisplay").html(applicationId);
	$("#applicationId").val(applicationId);
	$(".penaltyvalue").html(penalty);
};

function updateEMI_AppLevel() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var applicationId = $("#applicationId").val();
	applicationId = applicationId.substr(4);
	var partialPaymentAmount = $("#partialPaymentAmount").val();
	var penalty = $("#penalty").val();
	var transactionReferenceNumber = $("#transactionRefernceNumber").val();
	var modeOfPayment = $("#modeOfPayment").val();
	var amountPaidDate = $("#amountPaidDate").val();
	var emiupdatingBy = $("#updatingby").val();
	var interestWOff = $("#interestWOff").val();

	var isValid = true;

	$(".applicationIdError").toggle(applicationId == "");
	isValid = isValid && applicationId !== "";

	$(".partialPaymentAmountError").toggle(partialPaymentAmount == "");
	isValid = isValid && partialPaymentAmount !== "";

	$(".referenceNoError").toggle(transactionReferenceNumber == "");
	isValid = isValid && transactionReferenceNumber !== "";

	$(".modeOfPaymentError").toggle(modeOfPayment == "");
	isValid = isValid && modeOfPayment !== "";

	$(".amountPaidDateError").toggle(amountPaidDate == "");
	isValid = isValid && amountPaidDate !== "";

	$(".emiupdatingByError").toggle(emiupdatingBy == "");
	isValid = isValid && emiupdatingBy !== "";

	var updateCommentUrl =
		userisIn == "local"
			? apiBaseURLOXY + "0/upd/updemisbyapplication"
			: apiBaseURLOXY + "0/upd/updemisbyapplication";

	var postData = {
		applicationId: applicationId,
		partialPaymentAmount: partialPaymentAmount,
		penalty: penalty,
		transactionReferenceNumber: transactionReferenceNumber,
		modeOfPayment: modeOfPayment,
		amountPaidDate: amountPaidDate,
		updatedUserName: emiupdatingBy,
		totalInterestWaiveOff: interestWOff,
	};

	var postData = JSON.stringify(postData);

	if (isValid) {
		$(".updateEMI_AppLevel").hide();
		$(".plswait").show();
		fetch(updateCommentUrl, {
			method: "POST",
			headers: {
				accessToken: saccessToken,
				"Content-Type": "application/json",
			},
			body: postData,
		})
			.then((response) => {
				if (!response.ok) {
					throw new Error("Network response was not ok");
				}
				return response.json();
			})
			.then((data) => {
				$(".modal, .modal-backdrop").hide();
				$("#modal-UpdateEmiAppLevel").modal("hide");
				$("#modal-emiupdateAppLevel").modal("show");
				$(".updateEMI_AppLevel").show();
				$(".plswait").hide();
			})
			.catch((error) => {
				console.error("Error:", error);
			});
	}
	return isValid;
}

const UpdateEmiloanLevel = (loanId) => {
	$("#modal-UpdateEmiloanLevel").modal("show");
	$(".loanIdDisplay").html(loanId);
	$(".updateEMIloanLevel_btn").attr("data-loanID", loanId);
};

const updateEMI_loanLevel = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var partialPaymentAmount = $("#PaymentAmount").val();
	var transactionReferenceNumber = $("#transactionNumber").val();
	var modeOfPayment = $("#modeOfPayment1").val();
	var paymentStatus = $("#paymentStatus1").val();
	var amountPaidDate = $("#amountPaidDateloanlevel").val();

	var loanid = $(".updateEMIloanLevel_btn").attr("data-loanID");
	loanid = loanid.substr(2);

	var isValid = true;

	$(".PaymentAmountError").toggle(partialPaymentAmount == "");
	isValid = isValid && partialPaymentAmount !== "";

	$(".transactionNumberError").toggle(transactionReferenceNumber == "");
	isValid = isValid && transactionReferenceNumber !== "";

	$(".modeOfPaymentError1").toggle(modeOfPayment == "");
	isValid = isValid && modeOfPayment !== "";

	$(".paymentStatus1Error").toggle(paymentStatus == "");
	isValid = isValid && paymentStatus !== "";

	$(".amountPaidDateloanlevelError").toggle(amountPaidDate == "");
	isValid = isValid && amountPaidDate !== "";

	var updateCommentUrl =
		userisIn == "local"
			? apiBaseURLOXY + loanid + "/loanLevelUpdate"
			: apiBaseURLOXY + loanid + "/loanLevelUpdate";

	var postData = {
		partialPaymentAmount: partialPaymentAmount,
		paymentStatus: paymentStatus,
		transactionReferenceNumber: transactionReferenceNumber,
		modeOfPayment: modeOfPayment,
		amountPaidDate: amountPaidDate,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	if (isValid) {
		$.ajax({
			url: updateCommentUrl,
			type: "PATCH",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				$("#modal-UpdateEmiloanLevel").modal("hide");
				$("#modal-emiupdateLoanLevel").modal("show");
			},

			error: function (request, error) {},

			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
};

function loadPndingbucketsApplications(startday, endday, totaldays) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getLenders =
			apiBaseURLOXY +
			"loanapplication/bucketpending/" +
			startday +
			"/" +
			endday +
			"/" +
			totaldays +
			"/1/10";
	} else {
		var getLenders =
			apiBaseURLOXY +
			"loanapplication/bucketpending/" +
			startday +
			"/" +
			endday +
			"/" +
			totaldays +
			"/1/10";
	}

	$.ajax({
		url: getLenders,
		type: "GET",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById("loadBorrowersListTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });
			$("#loadBorrowersList").html(html);

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			$(".dashBoardPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (userisIn == "local") {
						var getLenders =
							apiBaseURLOXY +
							"loanapplication/bucketpending/" +
							startday +
							"/" +
							endday +
							"/" +
							totaldays +
							"/" +
							num +
							"/10";
					} else {
						var getLenders =
							apiBaseURLOXY +
							"loanapplication/bucketpending/" +
							startday +
							"/" +
							endday +
							"/" +
							totaldays +
							"/" +
							num +
							"/10";
					}
					$.ajax({
						url: getLenders,
						type: "GET",

						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"loadBorrowersListTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadBorrowersList").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewbucketLoanLenders(startday, endday, totaldays, userId) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getLenders =
			apiBaseURLOXY +
			"loan/bucketpending/" +
			startday +
			"/" +
			endday +
			"/" +
			userId +
			"/" +
			totaldays +
			"/1/10";
	} else {
		var getLenders =
			apiBaseURLOXY +
			"loan/bucketpending/" +
			startday +
			"/" +
			endday +
			"/" +
			userId +
			"/" +
			totaldays +
			"/1/10";
	}
	$.ajax({
		url: getLenders,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$(".viewbucketLoanLenders-" + userId).show();

			if (data.results.length == 0) {
				$("#displayNoLoanRecords").show();
			} else {
				var template = document.getElementById(
					"loadLendersbucketloans"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, { data: data.results });
				$("#viewbucketLoanLenders-" + userId).html(html);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;

				/*888888888888888*/
				$(".interstedPagination1")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...

						if (userisIn == "local") {
							var getLenders =
								apiBaseURLOXY +
								"loan/bucketpending/" +
								startday +
								"/" +
								endday +
								"/" +
								userId +
								"/" +
								totaldays +
								"/" +
								num +
								"/10";
						} else {
							var getLenders =
								apiBaseURLOXY +
								"loan/bucketpending/" +
								startday +
								"/" +
								endday +
								"/" +
								userId +
								"/" +
								totaldays +
								"/" +
								num +
								"/10";
						}

						$.ajax({
							url: getLenders,
							type: "GET",
							success: function (data, textStatus, xhr) {
								$(".viewbucketLoanLenders-" + userId).show();

								var template = document.getElementById(
									"loadLendersbucketloans"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.results,
								});
								$("#viewbucketLoanLenders-" + userId).html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewDelayEMIcard(startday, endday, totaldays, loanid) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	$(".loanIdDisplay").html(loanid);

	var getLoanId = loanid;
	//  getLoanId = getLoanId.substr(2);
	if (userisIn == "local") {
		var updateEmiUrlCard =
			apiBaseURLOXY +
			"emi/bucketpending/" +
			startday +
			"/" +
			endday +
			"/" +
			totaldays +
			"/" +
			getLoanId +
			"";
	} else {
		var updateEmiUrlCard =
			apiBaseURLOXY +
			"emi/bucketpending/" +
			startday +
			"/" +
			endday +
			"/" +
			totaldays +
			"/" +
			getLoanId +
			"";
	}
	$.ajax({
		url: updateEmiUrlCard,
		type: "GET",
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("emiRecordsCallTpl").innerHTML;
			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data.results });
			$("#displayEMIRecords").html(html);

			$("#modal-viewDealyEMItable").modal("show");
		},

		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getnotificationDetails() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const notificationDetailsUrl =
		userisIn === "local"
			? apiBaseURLOXY + "notifications/admin"
			: apiBaseURLOXY + "notifications/admin";

	fetch(notificationDetailsUrl, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			$(".totalNotifications").html(data.totalCount);
			$("#totalNotifications").html(data.totalCount);
			$("#totalInterestedBorrowers").html(data.interestedPendingBorrowers);
			$("#totalInterestedLenders").html(data.interestedPendingLenders);
			$("#totalDisbursmentPending").html(
				data.countNumberPendingDisbursmentDate
			);
			$("#offerPendingFromAdminSide").html(data.offerPendingFromAdminSide);
			$("#totalAgreedState").html(data.countNumberOfLoansInAgreedState);
			$("#totalLenderTransaction").html(data.lenderTransactionUploadedPending);
			$("#totalDisbursmentPending").html(
				data.countNumberPendingDisbursmentDate
			);

			setTimeout(getnotificationDetails, 60000);
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
}

function loadadminstats() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	id = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var adminUrl = apiBaseURLOXY + "adminemidetails";
	} else {
		var adminUrl = apiBaseURLOXY + "adminemidetails";
	}

	$.ajax({
		url: adminUrl,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$("#totalemis").html(data[0].currentMonthTotalEmis);
			$("#emiprocessed").html(data[1].noOfEMIProcessed);

			$("#progressbar").val(
				data[1].noOfEMIProcessed / data[0].currentMonthTotalEmis
			);

			$(".totalemis").html(data[0].currentMonthTotalEmis);
			$("#emiNotprocessed").html(data[2].noOfEmiNotProcessed);

			$("#progressbar1").val(
				data[2].noOfEmiNotProcessed / data[0].currentMonthTotalEmis
			);

			$("#totalemisAmount").html(Math.round(data[0].currnentMonthTotalAmount));
			$("#amountReceived").html(Math.round(data[1].amountReceived));

			$("#progressbar2").val(
				data[1].amountReceived / data[0].currnentMonthTotalAmount
			);

			$(".totalemisAmount").html(Math.round(data[0].currnentMonthTotalAmount));
			$("#amountNotReceived").html(Math.round(data[2].amountNotReceived));

			$("#progressbar3").val(
				data[2].amountNotReceived / Math.round(data[0].currnentMonthTotalAmount)
			);

			$("#totalemisEarnedAmount").html(
				Math.round(data[0].currnentMonthTotalAmount)
			);
			$("#earnedAmount").html(Math.round(data[1].earnedAmount));

			$("#progressbar4").val(
				data[0].earnedAmount / Math.round(data[0].currnentMonthTotalAmount)
			);

			$("#totalpendingemis").html(data[0].totalPendingEMis);
			$("#pendingEMIS").html(data[3].noOFEMISpending);

			$("#progressbar5").val(
				data[3].noOFEMISpending / data[0].totalPendingEMis
			);
			// progressbar5.css('background', 'LightGreen');

			$("#countof30daysUsers").html(data[5].thirtyDayCount);
			$("#amountof30Days").html("₹" + Math.round(data[5].thirtyDayAmount));

			$("#countof60daysUsers").html(data[6].sixtyDayCount);
			$("#amountof60Days").html("₹" + Math.round(data[6].sixtyDayAmount));

			$("#countof90daysUsers").html(data[7].nintyDayCount);
			$("#amountof90Days").html("₹" + Math.round(data[7].nintyDayAmount));

			$("#countof91daysUsers").html(data[4].npaDayCount);
			$("#amountof91Days").html("₹" + Math.round(data[4].npaDayAmount));
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

const download30daysReport = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const pdfUrl =
		userisIn === "local"
			? apiBaseURLOXY + "thirtydaysbucketdownload"
			: apiBaseURLOXY + "thirtydaysbucketdownload";

	fetch(pdfUrl, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			window.open(data.downloadUrl, "_blank");
			$("#modal-thirtydaysbucketdownload").modal("show");
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
};

const download60daysReport = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const pdfUrl =
		userisIn === "local"
			? apiBaseURLOXY + "sixtydaysbucketdownload"
			: apiBaseURLOXY + "sixtydaysbucketdownload";

	fetch(pdfUrl, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			window.open(data.downloadUrl, "_blank");
			$("#modal-sixtydaysbucketdownload").modal("show");
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
};

const download90daysReport = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const pdfUrl =
		userisIn === "local"
			? apiBaseURLOXY + "ninetydaysbucketdownload"
			: apiBaseURLOXY + "ninetydaysbucketdownload";

	fetch(pdfUrl, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			window.open(data.downloadUrl, "_blank");
			$("#modal-ninetydaysbucketdownload").modal("show");
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
};

const downloadNPAReport = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const pdfUrl =
		userisIn === "local"
			? apiBaseURLOXY + "npabucketdownload"
			: apiBaseURLOXY + "npabucketdownload";

	fetch(pdfUrl, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			window.open(data.downloadUrl, "_blank");
			$("#modal-npabucketdownload").modal("show");
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
};

/**************** search for 30,60,90,NPA days  Bucket*****************/

const searchforBucketdays = (startday, endday, dayType) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);

	let borrowerid = $("#borrowerid").val();
	borrowerid = borrowerid.substr(2);

	const getStatUrl =
		userisIn === "local"
			? apiBaseURLOXY +
			  "loanapplication/bucketpendingbyuserid/" +
			  startday +
			  "/" +
			  endday +
			  "/" +
			  dayType +
			  "/" +
			  borrowerid
			: apiBaseURLOXY +
			  "loanapplication/bucketpendingbyuserid/" +
			  startday +
			  "/" +
			  endday +
			  "/" +
			  dayType +
			  "/" +
			  borrowerid;

	console.log(getStatUrl);

	fetch(getStatUrl, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			totalEntries = data.totalCount;
			const template = document.getElementById(
				"loadBorrowersListTpl"
			).innerHTML;
			Mustache.parse(template);
			const html = Mustache.render(template, { data: data.results });
			$("#loadBorrowersList").html(html);
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
};

/**************** End search for 30,60,90,NPA days  Bucket*****************/

function searchlendersloansInfo() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);

	var lenderid = $("#lenderid").val();
	lenderid = lenderid.substr(2);

	if (userisIn == "local") {
		var updateEmiUrlCard =
			apiBaseURLOXY + lenderid + "/lenderAndBorrowerInformation";
	} else {
		var updateEmiUrlCard =
			apiBaseURLOXY + lenderid + "/lenderAndBorrowerInformation";
	}

	$.ajax({
		url: updateEmiUrlCard,
		type: "GET",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById("loadLendersListTpl").innerHTML;

			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data });
			$("#loadLendersList").html(html);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function searchborrowersloansInfo() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);

	var borrowerid = $("#borrowerid").val();
	borrowerid = borrowerid.substr(2);

	if (userisIn == "local") {
		var updateEmiUrlCard =
			apiBaseURLOXY + borrowerid + "/lenderAndBorrowerInformation";
	} else {
		var updateEmiUrlCard =
			apiBaseURLOXY + borrowerid + "/lenderAndBorrowerInformation";
	}

	$.ajax({
		url: updateEmiUrlCard,
		type: "GET",

		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById("loadborrowersListTpl").innerHTML;

			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data });
			$("#loadborrowersList").html(html);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

//*************** current,feature, total pending emis***************///

function loadPendingEMIsList(pendingtype) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var yearNumber = $(".year").val();
	var monthNumber = $(".month").val();
	console.log("yearNumber " + yearNumber);
	if (yearNumber == "" || yearNumber == null) {
		var today = new Date();
		var yearNumber = today.getFullYear(); // Returns 2020
		var monthNumber = today.getMonth(); // Returns month-1
		monthNumber = monthNumber + 1;
	} else {
		yearNumber = yearNumber;
		monthNumber = monthNumber;
	}

	if (userisIn == "local") {
		var postDataURL =
			apiBaseURLOXY +
			"loan/pending/application/" +
			yearNumber +
			"/" +
			monthNumber +
			"/" +
			pendingtype +
			"/1/10";
	} else {
		var postDataURL =
			apiBaseURLOXY +
			"loan/pending/application/" +
			yearNumber +
			"/" +
			monthNumber +
			"/" +
			pendingtype +
			"/1/10";
	}
	console.log(postDataURL);

	$(".loadingSec").show();
	$.ajax({
		url: postDataURL,
		type: "GET",

		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var jsonData = data.results;
			$("#downloadPendingEMIInfo").html(jsonData);
			//  alert(jsonData);
			var template = document.getElementById(
				"loadPendingEMIsListTpl"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });
			//console.log(html);
			$("#loadPendingEMIsList").html(html);
			viewEMICARD();
			$(".loadingSec").hide();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".dashBoardPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (userisIn == "local") {
						var postDataURL =
							apiBaseURLOXY +
							"loan/pending/application/" +
							yearNumber +
							"/" +
							monthNumber +
							"/" +
							pendingtype +
							"/" +
							num +
							"/10";
					} else {
						var postDataURL =
							apiBaseURLOXY +
							"loan/pending/application/" +
							yearNumber +
							"/" +
							monthNumber +
							"/" +
							pendingtype +
							"/" +
							num +
							"/10";
					}

					$.ajax({
						url: postDataURL,
						type: "GET",
						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"loadPendingEMIsListTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							//console.log(html);
							$("#loadPendingEMIsList").html(html);
							viewEMICARD();
							$(".loadingSec").hide();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewLoanLendersforpendingemis(type, userId) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var yearNumber = $(".year").val();
	var monthNumber = $(".month").val();
	console.log("yearNumber " + yearNumber);
	if (yearNumber == "" || yearNumber == null) {
		var today = new Date();
		var yearNumber = today.getFullYear(); // Returns 2019
		var monthNumber = today.getMonth(); // Returns month-1
		monthNumber = monthNumber + 1;
	} else {
		yearNumber = yearNumber;
		monthNumber = monthNumber;
	}

	if (userisIn == "local") {
		var postDataURL =
			apiBaseURLOXY +
			"loan/pending/" +
			yearNumber +
			"/" +
			monthNumber +
			"/" +
			type +
			"/" +
			userId +
			"/1/10";
	} else {
		var postDataURL =
			apiBaseURLOXY +
			"loan/pending/" +
			yearNumber +
			"/" +
			monthNumber +
			"/" +
			type +
			"/" +
			userId +
			"/1/10";
	}
	console.log(postDataURL);

	$.ajax({
		url: postDataURL,
		type: "GET",

		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;

			$(".viewpendingemisLoanLenders-" + userId).show();

			var template = document.getElementById(
				"loadLenderspendingemisloans"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });
			$("#viewpendingemisLoanLenders-" + userId).html(html);

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".interstedPagination1")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (userisIn == "local") {
						var postDataURL =
							apiBaseURLOXY +
							"loan/pending/" +
							yearNumber +
							"/" +
							monthNumber +
							"/" +
							type +
							"/" +
							userId +
							"/" +
							num +
							"/10";
					} else {
						var postDataURL =
							apiBaseURLOXY +
							"loan/pending/" +
							yearNumber +
							"/" +
							monthNumber +
							"/" +
							type +
							"/" +
							userId +
							"/" +
							num +
							"/10";
					}

					$.ajax({
						url: postDataURL,
						type: "GET",
						success: function (data, textStatus, xhr) {
							$(".viewpendingemisLoanLenders-" + userId).show();

							var template = document.getElementById(
								"loadLenderspendingemisloans"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#viewpendingemisLoanLenders-" + userId).html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewPendingEMIcard(type, loanid) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	$(".loanIdDisplay").html(loanid);

	var yearNumber = $(".year").val();
	var monthNumber = $(".month").val();
	console.log("yearNumber " + yearNumber);
	if (yearNumber == "" || yearNumber == null) {
		var today = new Date();
		var yearNumber = today.getFullYear(); // Returns 2019
		var monthNumber = today.getMonth(); // Returns month-1
		monthNumber = monthNumber + 1;
	} else {
		yearNumber = yearNumber;
		monthNumber = monthNumber;
	}

	var getLoanId = loanid;
	// getLoanId = getLoanId.substr(2);
	if (userisIn == "local") {
		var postDataURL =
			apiBaseURLOXY +
			"loan/pending/" +
			yearNumber +
			"/" +
			monthNumber +
			"/" +
			type +
			"/" +
			getLoanId +
			"";
	} else {
		var postDataURL =
			apiBaseURLOXY +
			"loan/pending/" +
			yearNumber +
			"/" +
			monthNumber +
			"/" +
			type +
			"/" +
			getLoanId +
			"";
	}
	$.ajax({
		url: postDataURL,
		type: "GET",
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("emiRecordsCallTpl").innerHTML;
			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data.results });
			$("#displayEMIRecords").html(html);

			$("#modal-viewPendingEMIcard").modal("show");
		},

		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

//***************END current,feature, total pending emis***************///

/**************** search for Current,feature,total pending emis*****************/

function searchsforpendingEmis(type) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);

	var applicationid = $("#applicationid").val();
	//alert(applicationid)

	var borrowerid = $("#borrowerid").val();
	borrowerid = borrowerid.substr(2);

	if (userSelecctedOption == "appID") {
		if (userisIn == "local") {
			var postDataURL =
				apiBaseURLOXY + "borrowerParentRequestId/" + applicationid + "";
		} else {
			var postDataURL =
				apiBaseURLOXY + "borrowerParentRequestId/" + applicationid + "";
		}
	} else {
		if (userisIn == "local") {
			var postDataURL = apiBaseURLOXY + "borrowerId/" + borrowerid + "";
		} else {
			var postDataURL = apiBaseURLOXY + "borrowerId/" + borrowerid + "";
		}
	}
	console.log(postDataURL);

	$.ajax({
		url: postDataURL,
		type: "GET",

		success: function (data, textStatus, xhr) {
			var template = document.getElementById(
				"loadPendingEMIsListTpl"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data });
			$("#loadPendingEMIsList").html(html);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

/**************** End  pending emis search*****************/

/**************** Lender Auto invest starts*****************/

function loadlendersAutoinvestList() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getLenders = apiBaseURLOXY + "autoinvestsearch";
	} else {
		var getLenders = apiBaseURLOXY + "autoinvestsearch";
	}

	var postData = {
		page: {
			pageNo: 1,
			pageSize: 10,
		},
		firstName: "",
		lastName: "",
		userId: 0,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	$.ajax({
		url: getLenders,
		dataType: "json",
		contentType: "application/json",
		type: "POST",
		data: postData,
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById(
				"loadlendersAutoinvestListTpl"
			).innerHTML;
			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data.results });
			$("#loadlendersautoinvestList").html(html);

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			/*888888888888888*/
			$(".lendersautoinvestPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						page: {
							pageNo: num,
							pageSize: 10,
						},
						firstName: "",
						lastName: "",
						userId: 0,
					};

					var postData = JSON.stringify(postData);
					console.log(postData);
					if (userisIn == "local") {
						var getLenders = apiBaseURLOXY + "autoinvestsearch";
					} else {
						var getLenders = apiBaseURLOXY + "autoinvestsearch";
					}

					$.ajax({
						url: getLenders,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"loadlendersAutoinvestListTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadlendersautoinvestList").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
			/*888888888888888*/
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function searchlendersautoinvest() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);

	var lenderid = $("#lenderid").val();
	lenderid = lenderid.substr(2);

	var firstName = $(".firstName").val();
	var lastName = $(".lastName").val();

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userSelecctedOption == "userName") {
		var postData = {
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			firstName: firstName,
			lastName: lastName,
			userId: "0",
		};
	} else {
		var postData = {
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			firstName: "",
			lastName: "",
			userId: lenderid,
		};
	}
	var postData = JSON.stringify(postData);
	console.log(postData);
	if (userisIn == "local") {
		var getLenders = apiBaseURLOXY + "autoinvestsearch";
	} else {
		var getLenders = apiBaseURLOXY + "autoinvestsearch";
	}

	$.ajax({
		url: getLenders,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById(
				"loadlendersAutoinvestListTpl"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });
			$("#loadlendersautoinvestList").html(html);

			$(".lendersautoinvestPagination").hide();
			$(".searchlendersautoinvestPagination").show();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//alert("loading is done");

			$(".searchlendersautoinvestPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (userSelecctedOption == "userName") {
						var postData = {
							page: {
								pageNo: num,
								pageSize: 10,
							},
							firstName: firstName,
							lastName: lastName,
							userId: "0",
						};
					} else {
						var postData = {
							page: {
								pageNo: num,
								pageSize: 10,
							},
							firstName: "",
							lastName: "",
							userId: lenderid,
						};
					}
					var postData = JSON.stringify(postData);
					console.log(postData);

					if (userisIn == "local") {
						var getLenders = apiBaseURLOXY + "autoinvestsearch";
					} else {
						var getLenders = apiBaseURLOXY + "autoinvestsearch";
					}
					$.ajax({
						url: getLenders,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"loadlendersAutoinvestListTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadlendersautoinvestList").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadlendersAutoinvesthistory() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var lenderid = $(".requestidFromClick").html();

	if (userisIn == "local") {
		var getLenders = apiBaseURLOXY + "getlenderautoinvesthistory";
	} else {
		var getLenders = apiBaseURLOXY + "getlenderautoinvesthistory";
	}

	var postData = { userId: lenderid };

	var postData = JSON.stringify(postData);
	console.log(postData);
	$.ajax({
		url: getLenders,
		dataType: "json",
		contentType: "application/json",
		type: "POST",
		data: postData,
		success: function (data, textStatus, xhr) {
			$(".displayUserId").html(data.user.id);
			$(".displayName").html(data.user.firstName + " " + data.user.lastName);
			$(".displaycity").html(data.user.city);
			$(".displayEmail").html(data.user.email);
			$(".displayMobileNumber").html(data.user.mobileNumber);
			var template = document.getElementById(
				"loadlendersAutoinvestListTpl"
			).innerHTML;
			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data.configHistory });
			$("#loadlendersautoinvestList").html(html);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

/**************** Lender Auto invest Ends*****************/

function loadlenderswithdrawfundslist() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getLenders = apiBaseURLOXY + "lenderwithdrawalfundssearch";
	} else {
		var getLenders = apiBaseURLOXY + "lenderwithdrawalfundssearch";
	}

	var postData = {
		page: {
			pageNo: 1,
			pageSize: 10,

		},

		firstName: "",
		lastName: "",
		userId: 0,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	$.ajax({
		url: getLenders,
		dataType: "json",
		contentType: "application/json",
		type: "POST",
		data: postData,
		success: function (data, textStatus, xhr) {
			console.log(data);



			let  totalEntries = data.totalCount;




	   const newobj=data.results.map((data,index)=>{
			   	const newobjnew={...data};

                if (newobjnew.status=="ADMIN REJECTED"){
                	newobjnew["statusobj"]="ADMINREJECTED";
                }else if(newobjnew.status=="USER REJECTED"){
                   newobjnew["statusobj"]="USERREJECTED";
                }else if(newobjnew.status=="AUTO REJECTED"){
                   newobjnew["statusobj"]="AUTOREJECTED";
                     }else{
                   newobjnew["statusobj"]=newobjnew.status;

                }

                return newobjnew;

			   })


			var template = document.getElementById(
				"loadlenderswithdrawfundslistTpl"
			).innerHTML;
			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: newobj });
			$("#loadwithdrawfundslist").html(html);

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			/*888888888888888*/
			$(".lenderswithdrawalPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						page: {
							pageNo: num,
							pageSize: 10,
						},
						firstName: "",
						lastName: "",
						userId: 0,
					};

					var postData = JSON.stringify(postData);
					console.log(postData);
					if (userisIn == "local") {
						var getLenders = apiBaseURLOXY + "lenderwithdrawalfundssearch";
					} else {
						var getLenders = apiBaseURLOXY + "lenderwithdrawalfundssearch";
					}

					$.ajax({
						url: getLenders,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {

                           	   const newobjpagnation=data.results.map((data,index)=>{
			   	const newobjnewpag={...data};

                if (newobjnewpag.status=="ADMIN REJECTED"){
                	newobjnewpag["statusobj"]="ADMINREJECTED";
                }else if(newobjnewpag.status=="USER REJECTED"){
                   newobjnewpag["statusobj"]="USERREJECTED";
                }else if(newobjnewpag.status=="AUTO REJECTED"){
                   newobjnewpag["statusobj"]="AUTOREJECTED";
                     }else{
                   newobjnewpag["statusobj"]=newobjnewpag.status;

                }

                return newobjnewpag;

			   })




							var template = document.getElementById(
								"loadlenderswithdrawfundslistTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: newobjpagnation,
							});
							$("#loadwithdrawfundslist").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
			/*888888888888888*/
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function searchlenderswithdrawalList() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);

	var lenderid = $("#lenderid").val();
	lenderid = lenderid.substr(2);

	var firstName = $(".firstName").val();
	var lastName = $(".lastName").val();

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userSelecctedOption == "userName") {
		var postData = {
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			firstName: firstName,
			lastName: lastName,
			userId: "0",
		};
	} else {
		var postData = {
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			firstName: "",
			lastName: "",
			userId: lenderid,
		};
	}
	var postData = JSON.stringify(postData);
	console.log(postData);
	if (userisIn == "local") {
		var getLenders = apiBaseURLOXY + "lenderwithdrawalfundssearch";
	} else {
		var getLenders = apiBaseURLOXY + "lenderwithdrawalfundssearch";
	}

	$.ajax({
		url: getLenders,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			let totalEntries = data.totalCount;

	   const newobj=data.results.map((data,index)=>{
			   	const newobjnew={...data};

                if (newobjnew.status=="ADMIN REJECTED"){
                	newobjnew["statusobj"]="ADMINREJECTED";
                }else if(newobjnew.status=="USER REJECTED"){
                   newobjnew["statusobj"]="USERREJECTED";
                }else if(newobjnew.status=="AUTO REJECTED"){
                   newobjnew["statusobj"]="AUTOREJECTED";
                     }else{
                   newobjnew["statusobj"]=newobjnew.status;

                }

                return newobjnew;

			   })


			var template = document.getElementById(
				"loadlenderswithdrawfundslistTpl"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: newobj });
			$("#loadwithdrawfundslist").html(html);




			$(".lenderswithdrawalPagination").hide();
			$(".searchlenderswithdrawalPagination").show();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//alert("loading is done");

			$(".searchlenderswithdrawalPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (userSelecctedOption == "userName") {
						var postData = {
							page: {
								pageNo: num,
								pageSize: 10,
							},
							firstName: firstName,
							lastName: lastName,
							userId: "0",
						};
					} else {
						var postData = {
							page: {
								pageNo: num,
								pageSize: 10,
							},
							firstName: "",
							lastName: "",
							userId: lenderid,
						};
					}
					var postData = JSON.stringify(postData);
					console.log(postData);

					if (userisIn == "local") {
						var getLenders = apiBaseURLOXY + "lenderwithdrawalfundssearch";
					} else {
						var getLenders = apiBaseURLOXY + "lenderwithdrawalfundssearch";
					}
					$.ajax({
						url: getLenders,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {

                            const newobjpag=data.results.map((data,index)=>{
			   	const newobjnewpag={...data};

                if (newobjnewpag.status=="ADMIN REJECTED"){
                	newobjnewpag["statusobj"]="ADMINREJECTED";
                }else if(newobjnewpag.status=="USER REJECTED"){
                   newobjnewpag["statusobj"]="USERREJECTED";
                }else if(newobjnewpag.status=="AUTO REJECTED"){
                   newobjnewpag["statusobj"]="AUTOREJECTED";
                     }else{
                   newobjnewpag["statusobj"]=newobjnewpag.status;

                }

                return newobjnewpag;

			   })




							var template = document.getElementById(
								"loadlenderswithdrawfundslistTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: newobjnewpag,
							});
							$("#loadwithdrawfundslist").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
								console.log("error");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something111");
			if (xhr.status === 400) {
				// Parse the JSON response
				var errorData = JSON.parse(xhr.responseText);
				// Extract the error message from the parsed response
				var errorMessage = errorData.errorMessage;
				
				// Show the modal dialog
				$("#modal-transactiondanger").modal("show");
				// Display the error message in the modal body
				$("#modal-transactiondanger .modal-body").html(errorMessage);
				
				// Reload the page after 4 seconds
				setTimeout(function () {
					location.reload();
				}, 4000);
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function lenderwithdrawFundaApprove(Id) {
	$("#modal-approve-withdrawfunds").modal("show");
	$(".lenderwithdrawfundsBtn").attr("data-clickedid", Id);
}

function lenderwithdrawfunds() {
	$("#modal-approve-withdrawfunds").modal("hide");
	$("#modal-approve-withdrawfundsComments").modal("show");
	var Id = $(".lenderwithdrawfundsBtn").attr("data-clickedid");
	$(".withdrawfundsCommentsBtn").attr("data-clickedid", Id);
}

function savewithdrawfundsComments() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var comments = $(".withdrawfundsComments").val();
	var id = $(".withdrawfundsCommentsBtn").attr("data-clickedid");

	if (userisIn == "local") {
		var updateCommentUrl = apiBaseURLOXY + "updatewithdrawalfundsstatus";
	} else {
		var updateCommentUrl = apiBaseURLOXY + "updatewithdrawalfundsstatus";
	}

	var postData = {
		id: id,
		status: "APPROVED",
		adminComments: comments,
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateCommentUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-approve-withdrawfundsComments").modal("hide");
			$("#modal-withdrawalAprrovesuccess").modal("show");

			$("#arrove-" + id).prop("disabled", true);
			//$('#' + id).prop("disabled", false);
		},

		error: function (request, error) {
			console.log("error");
			$("#modal-approve-withdrawfundsComments").modal("hide");
			setTimeout(() => {
				$(".displaylender .errormessage").html(
					arguments[0].responseJSON.errorMessage
				);
				$("#modal-displayLenderwithdrawalFundsErrors").modal("show");
			}, 200);
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function lenderwithdrawFundReject(Id) {
	$("#modal-reject-withdrawfunds").modal("show");
	$(".lenderwithdrawfundsrejectBtn").attr("data-clickedid", Id);
}

function lenderwithdrawfundsreject() {
	$("#modal-reject-withdrawfunds").modal("hide");
	$("#modal-reject-withdrawfundsComments").modal("show");
	var Id = $(".lenderwithdrawfundsrejectBtn").attr("data-clickedid");
	$(".withdrawfundsCommentsrejectBtn").attr("data-clickedid", Id);
}

function savewithdrawfundsrejectComments() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var comments = $(".withdrawfundsrejectComments").val();
	var id = $(".withdrawfundsCommentsrejectBtn").attr("data-clickedid");

	if (userisIn == "local") {
		var updateCommentUrl = apiBaseURLOXY + "updatewithdrawalfundsstatus";
	} else {
		var updateCommentUrl = apiBaseURLOXY + "updatewithdrawalfundsstatus";
	}

	var postData = {
		id: id,
		status: "REJECTED",
		adminComments: comments,
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateCommentUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-approve-withdrawfundsComments").modal("hide");
			$("#modal-withdrawalReject").modal("show");

			$("#reject-" + id).prop("disabled", true);

			setTimeout(() => {
				location.reload();
			}, 3000);
		},

		error: function (request, error) {
			console.log("error");

			setTimeout(() => {
				$("#modal-approve-withdrawfundsComments").modal("hide");
				$(".displaylender .errormessage").html(
					arguments[0].responseJSON.errorMessage
				);
				$("#modal-displayLenderwithdrawalFundsErrors").modal("show");
			}, 200);
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadlendersReinvestList() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getLenders = apiBaseURLOXY + "relendsearch";
	} else {
		var getLenders = apiBaseURLOXY + "relendsearch";
	}

	var postData = {
		page: {
			pageNo: 1,
			pageSize: 10,
		},
		firstName: "",
		lastName: "",
		userId: 0,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	$.ajax({
		url: getLenders,
		dataType: "json",
		contentType: "application/json",
		type: "POST",
		data: postData,
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById(
				"loadlendersReinvestListTpl"
			).innerHTML;
			Mustache.parse(template);

			var html = Mustache.to_html(template, { data: data.results });

			$("#loadlendersaReinvestList").html(html);

			for (var i = 0; i < data.results.length; i++) {
				var disabledbutton = data.results[i].emiAmountAvbleForEscrow;
				var id = data.results[i].userId;
				//alert(disabledbutton)
				if (disabledbutton == 0) {
					$(".disable-" + id).prop("disabled", true);
				} else {
					$(".disable-" + id).prop("disabled", false);
				}
			}
			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			/*888888888888888*/
			$(".lendersreinvestPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						page: {
							pageNo: num,
							pageSize: 10,
						},
						firstName: "",
						lastName: "",
						userId: 0,
					};

					var postData = JSON.stringify(postData);
					console.log(postData);
					if (userisIn == "local") {
						var getLenders = apiBaseURLOXY + "relendsearch";
					} else {
						var getLenders = apiBaseURLOXY + "relendsearch";
					}

					$.ajax({
						url: getLenders,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"loadlendersReinvestListTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadlendersaReinvestList").html(html);
							for (var i = 0; i < data.results.length; i++) {
								var disabledbutton = data.results[i].emiAmountAvbleForEscrow;
								var id = data.results[i].userId;
								//alert(disabledbutton)
								if (disabledbutton == 0) {
									$(".disable-" + id).prop("disabled", true);
								} else {
									$(".disable-" + id).prop("disabled", false);
								}
							}
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
			/*888888888888888*/
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function searchlendersReinvest() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);

	var lenderid = $("#lenderid").val();
	lenderid = lenderid.substr(2);

	var firstName = $(".firstName").val();
	var lastName = $(".lastName").val();

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userSelecctedOption == "userName") {
		var postData = {
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			firstName: firstName,
			lastName: lastName,
			userId: "0",
		};
	} else {
		var postData = {
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			firstName: "",
			lastName: "",
			userId: lenderid,
		};
	}
	var postData = JSON.stringify(postData);
	console.log(postData);
	if (userisIn == "local") {
		var getLenders = apiBaseURLOXY + "relendsearch";
	} else {
		var getLenders = apiBaseURLOXY + "relendsearch";
	}

	$.ajax({
		url: getLenders,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			var template = document.getElementById(
				"loadlendersReinvestListTpl"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.results });
			$("#loadlendersaReinvestList").html(html);

			for (var i = 0; i < data.results.length; i++) {
				var disabledbutton = data.results[i].emiAmountAvbleForEscrow;
				var id = data.results[i].userId;
				//alert(disabledbutton)
				if (disabledbutton == 0) {
					$(".disable-" + id).prop("disabled", true);
				} else {
					$(".disable-" + id).prop("disabled", false);
				}
			}

			$(".lendersreinvestPagination").hide();
			$(".searchlendersreinvestPagination").show();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
			//alert("loading is done");

			$(".searchlendersreinvestPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					if (userSelecctedOption == "userName") {
						var postData = {
							page: {
								pageNo: num,
								pageSize: 10,
							},
							firstName: firstName,
							lastName: lastName,
							userId: "0",
						};
					} else {
						var postData = {
							page: {
								pageNo: num,
								pageSize: 10,
							},
							firstName: "",
							lastName: "",
							userId: lenderid,
						};
					}
					var postData = JSON.stringify(postData);
					console.log(postData);

					if (userisIn == "local") {
						var getLenders = apiBaseURLOXY + "relendsearch";
					} else {
						var getLenders = apiBaseURLOXY + "relendsearch";
					}
					$.ajax({
						url: getLenders,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"loadlendersReinvestListTpl"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#loadlendersaReinvestList").html(html);

							for (var i = 0; i < data.results.length; i++) {
								var disabledbutton = data.results[i].emiAmountAvbleForEscrow;
								var id = data.results[i].userId;
								//alert(disabledbutton)
								if (disabledbutton == 0) {
									$(".disable-" + id).prop("disabled", true);
								} else {
									$(".disable-" + id).prop("disabled", false);
								}
							}
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function useremisapprovetoEscrow(userid) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateCommentUrl = apiBaseURLOXY + "movefundsemitoescrow";
	} else {
		var updateCommentUrl = apiBaseURLOXY + "movefundsemitoescrow";
	}

	var postData = {
		userId: userid,
		firstName: "",
		lastName: "",
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateCommentUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-movefundsemitoescrow").modal("show");

			$("#emi-" + userid).prop("disabled", true);
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}
function hideImage() {
	$(".loadingSec").hide();
}
function emiDetails(parentRequestId, userNamefromButton) {
	parentRequestId = parentRequestId;
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	$(".borrowerNameFromEmiInfo").html(userNamefromButton);
	if (userisIn == "local") {
		var emiDetails = apiBaseURLOXY + parentRequestId + "/applicationDetails";
	} else {
		var emiDetails = apiBaseURLOXY + parentRequestId + "/applicationDetails";
	}

	setTimeout(function () {
		window.scrollTo(0, 0);
		$("#loadingSec").show();
	}, 10);
	$.ajax({
		url: emiDetails,
		type: "GET",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("emiRecordsCallTpl1").innerHTML;
			//console.log(template);
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			// console.log(1);
			// console.log(html);
			//var html = Mustache.to_html(template, data);
			var html = Mustache.to_html(template, {
				data: data.getApplicationLevelPenalityWithEmi,
			});
			// alert(html);

			$("#emiRecordsCall1").html(html);
			$("#loadingSec").hide();
			$("#modal-viewAPPEMI").modal("show");
			$(".emiStatustrue").attr("disabled", "disabled");
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	$(".loadingSec").hide();
}

/******************send emi to lender */
function sendlenderMonthlyStatements(id, primarytype) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var statement = apiBaseURLOXY + id + "/sendpdf/" + primarytype;
	} else {
		var statement = apiBaseURLOXY + id + "/sendpdf/" + primarytype;
	}

	console.log(statement);

	$.ajax({
		url: statement,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$("#modal-emailsendstatement").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");

			if (arguments[0].responseJSON.errorCode == 114) {
				$("#modal-emicardcomments").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

/***************************update emi comments */

function updateEmiComments(id) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var statement = apiBaseURLOXY + id + "/updateemicomments";
	} else {
		var statement = apiBaseURLOXY + id + "/updateemicomments";
	}

	console.log(statement);

	$.ajax({
		url: statement,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$("#modal-emicardcommentsupdate").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function updateEMiComment(loanId, emiNumber) {
	$("#modal-approveComments").modal("show");
	$(".saveApproveCommentsBtn").attr("data-clickedId", loanId);
	$(".saveApproveCommentsBtn").attr("data-clikedemiNumber", emiNumber);
	//alert(loanId+" "+emiNumber)
}

function emicomment() {
	$("#modal-lenderwalletApproveComments").modal("show");
	var loanId = $(".saveApproveCommentsBtn").attr("data-clickedId");
	var emiNumber = $(".saveApproveCommentsBtn").attr("data-clikedemiNumber");
	$(".lenderApproveCommentsBtn").attr("data-clickedId", loanId);
	$(".lenderApproveCommentsBtn").attr("data-clikedemiNumber", emiNumber);

	//alert(loanId+" "+emiNumber)
}

function saveUpdateEmiComments() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var comments = $(".approveComment").val();
	var loanid = $(".lenderApproveCommentsBtn").attr("data-clickedId");
	var eminumber = $(".lenderApproveCommentsBtn").attr("data-clikedemiNumber");

	if (userisIn == "local") {
		var updateCommentUrl =
			apiBaseURLOXY + loanid + "/" + eminumber + "/updatecomments";
		("");
	} else {
		var updateCommentUrl =
			apiBaseURLOXY + "updateescrowwallettransaction/" + id + "";
	}

	var postData = {
		comments: comments,
		status: "approved",
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateCommentUrl,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-lenderwalletApproveComments").modal("hide");
			$("#modal-transactionAprrove").modal("show");
			//$("#" + emiNumber).prop("disabled", true);
			//$('#' + id).prop("disabled", false);
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadwalletBalances() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");



	if (userisIn == "local") {
		//http://35.154.48.120:8080/oxynew/
		var getLenders =
			apiBaseURLOXY + suserId + "/loan/" + sprimaryType + "/request/search";
	} else {
		// https://fintech.oxyloans.com/oxyloans/
		var getLenders =
			apiBaseURLOXY + suserId + "/loan/" + sprimaryType + "/request/search";
	}

	var getfornotifications = $(".requestidFromClick").html();

	var postData = {
		leftOperand: {
			fieldName: "userPrimaryType",
			fieldValue: "LENDER",
			operator: "EQUALS",
		},

		logicalOperator: "AND",

		rightOperand: {
			fieldName: "parentRequestId",
			operator: "NULL",
		},
		page: {
			pageNo: 1,
			pageSize: 10,
		},
		sortBy: "loanRequestedDate",
		sortOrder: "DESC",
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	$.ajax({
		url: getLenders,
		dataType: "json",
		contentType: "application/json",
		type: "POST",
		data: postData,
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			// console.log(totalEntries);
			var template = document.getElementById("loadLendersListTpl").innerHTML;
			//console.log(template);
			Mustache.parse(template);
			//alert(template);
			//var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, { data: data.results });
			$("#loadLendersList").html(html);
			for (var i = 0; i < data.results.length; i++) {
				for (j = 0; j < data.results[i].lenderKycDocuments.length; j++) {
					var docType = data.results[i].lenderKycDocuments[j].documentSubType;
					$(
						".user-ViewDocs" +
							data.results[i].lenderUser.id +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}

			bindCommentsClick();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

/*******emiDetailsforSummary********/
function emiDetailsforSummary(parentRequestId, userNamefromButton) {
	parentRequestId = parentRequestId;
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	$(".borrowerNameFromEmiInfo").html(userNamefromButton);
	if (userisIn == "local") {
		var emiDetails = apiBaseURLOXY + parentRequestId + "/applicationDetails";
	} else {
		var emiDetails = apiBaseURLOXY + parentRequestId + "/applicationDetails";
	}

	setTimeout(function () {
		window.scrollTo(0, 0);
		$("#loadingSec").show();
	}, 10);
	$.ajax({
		url: emiDetails,
		type: "GET",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("emiRecordsCallTpl1").innerHTML;
			//console.log(template);
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			// console.log(1);
			// console.log(html);
			//var html = Mustache.to_html(template, data);
			var html = Mustache.to_html(template, {
				data: data.getApplicationLevelPenalityWithEmi,
			});
			// alert(html);

			$("#emiRecordsCall1").html(html);
			$("#loadingSec").hide();

			$("#duration").html(data.duration);
			$("#emistartdate").html(data.emiStartDate);
			$("#emiamount").html(data.firstEmiAmount);
			$("#secondmonthemi").html(data.featureMonthEMiAmount);
			$("#eminotpaidcurrentdate").html(data.emisToBePaidTillDate);
			$("#emipaidcurrntdate").html(data.emisPaid);
			$("#totalemipending").html(data.emisPendingTillDate);
			$("#featureemis").html(data.duration - data.emisToBePaidTillDate);
			$("#due").html(data.dueAmount);
			$("#toprecolse").html(data.preclose);
			$("#intWoff").html(data.interestWaiveOffAmount);

			$("#modal-EmiDetails").modal("show");
			$(".emiStatustrue").attr("disabled", "disabled");
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	$(".loadingSec").hide();
}

function givesmeDiwaiveOff(
	loanId,
	borrowerId,
	borrowerName,
	lenderName,
	currInt
) {
	window.scrollTo(0, 0);
	$("#modal-interestWF").modal("show");
	var loanId = loanId;
	loanId = loanId.slice(2);

	var brName = $(".brName").html(borrowerName);
	var lrName = $(".lrName").html(lenderName);
	var currInterest = $(".currInterest").html(currInt);
	var enteredAmountValue = $(".addDiscAmount").val();
	$(".placeLoanId").attr("data-loanId", loanId);
}

function saveWaiveOffInfo() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var loanID = $(".placeLoanId").attr("data-loanId");
	var discValue = $(".addDiscAmount").val();

	// alert(discValue);
	if (userisIn == "local") {
		var discURL = apiBaseURLOXY + loanID + "/InterestWaiveOff";
	} else {
		var discURL = apiBaseURLOXY + loanID + "/InterestWaiveOff";
	}
	discValue = parseInt(discValue);
	var postData = { interestWaiveOffAmount: discValue };
	var postData = JSON.stringify(postData);

	console.log(postData);

	$.ajax({
		url: discURL,
		type: "PATCH",
		contentType: "application/json",
		data: postData,
		success: function (data, textStatus, xhr) {
			alert("Record Saved Successfully");
			location.reload();
		},

		error: function (request, error) {
			console.log(error);
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function usercommensUpdate(id) {
	$("#modal-borrower-update").modal("show");
	$(".AdminCommentsscoreBtn").attr("data-clickedid", id);
}

function admincomments(id) {
	var location = $(".sendbtn" + id).attr("data-location");
	var aadharPassword = $(".sendbtn" + id).attr("data-aadharPassword");
	var bankPassword = $(".sendbtn" + id).attr("data-bankPassword");
	var cibilPassword = $(".sendbtn" + id).attr("data-cibilPassword");
	var comments = $(".sendbtn" + id).attr("data-comments");
	var companyName = $(".sendbtn" + id).attr("data-companyName");
	var companyResidence = $(".sendbtn" + id).attr("data-companyResidence");
	var eligibility = $(".sendbtn" + id).attr("data-eligibility");
	var emi = $(".sendbtn" + id).attr("data-emi");
	var loanRequirement = $(".sendbtn" + id).attr("data-loanRequirement");
	var locationResidence = $(".sendbtn" + id).attr("data-locationResidence");
	var panPassword = $(".sendbtn" + id).attr("data-panPassword");
	var payslipsPassword = $(".sendbtn" + id).attr("data-payslipsPassword");
	var role = $(".sendbtn" + id).attr("data-role");
	var salary = $(".sendbtn" + id).attr("data-salary");

	$("#Location").val(location);
	$("#LocationResidence").val(locationResidence);
	$("#Companyname").val(companyName);
	$("#CompanynameResidence").val(companyResidence);
	$("#Role").val(role);
	$("#LoanRequirment").val(loanRequirement);
	$("#Salary").val(salary);
	$("#Eligibility").val(eligibility);
	$("#CibilPassword").val(cibilPassword);
	$("#AadharPassword").val(aadharPassword);
	$("#PanPassword").val(panPassword);
	$("#BankStatementsPassword").val(bankPassword);
	$("#PayslipsPassword").val(payslipsPassword);
	$("#Emi").val(emi);
	$("#Comments").val(comments);

	$("#modal-admincomment").modal("show");
	// var id = $(".AdminCommentsscoreBtn").attr("data-clickedid");
	$(".saveCommentBtn").attr("data-clickedId", id);
}

function postcom() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var getUpdatedComment = $("#Comments").val();
	var getLoanId = $(".saveCommentBtn").attr("data-clickedid");
	var hereisUpdatedComment = $("#Comments").val();
	var hereisUpdatedLocation = $("#Location").val();
	var hereisUpdatedCompany = $("#Companyname").val();
	var hereisUpdatedRole = $("#Role").val();
	var hereisUpdatedSalary = $("#Salary").val();
	var hereisUpdatedEligibility = $("#Eligibility").val();
	var hereisUpdatedEmi = $("#Emi").val();
	var hereisUpdatedCibil = $("#CibilPassword").val();
	var hereisUpdatedCompanyresidence = $("#CompanynameResidence").val();
	var hereisUpdatedLocationResidence = $("#LocationResidence").val();
	var hereisUpdatedAadharPassword = $("#AadharPassword").val();
	var hereisUpdatedPanPassword = $("#PanPassword").val();
	var hereisUpdatedBankStatementsPassword = $("#BankStatementsPassword").val();
	var hereisUpdatedPayslipsPassword = $("#PayslipsPassword").val();
	var hereisUpdatedLoanRequirement = $("#LoanRequirment").val();

	var isValid = true;

	if (hereisUpdatedLocation == "") {
		$(".LocationError").show();
		isValid = false;
	} else {
		$(".LocationError").hide();
	}

	// alert(hereisUpdatedLocation);
	if (hereisUpdatedEmi == "") {
		$(".EMI").show();
		isValid = false;
	} else {
		$(".EMI").hide();
	}

	if (hereisUpdatedCompany == "") {
		$(".Companyname").show();
		isValid = false;
	} else {
		$(".Companyname").hide();
	}

	if (hereisUpdatedLocationResidence == "") {
		$(".Residence").show();
		isValid = false;
	} else {
		$(".Residence").hide();
	}

	if (hereisUpdatedCompanyresidence == "") {
		$(".Companyresidence").show();
		isValid = false;
	} else {
		$(".Companyresidence").hide();
	}

	// alert(hereisUpdatedCompanyresidence);
	if (hereisUpdatedRole == "") {
		$(".Role").show();
		isValid = false;
	} else {
		$(".Role").hide();
	}

	if (hereisUpdatedLoanRequirement == "") {
		$(".LoanRequirement").show();
		isValid = false;
	} else {
		$(".LoanRequirment").hide();
	}
	if (hereisUpdatedSalary == "") {
		$(".Salary").show();
		isValid = false;
	} else {
		$(".Salary").hide();
	}

	if (hereisUpdatedEligibility == "") {
		$(".Eligibility").show();
		isValid = false;
	} else {
		$(".Eligibility").hide();
	}

	if (hereisUpdatedComment == "") {
		$(".Comments").show();
		isValid = false;
	} else {
		$(".Comments").hide();
	}

	var saveData = {
		location: hereisUpdatedLocation,
		locationResidence: hereisUpdatedLocationResidence,
		companyName: hereisUpdatedCompany,
		companyResidence: hereisUpdatedCompanyresidence,
		role: hereisUpdatedRole,
		loanRequirement: hereisUpdatedLoanRequirement,
		emi: hereisUpdatedEmi,
		salary: hereisUpdatedSalary,
		eligibility: hereisUpdatedEligibility,
		cibilPassword: hereisUpdatedCibil,
		comments: getUpdatedComment,
		aadharPassword: hereisUpdatedAadharPassword,
		panPassword: hereisUpdatedPanPassword,
		bankPassword: hereisUpdatedBankStatementsPassword,
		payslipsPassword: hereisUpdatedPayslipsPassword,
	};
	var postData = JSON.stringify(saveData);

	console.log(postData);

	if (userisIn == "local") {
		//http://35.154.48.120:8080/oxynew/
		var updateCommentUrl =
			apiBaseURLOXY + suserId + "/loan/ADMIN/request/" + getLoanId + "/comment";
	} else {
		// http://localhost:8181/
		var updateCommentUrl =
			apiBaseURLOXY + suserId + "/loan/ADMIN/request/" + getLoanId + "/comment";
	}

	if (isValid == true) {
		$.ajax({
			url: updateCommentUrl,
			type: "PATCH",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				//
				$(".updateComments-" + getLoanId).html(hereisUpdatedComment);
				$("#modal-admincomment").modal("hide");
				$("#modal-commentSuccesss").modal("show");
				setTimeout(function () {
					location.reload();
				}, 5000);
			},
			statusCode: {
				400: function (response) {
					$("#modal-agreement-already").modal("show");
				},
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

function UpdateCibil(id) {
	$("#modal-updatecibil").modal("show");
	$(".CibilFileUpload").attr("data-clickedid", id);
}

function readCibil(input) {
	var id = $(".CibilFileUpload").attr("data-clickedid");
	//alert(id);
	$(".loadingSec").show();
	if (input.files && input.files[0]) {
		var reader = new FileReader();

		reader.onload = function (e) {
			$(".passportUpload1 .image-upload-wrap").hide();

			$(".passportUpload1 .file-upload-image").attr("src", e.target.result);
			$(".passportUpload1 .file-upload-content").show();

			$(".passportUpload1 .image-title").html(input.files[0].name);
		};

		reader.readAsDataURL(input.files[0]);

		var fd = new FormData();
		var files = input.files[0];
		fd.append("CIBILSCORE", files);
		// alert(fd);

		if (userisIn == "local") {
			//http://35.154.48.120:8080/oxynew/
			var actionURL = apiBaseURLOXY + id + "/upload/kyc";
		} else {
			// http://localhost:8181/
			var actionURL = apiBaseURLOXY + id + "/upload/kyc";
		}

		$.ajax({
			url: actionURL,
			type: "post",
			data: fd,
			contentType: false,
			processData: false,
			success: function (data, textStatus, xhr) {
				if (data != 0) {
					$("#modal-updatecibil").modal("hide");
					$("#modal-fileUploadedSuccessfully").modal("show");
					$(".loadingSec").hide();
					// location.reload();
					var myfile = $("#Cibil").val();
					var filename = myfile.split("\\").pop();
					$(".cibildoc").html(filename);
					setTimeout(function () {
						location.reload();
					}, 2000);
				} else {
					alert("file not uploaded");
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				alert("file not uploaded");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	} //else {
	//removeUpload();
	//}
}

function viewDoc1(doctype, id) {
	const suserId = id;
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var   doctype = doctype;


	if (userisIn == "local") {
	
		var getPAN = apiBaseURLOXY + suserId + "/download/" + doctype;
	} else {
		
		var getPAN = apiBaseURLOXY + suserId + "/download/" + doctype;
	}
	console.log(getPAN);
	$.ajax({
		url: getPAN,
		type: "GET",
		success: function (data, textStatus, xhr) {
			if (data.downloadUrl != "") {
				console.log(data.downloadUrl);
			
				var sourcePath = data.downloadUrl;
				var contentTypeCheck = ".pdf";

				if (sourcePath.indexOf(contentTypeCheck) != -1) {
					//alert('We can view the PDF files in colorbox. Note: File will download automatically. Please check downloads.');
					window.open(data.downloadUrl, "_blank");
				} else {
					$.colorbox({ href: data.downloadUrl });
				}
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function UpdateExperian(id) {
	$("#modal-updateExperian").modal("show");
	$(".ExperianFileUpload").attr("data-clickedid", id);
}

function readExperian(input) {
	var id = $(".ExperianFileUpload").attr("data-clickedid");
	//alert(id);
	$(".loadingSec").show();
	if (input.files && input.files[0]) {
		var reader = new FileReader();

		reader.onload = function (e) {
			$(".passportUpload1 .image-upload-wrap").hide();

			$(".passportUpload1 .file-upload-image").attr("src", e.target.result);
			$(".passportUpload1 .file-upload-content").show();

			$(".passportUpload1 .image-title").html(input.files[0].name);
		};

		reader.readAsDataURL(input.files[0]);

		var fd = new FormData();
		var files = input.files[0];
		fd.append("EXPERIAN", files);
		// alert(fd);
		if (userisIn == "local") {
			//http://35.154.48.120:8080/oxynew/
			var actionURL = apiBaseURLOXY + id + "/upload/kyc";
		} else {
			// http://localhost:8181/
			var actionURL = apiBaseURLOXY + id + "/upload/kyc";
		}
		// alert(actionURL);
		// console.log(fd);
		$.ajax({
			url: actionURL,
			type: "post",
			data: fd,
			contentType: false,
			processData: false,
			success: function (data, textStatus, xhr) {
				if (data != 0) {
					$("#modal-updateExperian").modal("hide");
					$("#modal-fileUploadedSuccessfully").modal("show");
					$(".loadingSec").hide();
					// location.reload();
					var myfile = $("#Experian").val();
					var filename = myfile.split("\\").pop();
					$(".experiandoc").html(filename);
					setTimeout(function () {
						location.reload();
					}, 2000);
				} else {
					alert("file not uploaded");
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				alert("file not uploaded");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
}

function getBorrowerName() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var borrowerID = $(".getBorrowerName").val();

	if (userisIn == "local") {
		var getBorrowerNameURL =
			apiBaseURLOXY + borrowerID + "/borrowerInformation";
	} else {
		var getBorrowerNameURL =
			apiBaseURLOXY + borrowerID + "/borrowerInformation";
	}

	$.ajax({
		url: getBorrowerNameURL,
		type: "GET",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("displayBorrowersList").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, { data: data });
			// alert(html);
			$("#loadBorrowerNames").html(html);

			$(".borrowerNameValue").val(data[0].firstName);
		},
		statusCode: {
			400: function (response) {
				$("#modal-agreement-already").modal("show");
			},
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getPaymentRecords(getStatus) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	id = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		//http://35.154.48.120:8080/oxynew/
		var adminUrl =
			apiBaseURLOXY + getStatus + "/getPaymentUploadedListAndCount";
	} else {
		var adminUrl =
			apiBaseURLOXY + getStatus + "/getPaymentUploadedListAndCount";
	}
	var postData = {
		pageNo: 1,
		pageSize: 2,
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: adminUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("displaywalletTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.paymentUploadHistoryResponseDto,
			});
			// alert(html);
			$("#displaywallet").html(html);
			alert(data.totalCount);
			var displayPageNo = data.totalCount / 2;
			displayPageNo = displayPageNo + 1;
			alert(displayPageNo);
			$(".viewlenderwallet")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					// alert(num);
					if (userisIn == "local") {
						//http://35.154.48.120:8080/oxynew/
						var adminUrl =
							apiBaseURLOXY + getStatus + "/getPaymentUploadedListAndCount";
					} else {
						var adminUrl =
							apiBaseURLOXY + getStatus + "/getPaymentUploadedListAndCount";
					}
					var postData = {
						pageNo: num,
						pageSize: 2,
					};
					var postData = JSON.stringify(postData);

					// alert(adminUrl);
					$.ajax({
						url: adminUrl,
						type: "GET",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("displaywalletTpl").innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.paymentUploadHistoryResponseDto,
							});
							$("#displaywallet").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function ThirtyDaysuploaded() {
	
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	let id = suserId;
	let primaryType = sprimaryType;

	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);

	var userstatus = $("#userstatus").val();

	if (userisIn == "local") {
		//http://35.154.48.120:8080/oxynew/
		var adminUrl = apiBaseURLOXY + "30/" + userstatus + "/getPaymentStatistics";
	} else {
		var adminUrl = apiBaseURLOXY + "30/" + userstatus + "/getPaymentStatistics";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: adminUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			console.log(data.paymentUploadHistoryResponseDto);
			var template = document.getElementById("displaywalletTpl").innerHTML;
			console.log(template);
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.paymentUploadHistoryResponseDto,
			});
			// alert(html);
			$("#displaywallet").html(html);
			var displayPageNo = data.totalCount / 10;
			displayPageNo = displayPageNo + 1;
			$(".viewlenderwallet")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					var postData = {
						pageNo: num,
						pageSize: 10,
					};

					if (userisIn == "local") {
						//http://35.154.48.120:8080/oxynew/
						var adminUrl =
							apiBaseURLOXY + "30/" + userstatus + "/getPaymentStatistics";
					} else {
						var adminUrl =
							apiBaseURLOXY + "30/" + userstatus + "/getPaymentStatistics";
					}
					// alert(adminUrl);
					var postData = JSON.stringify(postData);
					$.ajax({
						url: adminUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("displaywalletTpl").innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.paymentUploadHistoryResponseDto,
							});
							$("#displaywallet").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", accessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function ThirtyDaysuploadeds() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	let id = suserId;
	let primaryType = sprimaryType;
	

	if (userisIn == "local") {
	
		var adminUrl = apiBaseURLOXY + "30/UPLOADED/getPaymentStatistics";
	} else {
		var adminUrl = apiBaseURLOXY + "30/" + userstatus + "/getPaymentStatistics";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: adminUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			console.log(data.paymentUploadHistoryResponseDto);
			var template = document.getElementById("displaywalletTpl").innerHTML;
			console.log(template);
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.paymentUploadHistoryResponseDto,
			});
			
			$("#displaywallet").html(html);
			var displayPageNo = data.totalCount / 10;
			displayPageNo = displayPageNo + 1;
			$(".viewlenderwallet")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					var postData = {
						pageNo: num,
						pageSize: 10,
					};

					
					if (userisIn == "local") {
						//http://35.154.48.120:8080/oxynew/
						var adminUrl = apiBaseURLOXY + "30/UPLOADED/getPaymentStatistics";
					} else {
						var adminUrl =
							apiBaseURLOXY + "30/" + userstatus + "/getPaymentStatistics";
					}
					// alert(adminUrl);
					var postData = JSON.stringify(postData);
					$.ajax({
						url: adminUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("displaywalletTpl").innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.paymentUploadHistoryResponseDto,
							});

							$("#displaywallet").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", accessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function status(StatusType) {
	
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	let id = suserId;
	let primaryType = sprimaryType;

	if (userisIn == "local") {
		var adminUrl =
			apiBaseURLOXY + StatusType + "/getPaymentUploadedListAndCount";
	} else {
		var adminUrl =
			apiBaseURLOXY + StatusType + "/getPaymentUploadedListAndCount";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: adminUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			console.log(data.paymentUploadHistoryResponseDto);
			var template = document.getElementById("displaywalletTpl").innerHTML;
			console.log(template);
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.paymentUploadHistoryResponseDto,
			});
			// alert(html);
			$("#displaywallet").html(html);
			var displayPageNo = data.totalCount / 10;
			// alert(displayPageNo);
			displayPageNo = displayPageNo + 1;
			// alert(displayPageNo);
			$(".viewlenderwallet")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...
					var postData = {
						pageNo: num,
						pageSize: "10",
					};
					var postData = JSON.stringify(postData);
					// alert(num);
					if (userisIn == "local") {
						var adminUrl =
							apiBaseURLOXY + StatusType + "/getPaymentUploadedListAndCount";
					} else {
						var adminUrl =
							apiBaseURLOXY + StatusType + "/getPaymentUploadedListAndCount";
					}

					$.ajax({
						url: adminUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("displaywalletTpl").innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.paymentUploadHistoryResponseDto,
							});
							$("#displaywallet").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", accessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function updatestatus(DOCUMNETID) {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateCommentUrl =
			apiBaseURLOXY + DOCUMNETID + "/updatePaymentUploadHistoryStatus";
	} else {
		var updateCommentUrl =
			apiBaseURLOXY + DOCUMNETID + "/updatePaymentUploadHistoryStatus";
	}
	

	var postData = {
		status: "APPROVED",
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateCommentUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-commentSuccesss").modal("show");
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function showbox(DocumentId) {
	// alert("leno");
	$("#modal-commentss").modal("show");
	$(".saveCommentBtnshow").attr("data-clickedid", DocumentId);
}

function notyetreflected() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	var userstatus = $(".adminComment").val();

	var DOCUMNETID = $(".saveCommentBtnshow").attr("data-clickedid");
	
	if (userisIn == "local") {
		var updateCommentUrl =
			apiBaseURLOXY + DOCUMNETID + "/updatePaymentUploadHistoryStatus";
	} else {
		var updateCommentUrl =
			"https://fintech.oxyloans.com/oxyloans/oxyloans/v1/user/" +
			DOCUMNETID +
			"/updatePaymentUploadHistoryStatus";
	}


	var postData = {
		status: "NOTYETREFLECTED",
		comments: userstatus,
	};
	var postData = JSON.stringify(postData);
	

	$.ajax({
		url: updateCommentUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-commentNotyet").modal("show");
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function statussearch(status) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);

	var lenderid = $(".lenderid input").val();
	// lenderid = lenderid.substr(6);
	// alert(lenderid);
	userId = suserId;
	primaryType = sprimaryType;

	var postData = JSON.stringify(postData);
	console.log(postData);
	if (userisIn == "local") {
		var adminUrl =
			apiBaseURLOXY + "getBorrowerPaymentList/" + lenderid + "/" + status;
	} else {
		var adminUrl =
			apiBaseURLOXY + "getBorrowerPaymentList/" + lenderid + "/" + status;
	}

	// alert(adminUrl);
	$.ajax({
		url: adminUrl,
		type: "GET",
		success: function (data, textStatus, xhr) {
			console.log(data.paymentUploadHistoryResponseDto);
			var template = document.getElementById("displaywalletTpl").innerHTML;
			console.log(template);
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.paymentUploadHistoryResponseDto,
			});
			// alert(html);
			$("#displaywallet").html(html);
			var displayPageNo = data.totalCount / 10;
			displayPageNo = displayPageNo + 1;

			$(".viewlenderwallet").bootpag({
				total: displayPageNo,
				page: 1,
				maxVisible: 5,
				leaps: true,
				firstLastUse: true,
				first: "←",
				last: "→",
				wrapClass: "pagination",
				activeClass: "active",
				disabledClass: "disabled",
				nextClass: "next",
				prevClass: "prev",
				lastClass: "last",
				firstClass: "first",
			});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function image(StatusType, file) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	var files = file;
	id = suserId;
	primaryType = sprimaryType;

	if (userisIn == "local") {
		var adminUrl =
			apiBaseURLOXY + StatusType + "/getPaymentUploadedListAndCount";
	} else {
		var adminUrl =
			apiBaseURLOXY + StatusType + "/getPaymentUploadedListAndCount";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: adminUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			console.log(data.paymentUploadHistoryResponseDto.paymentUrl);
			if (data.paymentUploadHistoryResponseDto.paymentUrl != "") {
				console.log(data.paymentUploadHistoryResponseDto.paymentUrl);

				var sourcePath = files;

				$.colorbox({ href: sourcePath });
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function readPaymemt(input) {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var id = $("#unique").val();

	$(".loadingSec").show();
	if (input.files && input.files[0]) {
		var reader = new FileReader();

		reader.onload = function (e) {
			$(".FileUpload .image-upload-wrap").hide();

			$(".FileUpload .file-upload-image").attr("src", e.target.result);
			$(".FileUpload .file-upload-content").show();

			$(".FileUpload .image-title").html(input.files[0].name);
		};

		reader.readAsDataURL(input.files[0]);

		var fd = new FormData();
		var files = input.files[0];
		fd.append("PAYMENTSCREENSHOT", files);

		if (userisIn == "local") {
			var getStatUrl = apiBaseURLOXY + id + "/paymentScreenshot";
		} else {
			var getStatUrl = apiBaseURLOXY + id + "/paymentScreenshot";
		}

		$.ajax({
			url: getStatUrl,
			type: "POST",
			data: fd,
			contentType: false,
			processData: false,
			success: function (data, textStatus, xhr) {
				if (data != 0) {
					$("#modal-fileUploadedSuccessfully").modal("show");
					$(".loadingSec").hide();
					// location.reload();
					var myfile = $("#File").val();
					var filename = myfile.split("\\").pop();
					// $(".Passportdoc1").html(filename);

					$(".paymentId").html(filename);

					$("#documnetId").val(data.documentId);
					$("#borrowerUnique").val(data.uniqueNumber);
				} else {
					alert("file not IMAGE uploaded");
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				$(".loadingSec").hide();
				$(".modal-body #text1").html(arguments[0].responseJSON.errorMessage);
				if (arguments[0].responseJSON.errorCode == 101) {
					$("#modal-paymentUploadedWarning").modal("show");
				}
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
}
function downloadPaymemt(doctype) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var doctype = doctype;
	var documnetId = $("#documnetId").val();

	alert(documnetId);
	if (userisIn == "local") {
		var getPayment =
			apiBaseURLOXY + suserId + "/download/" + doctype + "/" + documnetId;
	} else {
		var getPayment =
			"http://localhost:8181/v1/user/" +
			suserId +
			"/download/" +
			doctype +
			"/" +
			documnetId;
	}
	console.log(getPayment);
	$.ajax({
		url: getPayment,
		type: "GET",
		success: function (data, textStatus, xhr) {
			if (data.downloadUrl != "") {
				console.log(data.downloadUrl);
				// $('a.colorbox').colorbox();
				//window.open(data.downloadUrl,'_blank');
				var sourcePath = data.downloadUrl;
				var contentTypeCheck = ".pdf";

				if (sourcePath.indexOf(contentTypeCheck) != -1) {
					//alert('We can view the PDF files in colorbox. Note: File will download automatically. Please check downloads.');
					window.open(data.downloadUrl, "_blank");
				} else {
					$.colorbox({ href: data.downloadUrl });
				}
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

$(document).ready(function () {
	$("#payment-submit-btn").click(function () {
		var uniqueNumber = $("#unique").val();
		var choosename = $("#name").val();
		var documentId = $("#documnetId").val();
		var amount = $("#amount").val();
		var updatedBy = $("#updating").val();
		var paidDate = $("#expectedDateValue").val();
		var pART = $("#partPayment").val();
		var fULL = $("#fullPayment").val();
		var payment = $("input[name='payment']:checked").val();

		var isValid = true;

		sprimaryType = getCookie("sUserType");
		saccessToken = getCookie("saccessToken");

		if (choosename == "") {
			$(".name").show();
			isValid = false;
		} else {
			$(".name").hide();
		}

		if (amount <= 0) {
			$(".amount").show();
			isValid = false;
		} else {
			$(".amount").hide();
		}

		if (uniqueNumber == "") {
			$(".unique").show();
			isValid = false;
		} else {
			$(".unique").hide();
		}

		var postData = {
			borrowerUniqueNumber: uniqueNumber,
			borrowerName: choosename,
			documentUploadId: documentId,
			amount: amount,
			updatedName: updatedBy,
			paidDate: paidDate,
			paymentType: payment,
		};

		var postData = JSON.stringify(postData);
		console.log(postData);

		if (userisIn == "local") {
			//http://35.154.48.120:8080/oxynew/
			var updateCommentUrl = apiBaseURLOXY + "paymentUpload";
		} else {
			// http://localhost:8181/
			var updateCommentUrl = apiBaseURLOXY + "paymentUpload";
		}

		if (isValid == true) {
			$.ajax({
				url: updateCommentUrl,
				type: "POST",
				data: postData,
				contentType: "application/json",
				dataType: "json",
				success: function (data, textStatus, xhr) {
					// console.log("------- "+getLoanId+" "+hereisUpdatedComment);
					$("#modal-fileUploadedSuccessfully1").modal("show");
					setTimeout(function () {
						location.reload();
					}, 3000);
				},
				statusCode: {
					400: function (response) {
						$("#modal-agreement-already").modal("show");
					},
				},
				error: function (xhr, textStatus, errorThrown) {
					console.log("Error Something");
					$(".modal-body #text1").html(arguments[0].responseJSON.errorMessage);

					if (arguments[0].responseJSON.errorCode == 101) {
						$("#modal-paymentUploadedWarning").modal("show");
					}
					if (arguments[0].responseJSON.errorCode == 109) {
						$("#modal-paymentUploadedWarning").modal("show");
					}
				},
				beforeSend: function (xhr) {
					xhr.setRequestHeader("accessToken", saccessToken);
				},
			});
		}
		return isValid;
	});
});

function uploadScrowTransactionScreesShot(input) {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");
	var lenderId = $("#lenderid").val();

	// alert(sprimaryType);
	// alert(saccessToken);
	// alert(lenderId);
	lenderId = lenderId.substr(2);

	$(".loadingSec").show();
	if (input.files && input.files[0]) {
		var reader = new FileReader();

		reader.onload = function (e) {
			$(".panUpload .image-upload-wrap").hide();

			$(".panUpload .file-upload-image").attr("src", e.target.result);
			$(".panUpload .file-upload-content").show();
			// $('.panUpload .file-upload-image').attr('href', e.target.result);

			$(".panUpload .image-title").html(input.files[0].name);
		};

		reader.readAsDataURL(input.files[0]);

		var fd = new FormData();
		var files = input.files[0];
		//alert(fd);
		fd.append("TRANSACTIONSS", files);
		if (userisIn == "local") {
			var formUrl =
				apiBaseURLOXY + lenderId + "/upload/lendertransactiondetails";
		} else {
			var formUrl =
				apiBaseURLOXY + lenderId + "/upload/lendertransactiondetails";
		}
		// alert(formUrl);
		$.ajax({
			url: formUrl,
			type: "post",
			data: fd,
			contentType: false,
			processData: false,
			success: function (data, textStatus, xhr) {
				if (data != 0) {
					$("#modal-fileUploadedSuccessfully").modal("show");
					$(".loadingSec").hide();

					var myfile = $("#pan").val();
					var filename = myfile.split("\\").pop();

					$(".transactiondetailsId").html(filename);

					$("#documnetId").val(data.documentId);
				} else {
					alert("file not uploaded");
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	// else {
	// removeUpload();
	// }
}

$(document).ready(function () {
	$("#btnsrcrowtrn").click(function () {
		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		userId = suserId;
		primaryType = sprimaryType;
		accessToken = saccessToken;

		var lenderId = $("#lenderid").val();
		var accountNumber = $("#transactionaccountnumber").val();
		var transactionAmount = $("#transactionamount").val();
		var transactionDate = $("#transactiondatepicker").val();
		var documentUploadedId = $("#documnetId").val();

		lenderId = lenderId.substr(2);

		var isValid = true;

		if (accountNumber == "") {
			$(".accountNumbererror").show();
			isValid = false;
		} else {
			$(".accountNumbererror").hide();
		}

		if (transactionAmount == "") {
			$(".transactionAmounterror").show();
			isValid = false;
		} else {
			$(".transactionAmounterror").hide();
		}
		if (transactionDate == "") {
			$(".transactionDaterror").show();
			isValid = false;
		} else {
			$(".transactionDaterror").hide();
		}
		var postData = {
			scrowAccountNumber: accountNumber,
			transactionAmount: transactionAmount,
			transactionDate: transactionDate,
			documentUploadedId: documentUploadedId,
		};

		var postData = JSON.stringify(postData);
        let url = "";
console.log(sprimaryType)
if (sprimaryType === "ADMIN") {
	console.log(sprimaryType)
    url = "savelendertransactionfortestuser";
} else {
    url = "savelendertransactionfortestuser";
	console.log(sprimaryType)
}

if (userisIn === "local") {
    regUrl = apiBaseURLOXY + lenderId + "/" + url;
} else {
    regUrl = apiBaseURLOXY + lenderId + "/" + url;
}
		console.log(regUrl);
		if (isValid == true) {
			$.ajax({
				url: regUrl,
				type: "POST",
				data: postData,
				contentType: "application/json",
				dataType: "json",
				success: function (data, textStatus, xhr) {
					$("#modal-transactionSuccess").modal("show");
					setTimeout(function () {
						location.reload();
					}, 4000);
				},
				error: function (xhr, textStatus, errorThrown) {
					console.log("error");
					if (xhr.status === 400 ) {
						var errorData = JSON.parse(xhr.responseText);
						// Extract the error message from the parsed response
						var errorMessage = errorData.errorMessage;
						               
						// Show the modal dialog
						$("#modal-transactiondanger").modal("show");
						// Display the error message in the modal body
						$("#modal-transactiondanger .modal-body").html(errorMessage);
					 	setTimeout(function () {
							location.reload();      
						}, 4000);                          
					}                                            
				},
				beforeSend: function (xhr) {
					xhr.setRequestHeader("accessToken", saccessToken);
				},
			});
		}
		return isValid;
	});
});


$(document).ready(function () {
	$("#useremailandmobileActivation").click(function () {
	
		sprimaryType = getCookie("sUserType");
		saccessToken = getCookie("saccessToken");

		
		var mobileNumber = $(".updateMobileNo").val();
		var email = $("#userEmailActivation").val();

	
	

		var isValid = true;

		if (email == "") {
			$(".errorEmail").show();
			isValid = false;
		} else {
			$(".errorEmail").hide();
		}

		if (mobileNumber == "") {
			$(".errormobileNumber").show();
			isValid = false;
		} else {
			$(".errormobileNumber").hide();
		}

		

		var postData = {
			mobileNumber,
			email
		};

		var postData = JSON.stringify(postData);

		if (userisIn == "local") {
			regUrl = apiBaseURLOXY + "invalidEmailUpdaionForTestUser";
		} else {
			regUrl = apiBaseURLOXY + "invalidEmailUpdaionForTestUser";
		}
		console.log(regUrl);

		if (isValid == true) {
			$.ajax({
				url: regUrl,
				type: "PATCH",
				data: postData,
				contentType: "application/json",
				dataType: "json",
				success: function (data, textStatus, xhr) {
				$("#modal-UpdateSuccess-activation-Link").modal("show");
				},
				error: function (xhr, textStatus, errorThrown) {
					console.log("error");
					if (xhr.status === 400) {
						var errorData = JSON.parse(xhr.responseText);
						console.log(errorData)
						// Extract the error message from the parsed response
						var errorMessage = errorData.errorMessage;
						               
						// Show the modal dialog
						$("#modal-transactiondanger").modal("show");
						// Display the error message in the modal body
						$("#modal-transactiondanger .modal-body").html(errorMessage);
					 	setTimeout(function () {
							location.reload();      
					
						}, 4000); 
					} 
				},
				beforeSend: function (xhr) {
					xhr.setRequestHeader("accessToken", saccessToken);
				},
			});
		}
		return isValid;
	});
});


$(document).ready(function () {
	$("#btnuseremailandmobile").click(function () {
		// suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		var UpdateUserId = $(".updateUserId").val();
		var userEmail = $("#userEmail").val();
		var userMobile = $("#userMobile").val();

		UpdateUserId = UpdateUserId.substring(2);

		var isValid = true;

		if (UpdateUserId == "") {
			$(".errorusername").show();
			isValid = false;
		} else {
			$(".errorusername").hide();
		}

		if (userMobile == "") {
			$(".erroruserMobile").show();
			isValid = false;
		} else {
			$(".erroruserMobile").hide();
		}

		if (userEmail == "") {
			$(".errorEmail").show();
			isValid = false;
		} else {
			$(".errorEmail").hide();
		}

		var postData = {
			id: UpdateUserId,
			mobileNumber: userMobile,
			email: userEmail,
		};
		
		var postData = JSON.stringify(postData);

		if (userisIn == "local") {
			regUrl = apiBaseURLOXY + "testupdateMobileNumberAndEmail";
		} else {
			regUrl = apiBaseURLOXY + "testupdateMobileNumberAndEmail";
		}
		console.log(regUrl);

		if (isValid == true) {
			$.ajax({
				url: regUrl,
				type: "PATCH",
				data: postData,
				contentType: "application/json",
				dataType: "json",
				success: function (data, textStatus, xhr) {
					$("#modal-UpdateSuccess").modal("show");
				},
				error: function (xhr, textStatus, errorThrown) {
					console.log("error");
					console.log(errorThrown)
					if (xhr.status === 400) {
						var errorData = JSON.parse(xhr.responseText);
						console.log(errorData)
						// Extract the error message from the parsed response
						var errorMessage = errorData.errorCode;
						               
						// Show the modal dialog
						$("#modal-transactiondanger").modal("show");
						// Display the error message in the modal body
						$("#modal-transactiondanger .modal-body").html(errorMessage);
					 	setTimeout(function () {
							location.reload();      
					
						}, 4000); 
					} 
				},
				beforeSend: function (xhr) {
					xhr.setRequestHeader("accessToken", saccessToken);
				},
			});
		}
		return isValid;
	});
});

// view lender wallets status start

function viewlenderwallet() {
	//alert(1);
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let id = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		//http://35.154.48.120:8080/oxynew/
		var adminUrl = apiBaseURLOXY + "10/1/approvedLenderDetails";
	} else {
		var adminUrl = apiBaseURLOXY + "10/1/approvedLenderDetails";
	}

	$.ajax({
		url: adminUrl,
		type: "GET",
		success: function (data, textStatus, xhr) {
			console.log(data.lenderWalletInfo);
			var template = document.getElementById("displaywalletTpl").innerHTML;
			console.log(template);
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.lenderWalletInfo,
			});
			// alert(html);
			$("#displaywallet").html(html);
			var displayPageNo = data.totalLenders / 10;
			displayPageNo = displayPageNo + 1;
			$(".viewlenderwallet")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...
					if (userisIn == "local") {
						//http://35.154.48.120:8080/oxynew/
						var adminUrl =
							apiBaseURLOXY + "10/" + num + "/approvedLenderDetails";
					} else {
						var adminUrl =
							apiBaseURLOXY + "10/" + num + "/approvedLenderDetails";
					}

					$.ajax({
						url: adminUrl,
						type: "GET",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("displaywalletTpl").innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.lenderWalletInfo,
							});
							$("#displaywallet").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function LENDERWALLET() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userSelecctedOption = $(".choosenType").val();
	console.log("userSelecctedOption: " + userSelecctedOption);

	var lenderid = $(".lenderid input").val();
	lenderid = lenderid.substr(2);
	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;
	var postData = JSON.stringify(postData);
	console.log(postData);
	if (userisIn == "local") {
		var adminUrl = apiBaseURLOXY + lenderid + "/getLenderWalletAmount";
	} else {
		var adminUrl = apiBaseURLOXY + lenderid + "/getLenderWalletAmount";
	}

	$.ajax({
		url: adminUrl,
		type: "GET",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("displaywalletTpl1").innerHTML;
			console.log(template);
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, { data: data });
			$("#displaywallet").html(html);
			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".viewlenderwallet").bootpag({
				total: displayPageNo,
				page: 1,
				maxVisible: 5,
				leaps: true,
				firstLastUse: true,
				first: "←",
				last: "→",
				wrapClass: "pagination",
				activeClass: "active",
				disabledClass: "disabled",
				nextClass: "next",
				prevClass: "prev",
				lastClass: "last",
				firstClass: "first",
			});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}
//////////END////////////////////////////

///////// ADMIN COMMENTS  BY LOGIN THROUGH  START////////////

function savecomments() {
	// alert("leno");
	$("#loadBoxforWriteCommentsadmin").modal("show");
}

function saveAdminCommentsbyadmin() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var pid = $("#loanrequestid").val();
	var givenRating = $(".rating-value").val();
	var givenComments = $("#comments").val();
	var rateOfInterestb = $("#roib").val();
	var rateOfInterestl = $("#roil").val();
	var duration = $("#months").val();

	var lendermethod = $("input[name='repaymentMethodl']:checked").val();
	var borrowermethod = $("input[name='repaymentMethodb']:checked").val();
	var durationType = $("input[name='durationtypes']:checked").val();
	var isValid = true;

	if (givenComments == "" || givenRating == "") {
		alert("Make sure you enter Comments and Rating!");
		return false;
	}

	if (rateOfInterestb == "") {
		$(".brateOfInterestError").show();
		isValid = false;
	} else {
		$(".brateOfInterestError").hide();
	}

	if (rateOfInterestl == "") {
		$(".lrateOfInterestError").show();
		isValid = false;
	} else {
		$(".lrateOfInterestError").hide();
	}

	if (duration == "") {
		$(".durationError").show();
		isValid = false;
	} else {
		$(".durationError").hide();
	}

	if (pid == "") {
		$(".unique").show();
		isValid = false;
	} else {
		$(".unique").hide();
	}

	if (userisIn == "local") {
		//http://35.154.48.120:8080/oxynew/
		var saveCommentsUrl = apiBaseURLOXY + pid + "/commentsByRadhaSir";
	} else {
		// https://fintech.oxyloans.com/oxyloans/
		var saveCommentsUrl = apiBaseURLOXY + pid + "/commentsByRadhaSir";
	}
	// alert(saveCommentsUrl);

	var postData = {
		comments: givenComments,
		rating: givenRating,
		rateOfInterestToBorrower: rateOfInterestb,
		rateOfInterestToLender: rateOfInterestl,
		durationToTheApplication: duration,
		durationType: durationType,
		repaymentMethodForBorrower: borrowermethod,
		repaymentMethodForLender: lendermethod,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	// alert(postData);
	if (isValid == true) {
		$.ajax({
			url: saveCommentsUrl,
			type: "POST",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				$("#loadBoxforWriteComments").modal("hide");
				alert("Comments & Ratings are Saved.");
				window.location = "dashboard";
			},
			error: function (request, error) {
				if (arguments[0].responseJSON.errorCode == 109) {
					alert("Comments are already updated");
					$("#loadBoxforWriteComments").modal("hide");
				}
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

///////// ADMIN COMMENTS  BY LOGIN THROUGH  END//////////

function uploadidfc() {
	// alert("leno");
	$("#modal-uploadIDFCPayments").modal("show");
}

function readidfc(input) {
	// var id = $(".CibilFileUpload").attr("data-clickedid");
	var ifdcdate = $("#idfcstartdate").val();

	accessToken =
		"eyJ1c2VySWQiOiI2NjgwIiwiaWF0IjoxNjEwOTcyNDkxNjU2LCJ0dGwiOjcyMDAsInZlcnNpb24iOiJ2MSIsImdyYW50VHlwZSI6IlBXRCIsImFsZ29yaXRobSI6IlJTQSJ9.NH4YSIUrUAjmzSVHzT8/6YmOD6PH+iQRKua4AnSdAI3HopubhJEhXw2r204EMhWABJFlFn/oQPxCgK6b2ufV+6UZGZucWW1DalIx0VQGsq9VwkbPlOrP6vFXMD2N0fyhPTfn5BSoofYhNwFN/XK0M2oj3KMkB6fqgO6ffTW3RYIYt5S4ED0yHAEV57749APhRECI4McSFfR4h69vuYBu/IT4XSOatD3ec1QPU5ir1NkJPzPt5voipLfWDfYjzp1h6hAZphL0XSoXk19jf+bCh2YI3qd2vPr2/7oT3KhnTbTPmHj9sJBBzzOP/GfJvKvUa2C40zJiJVaFj7S3TwO4/Q==";
	// alert(ifdcdate);
	$(".loadingSec").show();
	if (input.files && input.files[0]) {
		var reader = new FileReader();

		reader.onload = function (e) {
			$(".passportUpload1 .image-upload-wrap").hide();

			$(".passportUpload1 .file-upload-image").attr("src", e.target.result);
			$(".passportUpload1 .file-upload-content").show();

			$(".passportUpload1 .image-title").html(input.files[0].name);
		};

		reader.readAsDataURL(input.files[0]);

		var fd = new FormData();
		var files = input.files[0];
		fd.append("IDFCPAYMENTS", files);
		// alert(fd);
		var actionURL = apiBaseURLOXY + "uploadIDFCPayments/" + ifdcdate;

		// alert(actionURL);
		//console.log(fd);
		$.ajax({
			url: actionURL,
			type: "post",
			data: fd,
			contentType: false,
			processData: false,
			success: function (data, textStatus, xhr) {
				if (data != 0) {
					$("#modal-fileUploadedSuccessfully").modal("show");
					$(".loadingSec").hide();
					// location.reload();
					var myfile = $("#idfc").val();
					var filename = myfile.split("\\").pop();
					$(".Passportdoc1").html(filename);
				} else {
					alert("file not uploaded");
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				alert("file not uploaded");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", accessToken);
			},
		});
	} //else {
	//removeUpload();
	//}
}

function downloadidfc() {
	// alert("leno");
	$("#modal-downloadidfc").modal("show");
}

function idfcdownload() {
	sprimaryType = getCookie("sUserType");
	// saccessToken = getCookie("saccessToken");
	var doctype = doctype;
	var ifdcdate = $("#idfcstartdates").val();

	accessToken =
		"eyJ1c2VySWQiOiI2NjgwIiwiaWF0IjoxNjEwOTcyNDkxNjU2LCJ0dGwiOjcyMDAsInZlcnNpb24iOiJ2MSIsImdyYW50VHlwZSI6IlBXRCIsImFsZ29yaXRobSI6IlJTQSJ9.NH4YSIUrUAjmzSVHzT8/6YmOD6PH+iQRKua4AnSdAI3HopubhJEhXw2r204EMhWABJFlFn/oQPxCgK6b2ufV+6UZGZucWW1DalIx0VQGsq9VwkbPlOrP6vFXMD2N0fyhPTfn5BSoofYhNwFN/XK0M2oj3KMkB6fqgO6ffTW3RYIYt5S4ED0yHAEV57749APhRECI4McSFfR4h69vuYBu/IT4XSOatD3ec1QPU5ir1NkJPzPt5voipLfWDfYjzp1h6hAZphL0XSoXk19jf+bCh2YI3qd2vPr2/7oT3KhnTbTPmHj9sJBBzzOP/GfJvKvUa2C40zJiJVaFj7S3TwO4/Q==";

	if (userisIn == "local") {
		var getPAN = apiBaseURLOXY + "downloadIDFCPayments/" + ifdcdate;
	} else {
		var getPAN = apiBaseURLOXY + "downloadIDFCPayments/" + ifdcdate;
	}
	// alert(getPAN);

	console.log(getPAN);
	$.ajax({
		url: getPAN,
		type: "GET",
		success: function (data, textStatus, xhr) {
			window.open(data.downloadUrl, "_blank");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function ecssearch() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var year = $(".year").val();
	var Month = $("#monthvalue").val();

	if (userisIn == "local") {
		var emiDetails =
			apiBaseURLOXY + "getEcsAndNonEcsPaymentHistory/" + Month + "/" + year;
	} else {
		var emiDetails =
			apiBaseURLOXY + "getEcsAndNonEcsPaymentHistory/january/2021";
	}
	// alert(emiDetails);
	$.ajax({
		url: emiDetails,
		type: "GET",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("displaywalletTpl234").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, { data: data });
			$("#displaywallet").html(html);
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

const ecspayment = async () => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	const d = new Date();

	const month = [
		"January",
		"February",
		"March",
		"April",
		"May",
		"June",
		"July",
		"August",
		"September",
		"October",
		"November",
		"December",
	];
	const currMonth = month[d.getMonth()];
	const currYear = d.getFullYear();

	if (userisIn == "local") {
		let emiDetails =
			apiBaseURLOXY +
			"getEcsAndNonEcsPaymentHistory/" +
			currMonth +
			"/" +
			currYear;
	} else {
		let emiDetails =
			apiBaseURLOXY +
			"getEcsAndNonEcsPaymentHistory/" +
			currMonth +
			"/" +
			currYear;
	}

	try {
		const response = await fetch(emiDetails, {
			method: "GET",
			headers: {
				accessToken: saccessToken,
			},
		});

		if (response.ok) {
			const data = await response.json();
			const template = document.getElementById("displaywalletTpl234").innerHTML;
			Mustache.parse(template);
			const html = Mustache.render(template, data);
			$("#displaywallet").html(html);
		} else {
			console.log("Error:", response.status);
		}
	} catch (error) {
		console.log("Error:", error);
	}
};

function viewvannumber() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var borrowerid = $("#mobile").val();
	borrowerid = borrowerid.substring(2);
	var isValid = true;

	if (borrowerid == "") {
		$(".mobile").show();
		isValid = false;
	}

	if (userisIn == "local") {
		var adminUrl = apiBaseURLOXY + "fetchingBorrowerVanNumber/" + borrowerid;
	} else {
		var adminUrl = apiBaseURLOXY + "fetchingBorrowerVanNumber/" + borrowerid;
	}

	if (isValid == true) {
		$.ajax({
			url: adminUrl,
			type: "GET",
			success: function (data, textStatus, xhr) {
				var template = document.getElementById("displaywalletTpl").innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, { data: data });

				$("#displaywallet").html(html);
				$(".vannumber").show();

				$("#id").val(data.userId);
				if (data.vanNumber == "" || data.vanNumber != "") {
					$("#van").show();
				} else {
					$("#van").hide();
				}
			},

			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");
				$(".modal-body #text1").html(arguments[0].responseJSON.errorMessage);

				if (arguments[0].responseJSON.errorCode == 101) {
					$("#modal-alreadyDoneSendOffer").modal("show");
				}
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

const generatevan = async () => {

	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");
	let userId = suserId;

	let primaryType = sprimaryType;
	let accessToken = saccessToken;
	let DocumentId = $("#id").val();

	$(".loadingSec").show();

	if (userisIn == "local") {
		let adminUrl = apiBaseURLOXY + DocumentId + "/createVanForOldBorrower";
	} else {
		let adminUrl = apiBaseURLOXY + DocumentId + "/createVanForOldBorrower";
	}

	try {
		const response = await fetch(adminUrl, {
			method: "PATCH",
			headers: {
				accessToken: saccessToken,
			},
		});

		if (response.ok) {
			$(".loadingSec").hide();
			$("#modal-vannunber").modal("show");
			setTimeout(function () {
				location.reload();
			}, 5000);
		} else {
			console.log("Error:", response.status);
		}
	} catch (error) {
		console.log("Error:", error);
	}
};

const lenderWalletDetails = () => {
	$("#modal-viewlenderprofit").modal("show");
};

const lenderwallet = () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const userId = suserId;
	const primaryType = sprimaryType;
	const accessToken = saccessToken;

	const startdate = $("#startdate").val();
	const enddate = $("#enddate").val();

	const adminUrl =
		userisIn === "local"
			? apiBaseURLOXY + startdate + "/" + enddate + "/getLenderWalletDetails"
			: apiBaseURLOXY + startdate + "/" + enddate + "/getLenderWalletDetails";

	fetch(adminUrl, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (response.ok) {
				$("#modal-getLenderinformation").modal("show");
				setTimeout(function () {
					location.reload();
				}, 4000);
			} else if (response.status === 400) {
				$("#modal-agreement-already").modal("show");
			} else {
				console.log("Error Something");
			}
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
};

const lendersLoanInformation = () => {
	$("#modal-lenderloaninformation").modal("show");
};

const lendersLoanInformationdownload = () => {
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const year = $("#year").val();
	const Month = $("#monthvalue").val();

	const getPAN =
		userisIn === "local"
			? apiBaseURLOXY + Month + "/" + year + "/lenderLoansInformation"
			: apiBaseURLOXY + Month + "/" + year + "/lenderLoansInformation";

	fetch(getPAN, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (response.ok) {
				$("#modal-getLenderinformation").modal("show");
			} else {
				console.log("Error Something");
			}
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
};

function lendersemiamount() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var d = new Date();
	var month = d.getMonth() + 1;
	var year = d.getFullYear();

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + month + "/" + year + "/lendersInfoOfLoans";
	} else {
		var actOnLoan = apiBaseURLOXY + month + "/" + year + "/lendersInfoOfLoans";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCountOfLenders;
			if (data.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"wallettransactiondetails"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.listOfLenderDetails,
				});
				$("#displaywallettrns").html(html);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".acceptedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...
						var postData = {
							pageNo: num,
							pageSize: "10",
						};
						// alert(postData);

						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var actOnLoan =
								apiBaseURLOXY + month + "/" + year + "/lendersInfoOfLoans";
						} else {
							var actOnLoan =
								apiBaseURLOXY + month + "/" + year + "/lendersInfoOfLoans";
						}

						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template = document.getElementById(
									"wallettransactiondetails"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.listOfLenderDetails,
								});
								// alert(html);

								$("#displaywallettrns").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	// $(".loadingSec").hide();
}

function lendersemiamountsearch() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	let lenderid = $("#lenderid").val();
	var Month = $("#monthvalue").val();
	var year = $("#selectElementId").val();

	 lenderid = lenderid.substr(2);

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + lenderid + "/getLenderInfoBasedOnId";
	} else {
		var actOnLoan = apiBaseURLOXY + lenderid + "/getLenderInfoBasedOnId";
	}

	var postData = {
		month: Month,
		year: year,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCountOfLenders;
			if (data.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"wallettransactiondetails"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.listOfLenderDetails,
				});
				$("#displaywallettrns").html(html);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewLenderemi(id) {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const Month = $("#monthvalue").val();
	const year = $("#selectElementId").val();

	const updateEmiUrlCard =
		userisIn === "local"
			? apiBaseURLOXY + id + "/getLenderInfoBasedOnId"
			: apiBaseURLOXY + id + "/getLenderInfoBasedOnId";

	const postData = JSON.stringify({
		month: Month,
		year: year,
	});

	fetch(updateEmiUrlCard, {
		method: "POST",
		headers: {
			accessToken: saccessToken,
			"Content-Type": "application/json",
		},
		body: postData,
	})
		.then((response) => {
			if (response.ok) {
				return response.json();
			} else {
				throw new Error("Error Something");
			}
		})
		.then((data) => {
			$(".viewrunningLoanLenders-" + id).show();

			const template = document.getElementById(
				"loadLendersRunningloans"
			).innerHTML;
			Mustache.parse(template);
			const html = Mustache.to_html(template, {
				data: data.listOfLenderLoansInformation,
			});
			$("#viewrunningLoanLenders-" + id).html(html);
		})
		.catch((error) => {
			console.log(error);
		});
}

function loadWalletTransactionHistory() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + "getAllTestLendersWalletInfo";
	} else {
		var actOnLoan = apiBaseURLOXY + "getAllLendersWalletInfo";
	}
	var postData = {
		pageNo: 1,
		pageSize: 10,
	};
	// alert(postData);
	var postData = JSON.stringify(postData);
	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			if (data.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"wallettransactiondetails"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.lenderWalletInfo,
				});
				$("#displaywallettrns").html(html);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".acceptedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...
						var postData = {
							pageNo: num,
							pageSize: "10",
						};
						// alert(postData);

						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var actOnLoan = apiBaseURLOXY + "getAllLendersWalletInfo";
						} else {
							var actOnLoan = apiBaseURLOXY + "getAllLendersWalletInfo";
						}

						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template = document.getElementById(
									"wallettransactiondetails"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.lenderWalletInfo,
								});
								// alert(html);

								$("#displaywallettrns").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewLoanLender(id) {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	const updateEmiUrlCard =
		userisIn == "local"
			? apiBaseURLOXY + id + "/lenderHistory"
			: apiBaseURLOXY + id + "/lenderHistory";

	fetch(updateEmiUrlCard, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (response.ok) {
				return response.json();
			} else {
				throw new Error("Error Something");
			}
		})
		.then((data) => {
			$(".viewrunningLoanLenders-" + id).show();
			const template = document.getElementById(
				"loadLendersRunningloans"
			).innerHTML;
			Mustache.parse(template);
			const html = Mustache.to_html(template, { data: data });
			$("#viewrunningLoanLenders-" + id).html(html);
		})
		.catch((error) => {
			console.log(error);
		});
}

function borrowersemiamount() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const updateEmiUrlCard =
		userisIn == "local"
			? apiBaseURLOXY + "getLoanOwners"
			: apiBaseURLOXY + "getLoanOwners";

	fetch(updateEmiUrlCard, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (response.ok) {
				return response.json();
			} else {
				throw new Error("Error Something");
			}
		})
		.then((data) => {
			if (data.loanOwnersCount == 0) {
				$("#modal-alreadyDoneSendOffer").modal("show");
			}
			totalEntries = data.loanOwnersCount;
			if (data.length == 0) {
				$("#displayNoRecords").show();
			} else {
				const template = document.getElementById(
					"wallettransactiondetails"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.render(template, {
					data: data.borrowersLoanOwnerNames,
				});
				$("#displaywallettrns").html(html);

				$("#Remarks").empty();
				for (let i = 0; i < data.borrowersLoanOwnerNames.length; i++) {
					const loanowner = data.borrowersLoanOwnerNames[i].loanOwner;
					if (loanowner != "NA") {
						$("#Remarks").append(
							'<option value="' + loanowner + '">' + loanowner + "</option>"
						);
					}
				}
			}
		})
		.catch((error) => {
			console.log(error);
		});
}

function borrowersemiamountsearch() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;
	var year = $("#selectElementId").val();
	var Month = $("#monthvalue").val();

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + Month + "/" + year + "/borrowerEmisInfo";
	} else {
		var actOnLoan = apiBaseURLOXY + "2/2021/borrowerEmisInfo";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			if (data.countOfBorrowerLoanOwners == 0) {
				$("#modal-alreadyDoneSendOffer").modal("show");
			}
			totalEntries = data.countOfBorrowerLoanOwners;
			if (data.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"wallettransactiondetails"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.borrowerInfoBasedOnLoanOwner,
				});
				$("#displaywallettrns").html(html);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".acceptedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...
						var postData = {
							pageNo: num,
							pageSize: "10",
						};
						// alert(postData);

						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var actOnLoan =
								apiBaseURLOXY + Month + "/" + year + "/borrowerEmisInfo";
						} else {
							var actOnLoan =
								apiBaseURLOXY + Month + "/" + year + "/borrowerEmisInfo";
						}

						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template = document.getElementById(
									"wallettransactiondetails"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.borrowerInfoBasedOnLoanOwner,
								});
								// alert(html);

								$("#displaywallettrns").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewborrowersemi(name) {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const updateEmiUrlCard =
		userisIn == "local"
			? apiBaseURLOXY + name + "/getBorrowersLoanInfo"
			: apiBaseURLOXY + name + "/getBorrowersLoanInfo";

	fetch(updateEmiUrlCard, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (response.ok) {
				return response.json();
			} else {
				throw new Error("Error Something");
			}
		})
		.then((data) => {
			const template = document.getElementById("borrowersinfo").innerHTML;
			Mustache.parse(template);
			const html = Mustache.to_html(template, {
				data: data.listOfBorrowersMappedToLoanOwner,
			});
			$("#binfo").html(html);
			$("#modal-viewEMI").modal("show");
		})
		.catch((error) => {
			console.log(error);
		});
}

function paidBorrowers() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let id = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var adminUrl = apiBaseURLOXY + "currentMonthPaidBorrowersList";
	} else {
		var adminUrl = apiBaseURLOXY + "currentMonthPaidBorrowersList";
	}

	$.ajax({
		url: adminUrl,
		type: "GET",
		success: function (data, textStatus, xhr) {
			console.log(data.results);
			var template = document.getElementById("displayRecordsTpl").innerHTML;
			console.log(template);
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, { data: data.results });
			$("#displayoffers").html(html);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function highestpaidborrowers() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var d = new Date();
	var month = new Array();
	month[0] = "January";
	month[1] = "February";
	month[2] = "March";
	month[3] = "April";
	month[4] = "May";
	month[5] = "June";
	month[6] = "July";
	month[7] = "August";
	month[8] = "September";
	month[9] = "October";
	month[10] = "November";
	month[11] = "December";
	var currMonth = month[d.getMonth()];
	var currYear = d.getFullYear();

	if (userisIn == "local") {
		var emiDetails =
			apiBaseURLOXY +
			"getEcsAndNonEcsPaymentHistory/" +
			currMonth +
			"/" +
			currYear;
	} else {
		var emiDetails =
			apiBaseURLOXY +
			"getEcsAndNonEcsPaymentHistory/" +
			currMonth +
			"/" +
			currYear;
	}

	$.ajax({
		url: emiDetails,
		type: "GET",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("displayRecordsTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.amountFromGongineniAdvertising,
			});
			var html_1 = Mustache.to_html(template, {
				data: data.amountFromLakshminrusimhamVenkata,
			});
			var html_2 = Mustache.to_html(template, {
				data: data.amountFromLuckyHyundai,
			});
			var html_3 = Mustache.to_html(template, {
				data: data.amountFromPadiminiBollineni,
			});
			var html_4 = Mustache.to_html(template, {
				data: data.amountFromSaralTalwar,
			});
			var html_5 = Mustache.to_html(template, {
				data: data.amountFromSharanyaLodge,
			});
			var html_6 = Mustache.to_html(template, {
				data: data.amountFromSreedeviHyundai,
			});
			var html_7 = Mustache.to_html(template, {
				data: data.amountFromTollGates,
			});

			//alert(subCount);
			setTimeout(function () {
				$("#displayRecordsTpl")
					.find("")
					.each(function () {
						$(this).addClass("read");
					});
			}, 1000);

			setTimeout(function () {
				if (data.amountFromGongineniAdvertising != null) {
					$.each(
						data.amountFromGongineniAdvertising[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-gogineni").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromLakshminrusimhamVenkata != null) {
					$.each(
						data.amountFromLakshminrusimhamVenkata[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-lv").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromLuckyHyundai != null) {
					$.each(
						data.amountFromLuckyHyundai[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-lucky").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromPadiminiBollineni != null) {
					$.each(
						data.amountFromPadiminiBollineni[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-padmini").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromSharanyaLodge != null) {
					$.each(
						data.amountFromSharanyaLodge[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-sharanya").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromSreedeviHyundai != null) {
					$.each(
						data.amountFromSreedeviHyundai[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-sree").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromTollGates != null) {
					$.each(
						data.amountFromTollGates[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-toll").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromSaralTalwar != null) {
					$.each(
						data.amountFromSaralTalwar[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-saral").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}
			}, 3000);

			$("#displayRecords").html(html_1);
			$("#displayRecords").append(html_2);
			$("#displayRecords").append(html_3);
			$("#displayRecords").append(html_4);
			$("#displayRecords").append(html_5);
			$("#displayRecords").append(html_6);
			$("#displayRecords").append(html_7);
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function highestpaidborrowersearch() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var year = $(".year").val();
	var Month = $("#monthvalue").val();

	if (userisIn == "local") {
		var emiDetails =
			apiBaseURLOXY + "getEcsAndNonEcsPaymentHistory/" + Month + "/" + year;
	} else {
		var emiDetails =
			apiBaseURLOXY + "getEcsAndNonEcsPaymentHistory/" + Month + "/" + year;
	}
	// alert(emiDetails);
	$.ajax({
		url: emiDetails,
		type: "GET",
		success: function (data, textStatus, xhr) {
			if (
				data.amountFromGongineniAdvertising == null &&
				data.amountFromLakshminrusimhamVenkata == null &&
				data.amountFromLuckyHyundai == null &&
				data.amountFromLuckyHyundai == null &&
				data.amountFromPadiminiBollineni == null &&
				data.amountFromSaralTalwar == null &&
				data.amountFromSharanyaLodge == null &&
				data.amountFromSreedeviHyundai == null &&
				data.amountFromTollGates == null
			) {
				$("#modal-alreadyDoneSendOffer").modal("show");
			}

			var template = document.getElementById("displayRecordsTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.amountFromGongineniAdvertising,
			});
			var html_1 = Mustache.to_html(template, {
				data: data.amountFromLakshminrusimhamVenkata,
			});
			var html_2 = Mustache.to_html(template, {
				data: data.amountFromLuckyHyundai,
			});
			var html_3 = Mustache.to_html(template, {
				data: data.amountFromPadiminiBollineni,
			});
			var html_4 = Mustache.to_html(template, {
				data: data.amountFromSaralTalwar,
			});
			var html_5 = Mustache.to_html(template, {
				data: data.amountFromSharanyaLodge,
			});
			var html_6 = Mustache.to_html(template, {
				data: data.amountFromSreedeviHyundai,
			});
			var html_7 = Mustache.to_html(template, {
				data: data.amountFromTollGates,
			});

			//alert(subCount);
			setTimeout(function () {
				$("#displayRecordsTpl")
					.find("")
					.each(function () {
						$(this).addClass("read");
					});
			}, 1000);

			setTimeout(function () {
				if (data.amountFromGongineniAdvertising != null) {
					$.each(
						data.amountFromGongineniAdvertising[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-gogineni").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromLakshminrusimhamVenkata != null) {
					$.each(
						data.amountFromLakshminrusimhamVenkata[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-lv").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromLuckyHyundai != null) {
					$.each(
						data.amountFromLuckyHyundai[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-lucky").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromPadiminiBollineni != null) {
					$.each(
						data.amountFromPadiminiBollineni[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-padmini").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromSharanyaLodge != null) {
					$.each(
						data.amountFromSharanyaLodge[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-sharanya").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromSreedeviHyundai != null) {
					$.each(
						data.amountFromSreedeviHyundai[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-sree").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromTollGates != null) {
					$.each(
						data.amountFromTollGates[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-toll").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}

				if (data.amountFromSaralTalwar != null) {
					$.each(
						data.amountFromSaralTalwar[0].indvidualPaymentsByOwner,
						function (index, value) {
							console.log(
								value.paid_date + ": " + value.individualAmountByOwner
							);
							$(".result-saral").append(
								value.paid_date + ": " + value.individualAmountByOwner + "<br>"
							);
						}
					);
				}
			}, 3000);

			$("#displayRecords").html(html_1);
			$("#displayRecords").append(html_2);
			$("#displayRecords").append(html_3);
			$("#displayRecords").append(html_4);
			$("#displayRecords").append(html_5);
			$("#displayRecords").append(html_6);
			$("#displayRecords").append(html_7);
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

// //*****  Reject loan by loanId***livin*****

const userRejectOffers = (loanID) => {
	$("#modal-borrower-rejectoffers").modal("show");
	$(".borrowerRejectofferBtn").attr("data-reqid", loanID);
};

function borrowersRejectoffers() {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const getLoanId = $(".borrowerRejectofferBtn").attr("data-reqid").substr(2);

	const updateEmiUrlCard =
		userisIn == "local"
			? apiBaseURLOXY + getLoanId + "/rejectLoanByLoanId"
			: "http://localhost:8181/v1/user/" + getLoanId + "/rejectLoanByLoanId";

	fetch(updateEmiUrlCard, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Error Something");
			}
			$("#modal-borrower-rejectoffers").modal("hide");
			$("#modal-adminrejectedoffer").modal("show");
			$("#" + getLoanId).prop("disabled", true);
		})
		.catch((error) => {
			console.log(error);
			$(".modal-body #text1").html(error.message);
			if (error.responseJSON && error.responseJSON.errorCode == 122) {
				$("#modal-alreadyDoneSendOffer").modal("show");
			}
		});
}

/***************************end rejectloan by loanid */

//**********************************search borrower id  for disburse ///////
const viewborrowerssearch = (status) => {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const borrowerid = $("#borrowerId").val().substring(2);

	const updateEmiUrlCard =
		userisIn == "local"
			? apiBaseURLOXY + "loansForBorrowerApplication/" + borrowerid
			: apiBaseURLOXY + "loansForBorrowerApplication/" + borrowerid;

	fetch(updateEmiUrlCard, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Error Something");
			}
			return response.json();
		})
		.then((data) => {
			if (status === "APPLEVEL") {
				const template = document.getElementById(
					"displaydealLevelApplication"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, { data: data });
				$("#loadBorrowersList").html(html);
				$(".Disbursment").show();
			} else {
				const template = document.getElementById(
					"loadBorrowersListTpl"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, { data: data });
				$("#loadBorrowersList").html(html);
				$(".Disbursment").show();
			}
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
};

const viewborrowers = (id) => {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const updateEmiUrlCard =
		userisIn == "local"
			? apiBaseURLOXY + "loansForBorrowerApplication/" + id
			: apiBaseURLOXY + "loansForBorrowerApplication/" + id;

	fetch(updateEmiUrlCard, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (!response.ok) {
				throw new Error("Error Something");
			}
			return response.json();
		})
		.then((data) => {
			$(".viewrunningLoanLenders-" + id).show();

			const template = document.getElementById("viewlenders").innerHTML;
			Mustache.parse(template);
			const html = Mustache.to_html(template, {
				data: data.borrowersLoansResponse,
			});
			$("#viewrunningLoanLenders-" + id).html(html);
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
};

const Disbursed = (borrowerid, disbursedBtnObj) => {
	//Changes by LIVIN Starts
	currentDisburdedBtnObj = disbursedBtnObj;
	$("#modal-Disbursementsdate").modal("show");
	$(".brDisbursedDateError").hide();
	$(".saveEmidateBtns").attr("data-loanid", borrowerid);
};

const DisbursementDate = () => {
	var isValid = true;
	var brDisburseDate = $(".borrowerDisbursementsDate").val();
	if (brDisburseDate == "") {
		$(".brDisbursedDateError").show();
		isValid = false;
	} else {
		$(".brDisbursedDateError").hide();
	}
	if (isValid) {
		$("#modal-Disbursementsdate").modal("hide");
		$("#modal-enterDisbursementsDate").modal("show");
		var borrowerid = $(".saveEmidateBtns").attr("data-loanid");
		$(".userDisbursementsDate").attr("data-loanid", borrowerid);
	}
};

function DisbursementDatesave() {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var hereisUpdatedBorrowerdate = $(".borrowerDisbursementsDate").val();
	var borrowerid = $(".userDisbursementsDate").attr("data-loanid");

	var updateCommentUrl =
		userisIn == "local"
			? apiBaseURLOXY + suserId + "/settingDisbursmentDatesForAllLoans"
			: apiBaseURLOXY + suserId + "/settingDisbursmentDatesForAllLoans";

	var postData = {
		id: borrowerid,
		disbursedDate: hereisUpdatedBorrowerdate,
		adminComments: "DISBURSED",
	};

	var postData = JSON.stringify(postData);
	console.log(postData);

	$(currentDisburdedBtnObj).attr("id", "user-DISBURSED");

	fetch(updateCommentUrl, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: postData,
	})
		.then((response) => {
			if (response.ok) {
				$("#modal-enterDisbursementsDate").modal("hide");
				$("#modal-disbursementsdatesuccess").modal("show");
			} else if (response.status === 400) {
				$("#modal-loanActives").modal("show");
				$(currentDisburdedBtnObj).attr("id", "user-");
			} else {
				throw new Error("Request failed");
			}
		})
		.catch((error) => {
			console.log("Error Something");
			$(currentDisburdedBtnObj).attr("id", "user-");
		});
}

// ////////***search function for paid borrowersinfo/////

function paidborrowerssearch() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	let applicationId = $(".applicationID").val();
	  applicationId = applicationId.substring(4);




	if (userisIn == "local") {
		var adminUrl = apiBaseURLOXY + applicationId + "/paidBorrowersInfo";
	} else {
		var adminUrl = apiBaseURLOXY + applicationId + "/paidBorrowersInfo";
	}

	$.ajax({
		url: adminUrl,
		type: "GET",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("displayRecordsTpl").innerHTML;
			console.log(template);
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, { data: data });
			$("#displayoffers").html(html);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadLenderEmiStats() {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var lenderid = $("#lenderid").val();
	lenderid = lenderid.substring(2);

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + lenderid + "/lenderEmiDetails";
	} else {
		var actOnLoan = apiBaseURLOXY + lenderid + "/lenderEmiDetails  ";
	}

	$.ajax({
		url: actOnLoan,
		type: "GET",
		success: function (data, textStatus, xhr) {
			totalEntries = data.length;
			if (data.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById("displayRecordsTpl").innerHTML;
				console.log(template);
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, { data: data });

				$("#displayoffers").html(html);
				$(".lenderunningsloans").show();
				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".viewlenderwallet")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...

						if (userisIn == "local") {
							var actOnLoan = apiBaseURLOXY + lenderid + "/lenderEmiDetails";
						} else {
							var actOnLoan = apiBaseURLOXY + lenderid + "/lenderEmiDetails  ";
						}

						$.ajax({
							url: actOnLoan,
							type: "GET",
							success: function (data, textStatus, xhr) {
								var template =
									document.getElementById("displayRecordsTpl").innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, { data });
								$("#displayoffers").html(html);
								$(".lenderunningsloans").show();
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	$(".loadingSec").hide();
}

const uploaddisbursment = () => {
	$("#modal-uploadDisbursement").modal("show");
};

function readdisbursement(input) {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	var ifdcdate = $("#startdatedis").val();

	$(".loadingSec").show();
	if (input.files && input.files[0]) {
		var reader = new FileReader();

		reader.onload = function (e) {
			$(".passportUpload1 .image-upload-wrap").hide();

			$(".passportUpload1 .file-upload-image").attr("src", e.target.result);
			$(".passportUpload1 .file-upload-content").show();

			$(".passportUpload1 .image-title").html(input.files[0].name);
		};

		reader.readAsDataURL(input.files[0]);

		var fd = new FormData();
		var files = input.files[0];
		fd.append("DISBURSEDLOANS", files);

		if (userisIn == "local") {
			var actionURL =
				apiBaseURLOXY + "uploadDisbursedLoansExcelSheet/" + ifdcdate;
		} else {
			var actionURL =
				apiBaseURLOXY + "uploadDisbursedLoansExcelSheet/" + ifdcdate;
		}

		$.ajax({
			url: actionURL,
			type: "post",
			data: fd,
			contentType: false,
			processData: false,
			success: function (data, textStatus, xhr) {
				if (data != 0) {
					$("#modal-fileUploadedSuccessfully").modal("show");
					$("#modal-uploadDisbursement").modal("hide");
					$(".loadingSec").hide();
					// location.reload();
					var myfile = $("#Disbursed").val();
					var filename = myfile.split("\\").pop();
					$(".Passportdoc1").html(filename);
				} else {
					alert("file not uploaded");
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				alert("file not uploaded");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", accessToken);
			},
		});
	}
}

function downloaddisburse() {
	$("#modal-downloaddisbursment").modal("show");
}

function disbursedownload() {
	sprimaryType = getCookie("sUserType");
	accessToken = getCookie("saccessToken");
	var doctype = doctype;
	var disbursedDate = $("#downdisbursment").val();

	if (userisIn == "local") {
		var getPAN = apiBaseURLOXY + "downloadDisbursedLoans/" + disbursedDate;
	} else {
		var getPAN = apiBaseURLOXY + "downloadDisbursedLoans/" + disbursedDate;
	}
	$.ajax({
		url: getPAN,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$("#modal-filedownloadedSuccessfully").modal("show");
			$("#modal-downloaddisbursment").modal("hide");
			window.open(data.downloadUrl, "_blank");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function UpdateDisbursedLoans() {
	$("#modal-UpdateDisbursedLoans").modal("show");
}

function updatedisbursedLoansinformation() {
	sprimaryType = getCookie("sUserType");
	accessToken = getCookie("saccessToken");
	var doctype = doctype;
	var excelUploadedDate = $("#UpdateDisbursedLoans").val();

	if (userisIn == "local") {
		var getPAN = apiBaseURLOXY + excelUploadedDate + "/updateDisbursedLoans";
	} else {
		var getPAN = apiBaseURLOXY + excelUploadedDate + "/updateDisbursedLoans";
	}
	// alert(getPAN);

	$.ajax({
		url: getPAN,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$("#modal-UpdateDisbursedLoans").modal("hide");
			$("#modal-updatethedisbursmentsheet").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

// ////////Application level approved /////////

function applicationlevelapproved(borrowerid) {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateCommentUrl =
			apiBaseURLOXY + suserId + "/approvingAllLoansInApplicationLevel";
	} else {
		var updateCommentUrl =
			apiBaseURLOXY + suserId + "/approvingAllLoansInApplicationLevel";
	}

	var postData = {
		id: borrowerid,
		adminComments: "APPROVED",
	};

	var postData = JSON.stringify(postData);
	console.log(postData);

	$.ajax({
		url: updateCommentUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			// $("#modal-enterDisbursementsDate").modal("hide");
			$("#modal-userloanApprove").modal("show");
			$("#" + borrowerid).prop("disabled", true);
		},

		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			// $(currentDisburdedBtnObj).attr("id","user-");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}
// ///////////////////new functionfor l4 start by livin/////

function loadPendingLoansInformation() {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + "displayPendingLoansInformation";
	} else {
		var actOnLoan = apiBaseURLOXY + "displayPendingLoansInformation";
	}
	
	var postData = {
		pageNo: 1,
		pageSize: 10,
	};
	// alert(postData);
	var postData = JSON.stringify(postData);
	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.countForDisbursmentPending;
			if (data.countForDisbursmentPending == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"loadBorrowersListTpl"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.disbursmentPendingInformation,
				});
				$("#loadBorrowersList").html(html);

				for (var i = 0; i < data.disbursmentPendingInformation.length; i++) {
					for (
						j = 0;
						j <
						data.disbursmentPendingInformation[i].borrowerKycDocuments.length;
						j++
					) {
						var docType =
							data.disbursmentPendingInformation[i].borrowerKycDocuments[j]
								.documentSubType;
						$(
							".user-ViewDocs" +
								data.disbursmentPendingInformation[i].borrowerId +
								" .show" +
								docType
						).attr("style", "display:block");
					}
				}

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".approvedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...
						var postData = {
							pageNo: num,
							pageSize: "10",
						};
						// alert(postData);

						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var actOnLoan = apiBaseURLOXY + "displayPendingLoansInformation";
						} else {
							var actOnLoan = apiBaseURLOXY + "displayPendingLoansInformation";
						}

						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template = document.getElementById(
									"loadBorrowersListTpl"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.disbursmentPendingInformation,
								});
								// alert(html);

								$("#loadBorrowersList").html(html);

								for (
									var i = 0;
									i < data.disbursmentPendingInformation.length;
									i++
								) {
									for (
										j = 0;
										j <
										data.disbursmentPendingInformation[i].borrowerKycDocuments
											.length;
										j++
									) {
										var docType =
											data.disbursmentPendingInformation[i]
												.borrowerKycDocuments[j].documentSubType;
										$(
											".user-ViewDocs" +
												data.disbursmentPendingInformation[i].borrowerId +
												" .show" +
												docType
										).attr("style", "display:block");
									}
								}
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	// $(".loadingSec").hide();
}

// ////////***search function for l4/////

function searchdisbursed() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var lenderId = $(".lenderID").val();
	var borrwerId = $(".borrowerID").val();


	if (lenderId == "") {
		var Id = borrwerId.substring(2);
	} else {
		var Id = lenderId.substring(2);
	}

	if (userisIn == "local") {
		var adminUrl = apiBaseURLOXY + Id + "/searchByUserIdAndDisbursementPending";
	} else {
		var adminUrl = apiBaseURLOXY + Id + "/searchByUserIdAndDisbursementPending";
	}


	$.ajax({
		url: adminUrl,
		type: "GET",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("loadBorrowersListTpl").innerHTML;

			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.disbursmentPendingInformation,
			});
			$("#loadBorrowersList").html(html);
			// alert(html);
			for (var i = 0; i < data.disbursmentPendingInformation.length; i++) {
				for (
					j = 0;
					j < data.disbursmentPendingInformation[i].borrowerKycDocuments.length;
					j++
				) {
					var docType =
						data.disbursmentPendingInformation[i].borrowerKycDocuments[j]
							.documentSubType;
					$(
						".user-ViewDocs" +
							data.disbursmentPendingInformation[i].borrowerId +
							" .show" +
							docType
					).attr("style", "display:block");
				}
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}


function search(appleval, noc) {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	let borrowerid = $("#borrowerid").val();
	borrowerid = borrowerid.substring(2);

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var postData = {
		leftOperand: {
			fieldName: "userId",
			fieldValue: borrowerid,
			operator: "EQUALS",
		},
		logicalOperator: "AND",
		rightOperand: {
			fieldName: "parentRequestId",
			operator: "NULL",
		},
		page: {
			pageNo: 1,
			pageSize: 10,
		},
		sortBy: "loanRequestedDate",
		sortOrder: "DESC",
	};

	var postData = JSON.stringify(postData);
	console.log(postData);

	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	} else {
		var getStatUrl = apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
	}

	$.ajax({
		url: getStatUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			console.log(totalEntries);

			if (appleval == "APPLEVEL") {
				var template = document.getElementById(
					"displayistypedataAppLevel"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, { data: data.results });
				$("#displayoffers").html(html);
			} else if (noc == "NOC") {
				var template = document.getElementById("displayistypenocgen").innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, { data: data.results });
				$("#displayoffers").html(html);
			} else {
				var template = document.getElementById("displayborrowerinfo").innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, { data: data.results });
				$("#displayoffers").html(html);
			}
			$(".borrwerunningsloans").show();
			$(".searchborrowerPagination").show();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".searchborrowerPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...

					var postData = {
						leftOperand: {
							fieldName: "userId",
							fieldValue: borrowerid,
							operator: "EQUALS",
						},
						logicalOperator: "AND",
						rightOperand: {
							fieldName: "parentRequestId",
							operator: "NULL",
						},
						page: {
							pageNo: num,
							pageSize: 10,
						},
						sortBy: "loanRequestedDate",
						sortOrder: "DESC",
					};

					var postData = JSON.stringify(postData);
					console.log(postData);
					//alert(1);
					if (userisIn == "local") {
						var getStatUrl =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					} else {
						var getStatUrl =
							apiBaseURLOXY + suserId + "/loan/ADMIN/request/search";
					}
					//var getStatUrl = apiBaseURLOXY+userId+"/loan/"+primaryType+"/request/search";
					$.ajax({
						url: getStatUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							totalEntries = data.totalCount;
							console.log(totalEntries);
							var template = document.getElementById(
								"displayborrowerinfo"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.results,
							});
							$("#displayoffers").html(html);
							$(".borrwerunningsloans").show();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

//////lender referee info on admin module//start by livin

function lenderreferrslinfo() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		//http://35.154.48.120:8080/oxynew/
		var adminUrl = apiBaseURLOXY + "displayingAllLenderReferenceDetails";
	} else {
		var adminUrl = apiBaseURLOXY + "displayingAllLenderReferenceDetails";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: adminUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			console.log(data.paymentUploadHistoryResponseDto);
			var template = document.getElementById("displaywalletTpl").innerHTML;
			// console.log(template);
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.listOfLenderReferenceDetails,
			});
			$("#displaywallet").html(html);
			var displayPageNo = data.countOfReferees / 10;
			displayPageNo = displayPageNo + 1;
			$(".viewlenderwallet")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					var postData = {
						pageNo: num,
						pageSize: 10,
					};

					//$(".content4").html("Page " + num); // or some ajax content loading...
					if (userisIn == "local") {
						//http://35.154.48.120:8080/oxynew/
						var adminUrl =
							apiBaseURLOXY + "displayingAllLenderReferenceDetails";
					} else {
						var adminUrl =
							apiBaseURLOXY + "displayingAllLenderReferenceDetails";
					}
					// alert(adminUrl);
					var postData = JSON.stringify(postData);
					$.ajax({
						url: adminUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("displaywalletTpl").innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.listOfLenderReferenceDetails,
							});
							$("#displaywallet").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", accessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}




function referalEarningmonthWiseList() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var adminUrl = apiBaseURLOXY + "displayMonthlyReferrersAmount1";
	} else {
		var adminUrl = apiBaseURLOXY + "displayMonthlyReferrersAmount1";
	}

	var postData = {
		data:"2024-01-09",
		pageNo: 1,
		pageSize: 10,
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: adminUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			console.log(data.paymentUploadHistoryResponseDto);
			var template = document.getElementById("displaywalletTpl").innerHTML;
			
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.listOfLenderReferenceDetails,
			});
			$("#displaywallet").html(html);
			var displayPageNo = data.countOfReferees / 10;
			displayPageNo = displayPageNo + 1;
			$(".viewlenderwallet")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					var postData = {
						data:"2024-01-09",
						pageNo: num,
						pageSize: 10,
					};

				
					if (userisIn == "local") {
					
						var adminUrl =
							apiBaseURLOXY + "displayMonthlyReferrersAmount1";
					} else {
						var adminUrl =
							apiBaseURLOXY + "displayMonthlyReferrersAmount1";
					}
					
					var postData = JSON.stringify(postData);
					$.ajax({
						url: adminUrl,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template =
								document.getElementById("displaywalletTpl").innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.listOfLenderReferenceDetails,
							});
							$("#displaywallet").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", accessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}
///////upload sheet////stary by livin

function Uploadsheet(input) {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var sheetname = $("#sheetname").val();
	var date = $(".UploadedDate").val();

	// alert(sheetname);
	// alert(date);
	var repaymentype = $("#Repayment").val();
	var sheetname = $("#sheetname").val();
	var uploadedDate = $("#UploadedDate").val();
	// var filename = $("#documnetId").val();

	$(".loadingSec").show();
	if (input.files && input.files[0]) {
		var reader = new FileReader();

		reader.onload = function (e) {
			$(".FileUpload .image-upload-wrap").hide();

			$(".FileUpload .file-upload-image").attr("src", e.target.result);
			$(".FileUpload .file-upload-content").show();

			$(".FileUpload .image-title").html(input.files[0].name);
		};

		reader.readAsDataURL(input.files[0]);

		var fd = new FormData();
		var files = input.files[0];
		fd.append(sheetname, files);

		if (userisIn == "local") {
			var getStatUrl = apiBaseURLOXY + "uploadExcel/" + date;
		} else {
			var getStatUrl = apiBaseURLOXY + "uploadExcel/" + date;
		}
		// alert(getStatUrl);
		$.ajax({
			url: getStatUrl,
			type: "POST",
			data: fd,
			contentType: false,
			processData: false,
			success: function (data, textStatus, xhr) {
				if (data != 0) {
					$("#modal-fileUploadedSuccessfully").modal("show");
					$(".loadingSec").hide();

					var myfile = $("#File").val();
					var filename = myfile.split("\\").pop();
					$("#documnetId").val(data.fileName);
					$("#uploadeddate").val(data.uploadedDate);
					$("#uploadedType").val(data.uploadedType);
				} else {
					alert("file not IMAGE uploaded");
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				alert("file not uploaded");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
}

$(document).ready(function () {
	$("#payment-sheet-btn").click(function () {
		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		primaryType = sprimaryType;
		accessToken = saccessToken;

		var Repaymentype = $("#Repayment").val();
		var sheetname = $("#sheetname").val();
		var UploadedDate = $("#UploadedDate").val();
		var filename = $("#documnetId").val();
		var Remarks = $("#Remarks").val();

		var isValid = true;

		if (Repaymentype == "") {
			$(".repaymentsheet").show();
			isValid = false;
		} else {
			$(".repaymentsheet").hide();
		}

		if (sheetname == "") {
			$(".sheetname").show();
			isValid = false;
		} else {
			$(".sheetname").hide();
		}
		if (UploadedDate == "") {
			$(".Paid").show();
			isValid = false;
		} else {
			$(".Paid").hide();
		}
		if (Remarks == "") {
			$(".remarks").show();
			isValid = false;
		} else {
			$(".remarks").hide();
		}

		var postData = {
			debitedAccountType: Repaymentype,
			debitedTowords: sheetname,
			transferredDate: UploadedDate,
			fileName: filename,
			remarks: Remarks,
		};

		var postData = JSON.stringify(postData);

		// alert(postData);

		//return false;
		if (userisIn == "local") {
			regUrl = apiBaseURLOXY + "uploadingExcelSheet";
		} else {
			regUrl = apiBaseURLOXY + "uploadingExcelSheet";
		}
		console.log(regUrl);
		if (isValid == true) {
			$.ajax({
				url: regUrl,
				type: "POST",
				data: postData,
				contentType: "application/json",
				dataType: "json",
				success: function (data, textStatus, xhr) {
					// alert(data);
					$("#modal-agreement-already").modal("show");
				},
				error: function (xhr, textStatus, errorThrown) {
					console.log("error");
					$(".modal-body #text1").html(arguments[0].responseJSON.errorMessage);
					if (arguments[0].responseJSON.errorCode == 108) {
						$("#modal-alreadyUploadedTheSheet").modal("show");
					}
				},
				beforeSend: function (xhr) {
					xhr.setRequestHeader("accessToken", saccessToken);
				},
			});
		}
		return isValid;
	});
});
///////////add loan owner's info'''''///
function addloanowners() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var loanownerid = $(".borrowerId").val();
	var loanowner = $("#loanOwner").val();
	loanownerid = loanownerid.substring(2);

	// alert(loanowner);
	if (userisIn == "local") {
		var updateCommentUrl = apiBaseURLOXY + loanownerid + "/updateLoanOwnerName";
	} else {
		var updateCommentUrl = apiBaseURLOXY + loanownerid + "/updateLoanOwnerName";
	}
	var postData = { loanOwner: loanowner };

	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateCommentUrl,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-agreement-already").modal("show");
			setTimeout(function () {
				location.reload();
			}, 3000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".modal-body #text1").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 101) {
				$("#modal-alreadyAddedinDb").modal("show");
			}
			if (arguments[0].responseJSON.errorCode == 109) {
				$("#modal-alreadyAddedinDb").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function lenderreturnstodatabase() {
	sprimaryType = getCookie("sUserType");
	accessToken = getCookie("saccessToken");

	var sheetname = $("#sheetname").val();
	var UploadedDate = $("#uploadeddate").val();

	if (userisIn == "local") {
		var getPAN =
			apiBaseURLOXY + UploadedDate + "/" + sheetname + "/lenderOutGoingAmount";
	} else {
		var getPAN =
			apiBaseURLOXY + UploadedDate + "/" + sheetname + "/lenderOutGoingAmount";
	}

	$.ajax({
		url: getPAN,
		type: "GET",
		success: function (data, textStatus, xhr) {
			// alert(data);
			$("#countvalue").html(data.countValueForUpdateLender);
			$("#modal-databasesheetuploaded").modal("show");
			setTimeout(function () {
				$("#modal-databasesheetuploaded").modal("hide");
			}, 1000);

			var template = document.getElementById(
				"displayFailedUsersInfoTpl"
			).innerHTML;
			// alert(template);
			Mustache.parse(template);
			// alert(data.listOfAccountNumbersFailed);
			var html = Mustache.to_html(template, {
				data: data.listOfAccountNumbersFailed,
			});
			// alert(html)
			$("#displayFailedUsersInfo").html(html);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function createAdeal(dealId, loanrequestId, isTest) {


	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");
	const suserId = getCookie("sUserId");

	// Basic Info

	$("#loadingSec").show();

	var whatsappGroups = "";
	$("input[type=checkbox]:checked").each(function () {
		if (this.checked) {
			whatsappGroups += $(this).val() + ",";
		}
	});
	whatsappGroups = whatsappGroups.substring(0, whatsappGroups.length - 1);
	var dealId = dealId;
	var dealName = $("#dealName").val();
	var borrowerName = $("#borrowerName").val();
	var dealAmount = $("#dealAmount").val();
	var fundsAcceptanceStartDate = $("#fundsAcceptanceStartDate").val();
	var fundsAcceptanceEndDate = $("#fundsAcceptanceEndDate").val();
	var borrowerRateOfInterest = $("#borrowerRateOfInterest").val();
	var dealLink = $("#dealLink").val();
	var duration = $("#duration").val();
	// Basic Info
	var satishOxyFoundingMonthlyInterest = $(
		"#satishOxyFoundingMonthlyInterest"
	).val();
	var satishOxyFoundingQuartelyInterest = $(
		"#satishOxyFoundingQuartelyInterest"
	).val();
	var satishOxyFoundingHalfInterest = $("#satishOxyFoundingHalfInterest").val();
	var satishOxyFoundingYearlyInterest = $(
		"#satishOxyFoundingYearlyInterest"
	).val();
	var satishOxyFoundingEndOfTheDealInterest = $(
		"#satishOxyFoundingEndOfTheDealInterest"
	).val();

	var oxyFoundingMonthlyInterest = $("#oxyFoundingMonthlyInterest").val();
	var oxyFoundingQuartelyInterest = $("#oxyFoundingQuartelyInterest").val();
	var oxyFoundingHalfInterest = $("#oxyFoundingHalfInterest").val();
	var oxyFoundingYearlyInterest = $("#oxyFoundingYearlyInterest").val();
	var oxyFoundingEndOfTheDealInterest = $(
		"#oxyFoundingEndOfTheDealInterest"
	).val();

	var oxyPremiumMonthlyInterest = $("#oxyPremiumMonthlyInterest").val();
	var oxyPremiumQuartelyInterest = $("#oxyPremiumQuartelyInterest").val();
	var oxyPremiumHalfInterest = $("#oxyPremiumHalfInterest").val();
	var oxyPremiumYearlyInterest = $("#oxyPremiumYearlyInterest").val();
	var oxyPremiumEndOfTheDealInterest = $(
		"#oxyPremiumEndOfTheDealInterest"
	).val();

	var newLendersMonthlyInterest = $("#newLendersMonthlyInterest").val();
	var newLendersQuartelyInterest = $("#newLendersQuartelyInterest").val();
	var newLendersHalfInterest = $("#newLendersHalfInterest").val();
	var newLendersYearlyInterest = $("#newLendersYearlyInterest").val();
	var newLendersEndOfTheDealInterest = $(
		"#newLendersEndOfTheDealInterest"
	).val();
	var loanActiveDate = $("#loanActiveDate").val();
	var maxparticipationLimit = $("#participationLimit").val();
	var miniparticipationLimit = $("#minimumLimit").val();
	var whatappMessageToLenders = $("#whatstextmessage").val();
	var dealtype = $("#dealtype").val();
	var roiBorrower = $("#roiBorrower").val();
	var feeBorrower = $("#feeBorrower").val();
	var anyTimeWith = $("#anyTimeWithRequest").val();
	var anytimeROI = $("#anytimeWithRoiText").val();
	var lenderparticipationType = $(".participcationLenderType").val();
	var mappedUsers = $("#mappedUsers").val();
	var mappedUsersLoanAmount = $("#userLoanAmpuntmap").val();
	var enachType = $("#enachTypeUsers").val();
	var dealsubtype = $("#dealsubtype").val();
	let dealcreationNotification = $("#dealnotification").val();

	var feeStatusToUser = $("#feeParticipation").val();
	var dealOpenStatus = $("#dealLunchType").val();
	var dealFutureDate = $("#dealLunchDate").val();
	var dealLaunchHoure = $("#dealLunchTimePicker").val();
	// const dealProcessingFee = $(".eachDealFeeToParticipate").val();

	let islifetimewaiver = $("#lifetimewaiver").val();
	let dealwaiverAmount = $(".dealwaiverAmounttext").val();

	let dealwhatsappNotification = $("#dealwhatsappnotification").val();
	let dealemailNotification = $("#dealemailnotification").val();

	let isValid = true;

	if (dealwhatsappNotification == "") {
		$(".errordealwhatsnotification").show();
		$("#loadingSec").hide();
		isValid = false;
	} else {
		$(".errordealwhatsnotification").hide();
		dealwhatsappNotification = JSON.parse(dealwhatsappNotification);
	}

	if (dealemailNotification == "") {
		$(".errordealemailnotification").show();
		$("#loadingSec").hide();
		isValid = false;
	} else {
		$(".errordealemailnotification").hide();
		dealemailNotification = JSON.parse(dealemailNotification);
	}




	var names;

	let fundsstart = fundsAcceptanceStartDate.split("/");
	let foundsend = fundsAcceptanceEndDate.split("/");

	let convertStart = new Date(
		fundsstart[2] + "/" + fundsstart[1] + "/" + fundsstart[0]
	);
	let convertEnd = new Date(
		foundsend[2] + "/" + foundsend[1] + "/" + foundsend[0]
	);

	if (
		(mappedUsersLoanAmount.length != null ||
			mappedUsersLoanAmount.length != "") &&
		(mappedUsers.length != null || mappedUsers.length != "")
	) {
		const mappedUsersdata = mappedUsers.split(",");
		const mappedUsersdataarray = [...mappedUsersdata];
		var mapuser = JSON.parse(JSON.stringify(mappedUsersdataarray));

		const mappedUsersamount = mappedUsersLoanAmount.split(",");
		const mappedUsersamountarray = [...mappedUsersamount];
		var mapamount = JSON.parse(JSON.stringify(mappedUsersamountarray));

		if (mapamount.length == mapuser.length) {
			var zip = (x, y) =>
				Array.from(Array(Math.max(x.length, y.length)), (_, i) => [x[i], y[i]]);
			var arrayobj = zip(mapamount, mapuser);

			names = arrayobj.map((person) => {
				return {
					loanAmount: person[0],
					borrowerId: person[1].substring(2),
				};
			});
		} else {
			alert(
				"Something is different with giving details of mapped user or user amount"
			);
		}
	}

	if (anytimeROI == "") {
		anytimeROI = null;
	}

	if (dealtype == "NORMAL") {
		var dealsubtype = $("#dealsubtype").val();

		if (dealsubtype == "") {
			$(".errordealsubtype").show();
			$("#loadingSec").hide();
			isValid = false;
		} else {
			$(".errordealsubtype").hide();
		}
	} else {
		var dealsubtype = null;
	}

	if (islifetimewaiver == "") {
		$(".errordealwaivertype").show();
		$("#loadingSec").hide();
		isValid = false;
	} else {
		$(".errordealwaivertype").hide();
	}

	if (islifetimewaiver == "true") {
		if (dealwaiverAmount == "") {
			$(".errorWaiverAmount").show();
			$("#loadingSec").hide();
			isValid = false;
		} else {
			$(".errorWaiverAmount").hide();
		}
	}

	if (dealName.length >= 100) {
		$("#loadingSec").hide();
		$(".dealLengtherror").show();

		isValid = false;
	} else {
		$(".dealLengtherror").hide();
	}
	if (dealtype == "") {
		$("#loadingSec").hide();
		$(".dealTypeError").show();

		isValid = false;
	} else {
		$(".dealTypeError").hide();
	}

	if (dealcreationNotification == "") {
		$(".errordealnotification").show();
		$("#loadingSec").hide();
		isValid = false;
	} else {
		$(".errordealnotification").hide();
		dealcreationNotification = JSON.parse(dealcreationNotification);
	}

	if (anyTimeWith == "") {
		$("#loadingSec").hide();
		$(".anttimewithError").show();
		isValid = false;
	} else {
		$(".anttimewithError").hide();
	}

    const loanActiveDatecheck = loanActiveDate.split("/");
	const fundsAcceptanceEndDatecheck = fundsAcceptanceEndDate.split("/");
	const dateStart = new Date(`${fundsAcceptanceEndDatecheck[2]}/${fundsAcceptanceEndDatecheck[1]}/${fundsAcceptanceEndDatecheck[0]}`);
	const dateEnd = new Date(`${loanActiveDatecheck[2]}/${loanActiveDatecheck[1]}/${loanActiveDatecheck[0]}`);

	const diffInDays = Math.round(
		(dateEnd - dateStart) / (1000 * 60 * 60 * 24)
	);


	if (diffInDays < 5){
		$("#loadingSec").hide();
	     alert("the difference between the end of funds and the first interest dates is more than 5 days");
		isValid = false;
	} else {
		$(".anttimewithError").hide();
	}



	if (lenderparticipationType == "") {
		$("#loadingSec").hide();
		$(".participcationLenderTypeError").show();
		isValid = false;
	} else {
		$(".participcationLenderTypeError").hide();
	}
	if (miniparticipationLimit == "") {
		$("#loadingSec").hide();
		$(".participationMinierror").show();
		isValid = false;
	} else {
		$(".participationMinierror").hide();
	}

	if (participationLimit == "") {
		$("#loadingSec").hide();
		$(".participationLimiterror").show();
		isValid = false;
	} else {
		$(".participationLimiterror").hide();
	}

	if (feeStatusToUser == "") {
		$("#loadingSec").hide();
		$(".errorFeeStatus").show();
		isValid = false;
	} else {
		$(".errorFeeStatus").hide();
	}

	var dealOpenStatus = $("#dealLunchType").val();
	var dealFutureDate = $("#dealLunchDate").val();
	var dealLaunchHoure = $("#dealLunchTimePicker").val();

	if (dealOpenStatus == "FUTURE") {
		if (dealFutureDate == "") {
			$("#loadingSec").hide();
			$(".dealLunchdateError").show();
			isValid = false;
		} else {
			$(".dealLunchdateError").hide();
		}

		if (dealFutureDate != fundsAcceptanceStartDate) {
			$("#loadingSec").hide();
			$(".dealLunchdateError").html(
				"Future Launch date and funds accepted date should be the same."
			);
			$(".dealLunchdateError").show();
			isValid = false;
		} else {
			$(".dealLunchdateError").hide();
		}

		if (dealLaunchHoure == "") {
			$("#loadingSec").hide();
			$(".deallunchHoursError").show();
			isValid = false;
		} else {
			$(".deallunchHoursError").hide();
		}
	}

	if (dealId == 0 || dealId == "0") {
		var dealChatId = $("#dealWhatsappChatId").val();
		var dealChatLink = $("#dealWhatsappDealLink").val();

		if (dealChatId == "" || dealChatId == null) {
			var dealChatId = null;
			var dealChatLink = null;
		} else if (dealChatId != "") {
			$("#loadingSec").hide();
			$(".dealChatidError").show();
			isValid = false;
		} else {
			$(".dealChatidError").hide();
		}

		if (convertEnd < convertStart) {
			$("#loadingSec").hide();
			$(".errorfundsEndDate").show();
			isValid = false;
		} else {
			$(".errorfundsEndDate").hide();
		}

		if (dealChatId != "" && dealChatLink == "") {
			$("#loadingSec").hide();
			$(".dealChatidLinkError").show();
			isValid = false;
		} else {
			$(".dealChatidLinkError").hide();
		}
	} else {
		var dealChatId = null;
		var dealChatLink = null;
	}

	if (isTest == false && dealtype == "TEST") {
		$("#loadingSec").hide();
		$("#isTestDealCreation").modal("show");
		$("#isTestDealCreation #testDealCheck").attr(
			"onclick",
			"createAdeal('" + dealId + "','" + loanrequestId + "','true')"
		);
		isValid = false;
	} else {
		isValid = true;
		$("#isTestDealCreation").modal("hide");
	}

	if (miniparticipationLimit < 4999) {
		$("#loadingSec").hide();
		$(".participationMinierror").html(
			"The minimum amount should be  INR 5000 "
		);
		$(".participationMinierror").show();
		isValid = false;
	} else {
		$(".participationMinierror").hide();
	}

	if (parseInt(miniparticipationLimit) > parseInt(maxparticipationLimit)) {
		$("#loadingSec").hide();
		$(".participationLimiterror").html(
			"The maximum amount should be greater than the minimum amount."
		);
		$(".participationLimiterror").show();
		isValid = false;
	} else {
		$(".participationLimiterror").hide();
	}

	if (parseInt(maxparticipationLimit) > parseInt(dealAmount)) {
		$("#loadingSec").hide();
		$(".participationLimiterror").html(
			"The maximum amount should not be greater than the deal amount."
		);
		$(".participationLimiterror").show();
		isValid = false;
	} else {
		$(".participationLimiterror").hide();
	}

	// if(dealcreationNotification=="true"){
	// 	 dealcreationNotification=JSON.parse(dealcreationNotification);
	// 	var whatsappNotification=true;
	// 	var emailNotification=true;

	// }else{
	//     dealcreationNotification=JSON.parse(dealcreationNotification);
	// 	var  whatsappNotification=false;
	// 	var emailNotification=false;
	// }

	if (userisIn == "local") {
		var createAdeal = apiBaseURLOXY + "updateDealsInformation";
	} else {
		var createAdeal = apiBaseURLOXY + "updateDealsInformation";
	}

	var postData = {
		dealId: dealId,
		dealName: dealName,
		borrowerName: borrowerName,
		dealAmount: dealAmount,
		fundsAcceptanceStartDate: fundsAcceptanceStartDate,
		fundsAcceptanceEndDate: fundsAcceptanceEndDate,
		borrowerRateOfInterest: borrowerRateOfInterest,
		dealLink: dealLink,
		duration: duration,
		satishOxyFoundingMonthlyInterest: satishOxyFoundingMonthlyInterest,
		satishOxyFoundingQuartelyInterest: satishOxyFoundingQuartelyInterest,
		satishOxyFoundingHalfInterest: satishOxyFoundingHalfInterest,
		satishOxyFoundingYearlyInterest: satishOxyFoundingYearlyInterest,
		satishOxyFoundingEndOfTheDealInterest:
			satishOxyFoundingEndOfTheDealInterest,
		oxyFoundingMonthlyInterest: oxyFoundingMonthlyInterest,
		oxyFoundingQuartelyInterest: oxyFoundingQuartelyInterest,
		oxyFoundingHalfInterest: oxyFoundingHalfInterest,
		oxyFoundingYearlyInterest: oxyFoundingYearlyInterest,
		oxyFoundingEndOfTheDealInterest: oxyFoundingEndOfTheDealInterest,
		oxyPremiumMonthlyInterest: oxyPremiumMonthlyInterest,
		oxyPremiumQuartelyInterest: oxyPremiumQuartelyInterest,
		oxyPremiumHalfInterest: oxyPremiumHalfInterest,
		oxyPremiumYearlyInterest: oxyPremiumYearlyInterest,
		oxyPremiumEndOfTheDealInterest: oxyPremiumEndOfTheDealInterest,
		newLendersMonthlyInterest: newLendersMonthlyInterest,
		newLendersQuartelyInterest: newLendersQuartelyInterest,
		newLendersHalfInterest: newLendersHalfInterest,
		newLendersYearlyInterest: newLendersYearlyInterest,
		newLendersEndOfTheDealInterest: newLendersEndOfTheDealInterest,
		loanActiveDate: loanActiveDate,
		whatappGroupNames: whatsappGroups,
		participationLimitToLenders: maxparticipationLimit,
		whatappMessageToLenders: whatappMessageToLenders,
		dealType: dealtype,
		feeROIforBorrower: roiBorrower,
		feeCollectedFromBorrower: feeBorrower,
		withdrawalStatus: anyTimeWith,
		withdrawalRoi: anytimeROI,
		participcationLenderType: lenderparticipationType,
		oxyLoanRequestId: loanrequestId,
		minimumPaticipationAmount: miniparticipationLimit,
		borrowersIdsMappedToDeal: mappedUsers,
		enachStatus: enachType,
		idsWithLoanAmount: names,
		dealSubtype: dealsubtype,
		whatsappChatId: dealChatId,
		whatsappResponseLink: dealChatLink,
		feeStatusToParticipate: feeStatusToUser,
		dealFutureDate: dealFutureDate,
		dealLaunchHoure: dealLaunchHoure,
		dealOpenStatus: dealOpenStatus,
		// processingFeePercentage: dealProcessingFee,
		lifeTimeWaiver: islifetimewaiver,
		lifeTimeWaiverLimit: dealwaiverAmount,
		dealCreationNotification: dealcreationNotification,
		whatsappNotification: dealwhatsappNotification,
		emailNotification: dealemailNotification,
	};

	    var postData = JSON.stringify(postData);
	    console.log(postData);

	if (isValid == true) {
		$.ajax({
			url: createAdeal,
			type: "PATCH",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				console.log(data);

				$("#loadingSec").hide();
				// window.scrollTo(0, 0);
				$("#showdealSuccessMessage").modal("show");
				notificationDealUsers(dealId, data.dealId, data.dealType);
				 autoInvestment(dealId, data.dealId, data.dealType);
			},
			error: function (xhr, textStatus, errorThrown) {
				$("#loadingSec").hide();

				if (arguments[0].responseJSON.errorCode == 108) {
					$("#showdealDealWarmimg").modal("show");
				}

				if (arguments[0].responseJSON.errorCode == 123) {
					$("#showborrowerloanderrormessage").modal("show");
				}

				if (arguments[0].responseJSON.errorCode == 121) {
					$("#showerrorfundsStartDate").modal("show");
				}

				console.log("Error Something");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", accessToken);
			},
		});
	}
	return isValid;
}

const notificationDealUsers = (dealId, creationId, dealType) => {
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	let dealNotification;
	if (userisIn == "local") {
		dealNotification =
			apiBaseURLOXY + `${creationId}/notification-after-deal-creation`;
	} else {
		dealNotification =
			apiBaseURLOXY + `${creationId}/notification-after-deal-creation`;
	}

	if ((dealId == 0 || dealId == "0") && dealType != "TEST") {
		fetch(dealNotification, {
			method: "GET",
			headers: {
				accessToken: accessToken,
			},
		})
			.then((response) => {
				if (response.ok) {
					console.log("notification was delivered");
				} else {
					throw new Error("Error Something");
				}
			})
			.catch((error) => {
				console.log("Error Something");
			});
	}
};

const autoInvestment = (dealId, dealCreation, dealType) => {
	console.log(dealId);
	console.log(dealType);

	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	let dealAutoInvestment="";
	if (userisIn == "local") {
		dealAutoInvestment = apiBaseURLOXY + `${dealCreation}/autolending`;
	} else {
		dealAutoInvestment = apiBaseURLOXY + `${dealCreation}/autolending`;
	}

	if ((dealId == 0 || dealId == "0") && dealType != "TEST") {
		fetch(dealAutoInvestment, {
			method: "POST",
			headers: {
				accessToken: accessToken,
			},
		})
			.then((response) => {
				if (response.ok) {
					console.log("Auto lend was success");
				} else {
					throw new Error("Error Something");
				}
			})
			.catch((error) => {
				console.log("Error Something");
			});
	}
};

const approvereferrebonus = async () => {
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	let getapprove;
	if (userisIn === "local") {
		getapprove = apiBaseURLOXY + "readingLenderReferenceInfo";
	} else {
		getapprove = apiBaseURLOXY + "readingLenderReferenceInfo";
	}

	try {
		const response = await fetch(getapprove, {
			method: "GET",
			headers: {
				accessToken: accessToken,
			},
		});

		if (response.ok) {
			$("#modal-referreamountapproved").modal("show");
		} else {
			console.log("Error Something");
		}
	} catch (error) {
		console.log("Error Something");
	}
};

//*******approve referee amount dashboard call *******

function loadapproverefereamount(readingCommentsOfRadhaSir) {
	$("#loadingSec").show();
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (readingCommentsOfRadhaSir != "0" || readingCommentsOfRadhaSir != "") {
		loadBoxforapproveamount(
			suserId,
			sprimaryType,
			saccessToken,
			readingCommentsOfRadhaSir
		);
	}

	id = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var adminUrl =
			apiBaseURLOXY + id + "/dashboard/" + "ADMIN" + "?current=false";
	} else {
		var adminUrl =
			apiBaseURLOXY + id + "/dashboard/" + "ADMIN" + "?current=false";
	}

	$.ajax({
		url: adminUrl,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$(".registeredusers").html(data.registeredUsersCount);
			$(".totalLenders").html(data.lendersCount);
			$(".totalBorrowers").html(data.borrowersCount);
			$(".todaysUsers").html(data.todayRegisteredUsersCount);
			$(".totalborrowersRequestedAmount").html(data.borrowersRequestedAmount);
			$(".totallendersCommitedAmount").html(data.lendersCommitedAmount);
			$(".toatalAgreements").html(data.noOfAggrements);
			$(".totalConversationStage").html(data.noOfConversationRequests);
			$(".totalOfferAmount").html(data.totalOfferAmount);
			$(".totalDisbursedAmount").html(data.totalDisbursedAmount);
			$("#loadingSec").hide();
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			alert(
				"****** You must login as a ADMIN before write comments for a borrower.****First login as a admin and then click on the link to write the comments."
			);

			if(userisIn=="local"){
				  window.location = "http://182.18.139.198/new/userlogin";

			}else{
             window.location = "https://www.oxyloans.com/new/userlogin";
			}
			
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadBoxforapproveamount(
	suserId,
	sprimaryType,
	saccessToken,
	readingCommentsOfRadhaSir
) {
	$("#loadBoxforapprovereferencebouns").modal("show");
}

const approvereferrebonusamount = (status) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let updateAmount;
	if (userisIn === "local") {
		updateAmount = apiBaseURLOXY + "readingCommentsOfRadhaSir";
	} else {
		updateAmount = apiBaseURLOXY + "readingCommentsOfRadhaSir";
	}

	const postData = JSON.stringify({ comments: status });

	fetch(updateAmount, {
		method: "PATCH",
		body: postData,
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (response.ok) {
				$("#loadBoxforapprovereferencebouns").modal("hide");
				$("#modal-referee-success").modal("show");
			} else {
				console.log("Error Something");
			}
		})
		.catch((error) => {
			console.log("Error Something");
		});
};

//***************view payment status **************************

const viewpaymentStatus = (id) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let getpaymentstatus;
	if (userisIn === "local") {
		getpaymentstatus = apiBaseURLOXY + id + "/displayingRefereePaymentStatus";
	} else {
		getpaymentstatus = apiBaseURLOXY + id + "/displayingRefereePaymentStatus";
	}

	fetch(getpaymentstatus, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (response.ok) {
				return response.json();
			} else {
				throw new Error("Error Something");
			}
		})
		.then((data) => {
			const template = document.getElementById("lpaymentstatus").innerHTML;
			Mustache.parse(template);
			const html = Mustache.to_html(template, { data: data });
			$("#lenderpaymentinfo").html(html);
			$("#modal-viewPaymentstatus").modal("show");
		})
		.catch((error) => {
			console.log("Error Something");
		});
};

function refereeRegisteredInfos(id) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + id + "/gettingAmountDetails";
	} else {
		var actOnLoan = apiBaseURLOXY + id + "/gettingAmountDetails";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.countOfParticipaticipations;
			if (data.countOfParticipaticipations == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById("borrowersinfo").innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, {
					data: data.lenderReferenceAmountResponse,
				});
				$("#binfo").html(html);
				$("#modal-viewEMI").modal("show");
				$("#disbursmentAmount").html(data.sumOfParticipatedAmount);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".acceptedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						var postData = {
							pageNo: num,
							pageSize: "10",
						};

						var postData = JSON.stringify(postData);

						if (userisIn == "local") {
							var actOnLoan = apiBaseURLOXY + id + "/gettingAmountDetails";
						} else {
							var actOnLoan = apiBaseURLOXY + id + "/gettingAmountDetails";
						}

						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template =
									document.getElementById("borrowersinfo").innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.lenderReferenceAmountResponse,
								});

								$("#binfo").html(html);
								$("#disbursmentAmount").html(data.sumOfDisbursementAmount);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadRefereepaymentlist() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + "lenderReferralBonusDetails";
	} else {
		var actOnLoan = apiBaseURLOXY + "lenderReferralBonusDetails";
	}
	$.ajax({
		url: actOnLoan,
		type: "GET",
		success: function (data, textStatus, xhr) {
			totalEntries = data.countOfReferees;
			if (data.length == 0) {
				$("#displayPaymentsinfo").show();
			} else {
				var template = document.getElementById("userPaymentstatus").innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.listOfLenderReferenceDetails,
				});
				$("#displayPaymentsinfo").html(html);

				var displayPageNo = totalEntries / 9;
				displayPageNo = displayPageNo + 1;
				$(".acceptedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						if (userisIn == "local") {
							var actOnLoan = apiBaseURLOXY + "lenderReferralBonusDetails";
						} else {
							var actOnLoan = apiBaseURLOXY + "lenderReferralBonusDetails";
						}
						$.ajax({
							url: actOnLoan,
							type: "GET",
							success: function (data, textStatus, xhr) {
								var template =
									document.getElementById("userPaymentstatus").innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.listOfLenderReferenceDetails,
								});
								$("#displayPaymentsinfo").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	$(".loadingSec").hide();
}

const referenceupdatedate = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const date = $("#approvedate").val();

	let updateDate;
	if (userisIn === "local") {
		updateDate = apiBaseURLOXY + "responseForReferenceBonus";
	} else {
		updateDate = apiBaseURLOXY + "responseForReferenceBonus";
	}

	const postData = JSON.stringify({ transferredOn: date });

	fetch(updateDate, {
		method: "PATCH",
		body: postData,
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (response.ok) {
				$("#modal-updatedate").modal("show");
				window.scrollTo(0, 0);
				$(".showdealSuccessMessage").show("slow");
				$("#loadingSec").hide();
			} else {
				throw new Error("Error Something");
			}
		})
		.catch((error) => {
			console.log("Error Something");
		});
};

function viewDealLenders(dealId) {
	$(".loadingSec").show();
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getDeals = apiBaseURLOXY + dealId + "/listOfLenders";
	} else {
		var getDeals = apiBaseURLOXY + dealId + "/listOfLenders";
	}

	$.ajax({
		url: getDeals,
		type: "GET",
		success: function (data, textStatus, xhr) {
			setTimeout(function (e) {
				$(".loadingSec").hide();
			}, 3000);

			if (data.lenderPaticipatedResponseDto.length == 0) {
				$(".noDatafound").show();
				$(".pinfo").html("0");
			} else {
				var template = document.getElementById("displayDealsScript").innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, {
					data: data.lenderPaticipatedResponseDto,
				});
				$("#displayDealsData").html(html);

				var psum = 0;
				$(".paticipatedAmountVal").each(function () {
					psum += +$(this).val();
				});
				$(".pinfo").html(psum);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".loadingSec").hide();
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewDeals(type) {
	$(".loading").show();
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getDeals = apiBaseURLOXY + "listOfDealsInformationForNormalDeals";
	} else {
		var getDeals = apiBaseURLOXY + "listOfDealsInformationForNormalDeals";
	}
	var postData = {
		pageNo: 1,
		pageSize: 10,
		dealType: type,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: getDeals,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			console.log(data);

			totalEntries = data.count;
			if (data.listOfBorrowersDealsResponseDto.length == 0) {
				$("#displayDelasInfo").show();
			} else {
				var template = document.getElementById("displayDealsScript").innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, {
					data: data.listOfBorrowersDealsResponseDto,
				});
				$("#displayDealsData").html(html);
				$(".loading").hide();

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;

				$(".dashBoardPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...
						var postData = {
							pageNo: num,
							pageSize: "10",
							dealType: type,
						};
						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var getDeals =
								apiBaseURLOXY + "listOfDealsInformationForNormalDeals";
						} else {
							var getDeals =
								apiBaseURLOXY + "listOfDealsInformationForNormalDeals";
						}
						$.ajax({
							url: getDeals,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template =
									document.getElementById("displayDealsScript").innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.listOfBorrowersDealsResponseDto,
								});
								$("#displayDealsData").html(html);
								$(".loading").hide();
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getDealInfo(dealId) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	$(".loadingSec").hide();

	if (dealId == 0) {
		return false;
	} else {
		if (userisIn == "local") {
			var loadDealInfo = apiBaseURLOXY + dealId + "/dealInformation";
		} else {
			var loadDealInfo = apiBaseURLOXY + dealId + "/dealInformation";
		}

		$.ajax({
			url: loadDealInfo,
			type: "GET",
			contentType: "application/json",
			success: function (data, textStatus, xhr) {
				console.log(data);
				dealId = dealId;

				var statusToDisplayTotalGroups = data.statusToDisplayTotalGroups;

				$("#dealName").val(data.dealName);
				$("#borrowerName").val(data.borrowerName);
				$("#dealAmount").val(data.dealAmount);
				$("#fundsAcceptanceStartDate").val(data.fundsAcceptanceStartDate);
				$("#fundsAcceptanceEndDate").val(data.fundsAcceptanceEndDate);
				$("#borrowerRateOfInterest").val(data.borrowerRateOfInterest);
				$("#dealLink").val(data.dealLink);
				$("#duration").val(data.duration);
				$("#loanActiveDate").val(data.loanActiveDate);
				$("#participationLimit").val(data.paticipationLimitToLenders);
				$("#whatstextmessage").val(data.messageSentToLenders);
				$("#roiBorrower").val(data.feeROIforBorrower);
				$("#feeBorrower").val(data.feeCollectedFromBorrower);
				$("#anyTimeWithRequest").val(data.withDrawalStatus);
				$(".participcationLenderType").val(data.participationLenderType);
				$("#dealtype").val(data.dealType);
				$("#mappedUsers").val(data.dealMappedToBorrowerId);
				$("#enachTypeUsers").val(data.enachStatus);
				$("#minimumLimit").val(data.minimumPaticipationAmount);

				$("#enachTypeUsers").val(data.enachStatus);
				$("#dealWhatsappDealLink").val(data.whatAppResponseUrl);
				$("#dealWhatsappChatId").val(data.whatsappGroupChatId);
				$("#feeParticipation").val(data.feeStatusToParticipate);
				$(".eachDealFeeToParticipate").val(data.processingFeePercentage);
				$(".dealwaiverAmounttext").val(data.lifeTimeWaiverLimit);

				// $("#enachTypeUsers").val("false");
				// Basic Info

				if (statusToDisplayTotalGroups == "Hide") {
					$(".displayHide1").hide();
					$(".setColumn").removeClass("col-md-2").addClass("col-md-4");

					$("#newLendersMonthlyInterest").val(
						data.getIndividualDealsInformation[1].monthlyInterest
					);
					$("#newLendersQuartelyInterest").val(
						data.getIndividualDealsInformation[1].quartelyInterest
					);
					$("#newLendersHalfInterest").val(
						data.getIndividualDealsInformation[1].halfInterest
					);
					$("#newLendersYearlyInterest").val(
						data.getIndividualDealsInformation[1].yearlyInterest
					);
					$("#newLendersEndOfTheDealInterest").val(
						data.getIndividualDealsInformation[1].endOfTheDealInterest
					);

					$("#oxyPremiumMonthlyInterest").val(
						data.getIndividualDealsInformation[0].monthlyInterest
					);
					$("#oxyPremiumQuartelyInterest").val(
						data.getIndividualDealsInformation[0].quartelyInterest
					);
					$("#oxyPremiumHalfInterest").val(
						data.getIndividualDealsInformation[0].halfInterest
					);
					$("#oxyPremiumYearlyInterest").val(
						data.getIndividualDealsInformation[0].yearlyInterest
					);
					$("#oxyPremiumEndOfTheDealInterest").val(
						data.getIndividualDealsInformation[0].endOfTheDealInterest
					);
				} else {
					$("#satishOxyFoundingMonthlyInterest").val(
						data.getIndividualDealsInformation[1].monthlyInterest
					);
					$("#satishOxyFoundingQuartelyInterest").val(
						data.getIndividualDealsInformation[1].quartelyInterest
					);
					$("#satishOxyFoundingHalfInterest").val(
						data.getIndividualDealsInformation[1].halfInterest
					);
					$("#satishOxyFoundingYearlyInterest").val(
						data.getIndividualDealsInformation[1].yearlyInterest
					);
					$("#satishOxyFoundingEndOfTheDealInterest").val(
						data.getIndividualDealsInformation[1].endOfTheDealInterest
					);

					$("#oxyFoundingMonthlyInterest").val(
						data.getIndividualDealsInformation[2].monthlyInterest
					);
					$("#oxyFoundingQuartelyInterest").val(
						data.getIndividualDealsInformation[2].quartelyInterest
					);
					$("#oxyFoundingHalfInterest").val(
						data.getIndividualDealsInformation[2].halfInterest
					);
					$("#oxyFoundingYearlyInterest").val(
						data.getIndividualDealsInformation[2].yearlyInterest
					);
					$("#oxyFoundingEndOfTheDealInterest").val(
						data.getIndividualDealsInformation[2].endOfTheDealInterest
					);
					$("#newLendersMonthlyInterest").val(
						data.getIndividualDealsInformation[0].monthlyInterest
					);
					$("#newLendersQuartelyInterest").val(
						data.getIndividualDealsInformation[0].quartelyInterest
					);
					$("#newLendersHalfInterest").val(
						data.getIndividualDealsInformation[0].halfInterest
					);
					$("#newLendersYearlyInterest").val(
						data.getIndividualDealsInformation[0].yearlyInterest
					);
					$("#newLendersEndOfTheDealInterest").val(
						data.getIndividualDealsInformation[0].endOfTheDealInterest
					);

					$("#oxyPremiumMonthlyInterest").val(
						data.getIndividualDealsInformation[3].monthlyInterest
					);
					$("#oxyPremiumQuartelyInterest").val(
						data.getIndividualDealsInformation[3].quartelyInterest
					);
					$("#oxyPremiumHalfInterest").val(
						data.getIndividualDealsInformation[3].halfInterest
					);
					$("#oxyPremiumYearlyInterest").val(
						data.getIndividualDealsInformation[3].yearlyInterest
					);
					$("#oxyPremiumEndOfTheDealInterest").val(
						data.getIndividualDealsInformation[3].endOfTheDealInterest
					);
				}

				if (data.dealType == "NORMAL") {
					$(".dealTypeSub").show();
					$(".dealsubtype").val(data.dealSubtype);
				} else {
					$(".dealTypeSub").hide();
				}

				var amount = "";
				var userid = "";

				if (data.idsWithLoanAmount != null) {
					for (var i = 0; i <= data.idsWithLoanAmount.length - 1; i++) {
						userid += data.idsWithLoanAmount[i].borrowerId + ",";
						amount += data.idsWithLoanAmount[i].loanAmount + ",";
					}
				}
				$("#userLoanAmpuntmap").val(amount.substr(0, amount.length - 1));
				$("#mappedUsers").val(userid.substr(0, userid.length - 1));

				if (data.withDrawalStatus == "YES") {
					$(".withdrawAmountRequest").show();
					$("#anytimeWithRoiText").val(data.withDrawalRoi);
				} else {
					$(".withdrawAmountRequest").hide();
					$("#anytimeWithRoiText").val(data.withDrawalRoi);
				}

				if (data.dealOpenStatus != null) {
					if (data.dealOpenStatus == "NOW") {
						$("#dealLunchType").val(data.dealOpenStatus);
					} else {
						$("#dealLunchType").val(data.dealOpenStatus);
						$(".dealLunchDate,.dealLunchTime").show();
						$("#dealLunchDate").val(data.dealFutureDate);
						$("#dealLunchTimePicker").val(data.dealLaunchHoure);
					}
				}

				if (data.lifeTimeWaiver == true) {
					$("#lifetimewaiver").val(data.lifeTimeWaiver.toString());
					$(".dealwaiverAmount").show();
				} else {
					$("#lifetimewaiver").val(
						data.lifeTimeWaiver == false
							? data.lifeTimeWaiver.toString()
							: "false"
					);
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
}

////////////hold reference amount//////

function holdreferenceamount(status) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateAmount = apiBaseURLOXY + "readingCommentsOfRadhaSir";
	} else {
		var updateAmount = apiBaseURLOXY + "readingCommentsOfRadhaSir";
	}
	var postData = { comments: status };

	var postData = JSON.stringify(postData);
	// alert(updateAmount);
	// alert(postData);

	$.ajax({
		url: updateAmount,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#loadBoxforapprovereferencebouns").modal("hide");
			$("#modal-referenceamount-hold").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function lenderDashboardCallTest() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var lrIDfromTEST = $(".lenderid").val();

	if (userisIn == "local") {
		var newdashboardcallURL = apiBaseURLOXY + lrIDfromTEST + "/testLenderDashboard";
	} else {
		var newdashboardcallURL = apiBaseURLOXY + lrIDfromTEST + "/testLenderDashboard";
	}
	console.log(newdashboardcallURL);

	$.ajax({
		url: newdashboardcallURL,
		type: "GET",

		success: function (data, textStatus, xhr) {
			// Only for the Wallet Transaction Start
			var template = document.getElementById(
				"principalAmtThroughWTransTpl"
			).innerHTML;
			Mustache.parse(template);
			var html1 = Mustache.to_html(template, {
				data: data.lenderPricipalAmountThroughWalletTransaction,
			});
			if (data.lenderPricipalAmountThroughWalletTransaction.length != 0) {
				$("#principalAmtThroughWTransData").html(html1);
			} else {
				$("#principalAmtThroughWTransData").html(
					"<tr><td class='norecordsfound' colspan='5'><br/>No Records<br/>&nbsp;</td></tr>"
				);
			}
			// Only for the Wallet Transaction End

			// Only for the Lender Interest Earned Start
			var template = document.getElementById(
				"lenderInterestEarnedTpl"
			).innerHTML;
			Mustache.parse(template);
			var html2 = Mustache.to_html(template, {
				data: data.lenderInterestEarned,
			});
			if (data.lenderInterestEarned.length != 0) {
				$("#lenderInterestEarnedData").html(html2);
			} else {
				$("#lenderInterestEarnedData").html(
					"<tr><td class='norecordsfound' colspan='5'><br/>No Records<br/>&nbsp;</td></tr>"
				);
			}
			// Only for the Lender Interest Earned End

			// Only for the Lender Interest Earned Start
			var template = document.getElementById(
				"lenderPrincipalReturnedDataTpl"
			).innerHTML;
			Mustache.parse(template);
			var html3 = Mustache.to_html(template, {
				data: data.lenderPrincipalReturned,
			});
			//alert(data.lenderPrincipalReturned.length);
			if (data.lenderPrincipalReturned.length != 0) {
				$("#lenderPrincipalReturnedData").html(html3);
			} else {
				$("#lenderPrincipalReturnedData").html(
					"<tr><td class='norecordsfound' colspan='5'><br/>No Records<br/>&nbsp;</td></tr>"
				);
			}
			// Only for the Lender Interest Earned End

			// Only for the Lender Interest Earned Start
			var template = document.getElementById("lenderWithDrawTpl").innerHTML;
			Mustache.parse(template);
			var html4 = Mustache.to_html(template, {
				data: data.lenderWithDraw,
			});
			// alert(data.lenderWithDraw.length);

			if (data.lenderWithDraw.length != 0) {
				$("#lenderWithDrawData").html(html4);
			} else {
				$("#lenderWithDrawData").html(
					"<tr><td class='norecordsfound' colspan='5'><br/>No Records<br/>&nbsp;</td></tr>"
				);
			}
			// Only for the Lender Interest Earned End

			$(".totalPrincipalInLending").html(data.totalPrincipalInLending);
			$(".sumOfInterestAmount").html(data.sumOfInterestAmount);
			$(".totalPrincipalOnFirstApril, .principalAsonApr1st").html(
				data.totalPrincipalOnFirstApril
			);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			console.log(xhr)
			if (xhr.status === 400) {
				var errorData = JSON.parse(xhr.responseText);
				// Extract the error message from the parsed response
				var errorMessage = errorData.errorCode;
							   
				// Show the modal dialog
				console.log(errorMessage)
				$("#modal-transactiondanger").modal("show");
				// Display the error message in the modal body
				$("#modal-transactiondanger .modal-body").html(errorMessage);
				 setTimeout(function () {
					location.reload();      
				}, 4000);                          
			}   
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getLenderDashBoard() {}

function loadAprrovedReferencelist() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + "lenderReferralBonusDetails";
	} else {
		var actOnLoan = apiBaseURLOXY + "lenderReferralBonusDetails";
	}
	$.ajax({
		url: actOnLoan,
		type: "GET",
		success: function (data, textStatus, xhr) {
			totalEntries = data.countOfReferees;
			if (data.length == 0) {
				$("#displayPaymentsinfo").show();
			} else {
				var template = document.getElementById("userPaymentstatus").innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.listOfLenderReferenceDetails,
				});
				$("#displayPaymentsinfo").html(html);
				$("#loadBoxforapprovereferencebouns").modal("show");
				var displayPageNo = totalEntries / 9;
				displayPageNo = displayPageNo + 1;
				$(".acceptedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...

						if (userisIn == "local") {
							var actOnLoan = apiBaseURLOXY + "lenderReferralBonusDetails";
						} else {
							var actOnLoan = apiBaseURLOXY + "lenderReferralBonusDetails";
						}

						$.ajax({
							url: actOnLoan,
							type: "GET",
							success: function (data, textStatus, xhr) {
								var template =
									document.getElementById("userPaymentstatus").innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.listOfLenderReferenceDetails,
								});
								$("#displayPaymentsinfo").html(html);
								$("#loadBoxforapprovereferencebouns").modal("show");
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	$(".loadingSec").hide();
}
//////FETCH LOAN OWNER NAME///

function getloanownernames() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateEmiUrlCard = apiBaseURLOXY + "getLoanOwners";
	} else {
		var updateEmiUrlCard = apiBaseURLOXY + "getLoanOwners";
	}

	$.ajax({
		url: updateEmiUrlCard,
		type: "GET",

		success: function (data, textStatus, xhr) {
			$("#loanOwner").empty();
			for (var i = 0; i < data.borrowersLoanOwnerNames.length; i++) {
				var loanowner = data.borrowersLoanOwnerNames[i].loanOwner;
				if (loanowner != "NA") {
					$("#loanOwner").append(
						'<option value="' + loanowner + '">' + loanowner + "</option>"
					);
				}
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}
//////edit reference details ************ start////

function edit_ReferenceDetails() {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var refereeId = $("#referenceID").val();
	refereeId = refereeId.substr(2);
	var referrerId = $("#referrerId").val();
	referrerId = referrerId.substr(2);
	var email = $("#userEmail").val();
	var mobileNumber = $("#userMobileNumber").val();
	var name = $("#refereeName").val();
	var primaryType = $("#primaryType").val();
	var status = $("#userstatus").val();
	var mailContent = $("#mailcontent").val();
	var mailSubject = $("#MailSubject").val();
	var comments = $("#superadmincomments").val();
	var referredOn = $("#approvedate").val();
	var amount = $("#referenceamount").val();

	if (userisIn == "local") {
		var updateDetails =
			apiBaseURLOXY +
			refereeId +
			"/" +
			referrerId +
			"/editingLenderReferenceDetails";
	} else {
		var updateDetails =
			apiBaseURLOXY +
			refereeId +
			"/" +
			referrerId +
			"/editingLenderReferenceDetails";
	}

	var postData = {
		refereeId: refereeId,
		referrerId: referrerId,
		email: email,
		mobileNumber: mobileNumber,
		name: name,
		primaryType: primaryType,
		status: status,
		mailContent: mailContent,
		mailSubject: mailSubject,
		comments: comments,
		referredOn: referredOn,
		amount: amount,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	$.ajax({
		url: updateDetails,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-editreferenceDetails").modal("show");
			setTimeout(function () {
				location.reload();
			}, 3000);
		},
		error: function(xhr, textStatus, errorThrown) {
			console.log("error");
			if (xhr.status === 400) {
				$("#modal-transactiondanger").modal("show");
				setTimeout(function () {
					location.reload();
				}, 4000);
			}
		},
		// error: function (request, error) {
		// 	console.log(responseJSON)
		// 	$(".modal-body #display_text").html(
		// 		arguments[0].responseJSON.errorMessage
		// 	);

		// 	if (arguments[0].responseJSON.errorCode == 108) {
		// 		$("#modal-displayAlreadyReferred").modal("show");
		// 	}
		// },

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

//////FETCH LENDER GROUP NAME///

function getlendergroupname() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateEmiUrlCard = apiBaseURLOXY + "listOfOxyLendersGroup";
	} else {
		var updateEmiUrlCard = apiBaseURLOXY + "listOfOxyLendersGroup";
	}

	$.ajax({
		url: updateEmiUrlCard,
		type: "GET",

		success: function (data, textStatus, xhr) {
			$("#editlendergroup").empty();
			for (var i = 0; i < data.length; i++) {
				var lenderGroup = data[i].lenderGroupName;
				if (lenderGroup != "NA") {
					$("#editlendergroup").append(
						'<option value="' + lenderGroup + '">' + lenderGroup + "</option>"
					);
				}
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

/////////UPDATE LENDER GROUP////////

function updateLenderGroup() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var lenderId = $(".editlenderId").val();
	lenderId = lenderId.substr(2);
	var payDate = $(".payDate").val();
	var payamount = $(".payuAmount").val();
	var transactionId = $(".tranctionIdAmount").val();

	var isValid = true;

	if (lenderId == "") {
		$(".lendrIderror").show();
		isValid = false;
	} else {
		$(".lendrIderror").hide();
	}

	if (payDate == "") {
		$(".paymentDateerror").show();
		isValid = false;
	} else {
		$(".paymentDateerror").hide();
	}

	if (payamount == "") {
		$(".payuAmounterror").show();
		isValid = false;
	} else {
		$(".payuAmounterror").hide();
	}

	if (transactionId == "") {
		$(".TransactionIderror").show();
		isValid = false;
	} else {
		$(".TransactionIderror").hide();
	}

	if (userisIn == "local") {
		var updatLenderGroup = apiBaseURLOXY + lenderId + "/updateLenderToGroup";
	} else {
		var updatLenderGroup = apiBaseURLOXY + lenderId + "/updateLenderToGroup";
	}

	var postData = {
		paymentDate: payDate,
		amount: payamount,
		txnNumber: transactionId,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);

	if (isValid == true) {
		$.ajax({
			url: updatLenderGroup,
			type: "POST",
			data: postData,
			contentType: "application/json",
			dataType: "json",

			success: function (data, textStatus, xhr) {
				window.scrollTo(0, 0);
				$(".payUupdateSuccessMessage").show("slow");
				setTimeout(function () {
					location.reload();
				}, 6000);
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");
				$(".warningmessage").html(arguments[0].responseJSON.errorMessage);
				if (arguments[0].responseJSON.errorCode == 403) {
					window.scrollTo(0, 0);
					$(".awarningMessage").show("slow");
				}
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

// ****************get the group lender list ///////

function getoxyfoundingGroup() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var groupname = "Satish#OXYFoundingLenders";

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + "listOfLendersMappedToGroup";
	} else {
		var actOnLoan = apiBaseURLOXY + "listOfLendersMappedToGroup";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
		groupName: groupname,
	};
	// alert(postData);
	var postData = JSON.stringify(postData);
	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.count;
			if (data.count == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById("getGrouplenderList").innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, {
					data: data.listOfLendersDetailsByGroupId,
				});
				$("#loadGetgroupName").html(html);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".interstedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...
						var postData = {
							pageNo: num,
							pageSize: "10",
							groupName: groupname,
						};
						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var actOnLoan = apiBaseURLOXY + "listOfLendersMappedToGroup";
						} else {
							var actOnLoan = apiBaseURLOXY + "listOfLendersMappedToGroup";
						}

						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template =
									document.getElementById("getGrouplenderList").innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.listOfLendersDetailsByGroupId,
								});
								$("#loadGetgroupName").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	// $(".loadingSec").hide();
}

function getoxyfoundingGroupsearch() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var groupname = $("#editlendergroup").val();

	if (userisIn == "local") {
		var actOnLoan = apiBaseURLOXY + "listOfLendersMappedToGroup";
	} else {
		var actOnLoan = apiBaseURLOXY + "listOfLendersMappedToGroup";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
		groupName: groupname,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.count;
			if (totalEntries == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById("getGrouplenderList").innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, {
					data: data.listOfLendersDetailsByGroupId,
				});
				$("#loadGetgroupName").html(html);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;

				$(".interstedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...
						var postData = {
							pageNo: num,
							pageSize: "10",
							groupName: groupname,
						};
						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var actOnLoan = apiBaseURLOXY + "listOfLendersMappedToGroup";
						} else {
							var actOnLoan = apiBaseURLOXY + "listOfLendersMappedToGroup";
						}

						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template =
									document.getElementById("getGrouplenderList").innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.listOfLendersDetailsByGroupId,
								});
								$("#loadGetgroupName").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	// $(".loadingSec").hide();
}

/////////AUTO GENERATED AGREEMENTS////////

function autoGeneratedAgreements() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var dealId = $(".dealId").val();
	var disbursedDate = $("#disbursement").val();

	if (userisIn == "local") {
		var updatLenderGroup =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			dealId +
			"/dealLevelAgreements";
	} else {
		var updatLenderGroup =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			dealId +
			"/dealLevelAgreements";
	}

	var postData = { disbursedDate: disbursedDate };

	var postData = JSON.stringify(postData);

	$.ajax({
		url: updatLenderGroup,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#modal-agreements-update").modal("show");
			setTimeout(function () {
				location.reload();
			}, 3000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

//***************displaylenderParticiaption******

function displaylenderParticiaption() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var dealId = $("#dealId").val();

	if (userisIn == "local") {
		var updateEmiUrlCard =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			dealId +
			"/participationAndDisbursmentPendingAmount";
	} else {
		var updateEmiUrlCard =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			dealId +
			"/participationAndDisbursmentPendingAmount";
	}

	$.ajax({
		url: updateEmiUrlCard,
		type: "GET",

		success: function (data, textStatus, xhr) {
			$("#dealparticiaptionid").val(data.dealId);
			var template = document.getElementById("particiaptionListTpl").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data });
			$("#particiaptionList").html(html);
			$(".lendersparticiaption").show();
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function parparticiaptionDisbursed(id) {
	$("#modal-Disbursementdate-Particiaption").modal("show");
}

/////////Deal id based disbursment////////

function dealIdDisbursment() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var dealId = $("#dealparticiaptionid").val();
	var disbursedDate = $("#dealDisbursementDate").val();

	if (userisIn == "local") {
		var dealLevelDisbursment =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			dealId +
			"/dealLevelDisbursment";
	} else {
		var dealLevelDisbursment =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			dealId +
			"/dealLevelDisbursment";
	}

	var postData = { disbursedDate: disbursedDate };

	var postData = JSON.stringify(postData);

	$.ajax({
		url: dealLevelDisbursment,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#modal-Disbursementdate-Particiaption").modal("hide");
			$("#modal-disbursementdatesuccess-dealLevel").modal("show");

			setTimeout(function () {
				location.reload();
			}, 5000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getwhatsappGroupsnames() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateEmiUrlCard = apiBaseURLOXY + "listOfWhatappGroupNames/groups";
	} else {
		var updateEmiUrlCard = apiBaseURLOXY + "listOfWhatappGroupNames/groups";
	}

	$.ajax({
		url: updateEmiUrlCard,
		type: "GET",

		success: function (data, textStatus, xhr) {
			$("#whatsappgroup").empty();

			let isNullWhatsAppNull = data.listOfWhatappGroups == null;
			if (isNullWhatsAppNull) return;

			for (var i = 0; i < data.listOfWhatappGroups.length; i++) {
				var whatsappGroupNames = data.listOfWhatappGroups[i].groupName;
				var whatsappChatid = data.listOfWhatappGroups[i].chatId;
				if (whatsappGroupNames != "NA") {
					$("#whatsappgroup").append(
						// '<option value="' +loanowner + '">' +loanowner + "</option>"

						'<label for="' +
							whatsappGroupNames +
							'"><input type="checkbox" value="' +
							whatsappChatid +
							'"/>' +
							whatsappGroupNames +
							"</label>"
					);
				}
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getoxyfoundingwalletBlans() {
	$("#profit-submit-btn").attr("disabled", true);

	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var foundingGroup = $("#editlendergroups").val();

	if (userisIn == "local") {
		var dealLevelDisbursment =
			apiBaseURLOXY + "checking-testlender-current-wallet-balance";
	} else {
		var dealLevelDisbursment =
			apiBaseURLOXY + "checking-current-wallet-balance";
	}

	var postData = {
		walletAmountType: foundingGroup,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: dealLevelDisbursment,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#profit-submit-btn").attr(
				"data-downloadurs",
				data.lenderWalletsExcelLink
			);
			var template = document.getElementById(
				"displayOxyfoundingWalletsblans"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, {
				data: data.listOfLenderCurrentWalletBalanceResponse,
			});
			$("#profit-submit-btn").attr("disabled", false);
			$("#displayWalletsBalns").html(html);
			$(".getoxyfoundingwallets,#profit-submit-btn").show();
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$("#profit-submit-btn").attr("disabled", false);
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function sendingWhatsAppNotification() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var whatsappGroupNotification =
			apiBaseURLOXY + "notificationsToLendersForPendingAction";
	} else {
		var whatsappGroupNotification =
			apiBaseURLOXY + "notificationsToLendersForPendingAction";
	}

	$.ajax({
		url: whatsappGroupNotification,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$("#lenderwhatsappNotification").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function commitmentamountnotification() {
	$("#modal-dealnotificationforcommitmentamount").modal("show");
}

function commitmentnotificationtolender() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var dealname = $("#dealName").val();
	if (dealname == "") {
		$(".commitmentnotification").show();
	}

	var whatsappGroup = "";
	$("input[type=checkbox]:checked").each(function () {
		if (this.checked) {
			whatsappGroup += $(this).val() + ",";
		}
	});
	whatsappGroup = whatsappGroup.substring(0, whatsappGroup.length - 1);

	if (userisIn == "local") {
		var whatsappnotification = apiBaseURLOXY + "readingCommittmentAmount";
	} else {
		var whatsappnotification = apiBaseURLOXY + "readingCommittmentAmount";
	}

	var postData = {
		dealName: dealname,
		whatappGroupNames: whatsappGroup,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: whatsappnotification,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#modal-dealnotificationforcommitmentamount").modal("hide");
			$("#lenderwhatsappNotification").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function notificationforlendingCommitment() {
	$("#modal-readingLendingCommitmentAmount").modal("show");
}

function commitmentnotificationtolender() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var dealname = $("#lendingdealNames").val();

	if (dealname == "") {
		$(".lendingdealName").show();
	}

	if (userisIn == "local") {
		var whatsappnotification = apiBaseURLOXY + "readingParticipationAmounts";
	} else {
		var whatsappnotification = apiBaseURLOXY + "readingParticipationAmounts";
	}

	var postData = {
		dealName: dealname,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: whatsappnotification,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#modal-readingLendingCommitmentAmount").modal("hide");
			$("#lenderwhatsappNotification").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getoxyfoundingamountInfo() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var groupname = $("#editlendergroup").val();
	var month = $("#summonth").val();
	var year = $("#sumYear").val();

	if (userisIn == "local") {
		var getamountinfo = apiBaseURLOXY + "sumOfDealsAmountByLendersGroup";
	} else {
		var getamountinfo = apiBaseURLOXY + "sumOfDealsAmountByLendersGroup";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
		groupName: groupname,
		month: month,
		year: year,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: getamountinfo,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalNumberOfDeals;

			$(".till-ParticipationYear").html(data.givenMonthAndYear);
			$(".till-ParticipationDate").html(data.currentDate);

			$(".oxywalletinfo").html(data.totalDealsAmount);
			$(".totalDealAmountMonth").html(data.totalDealAmountByMonthAndYear);
			$(".dealamointinfo").show();
			var template = document.getElementById("OxyfoundingAmountInfo").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, {
				data: data.individualDealsInformation,
			});
			$("#displayAmountInfo").html(html);

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".viewLenderwalletsinfo")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...
					var postData = {
						pageNo: num,
						pageSize: "10",
						groupName: groupname,
						month: month,
						year: year,
					};
					var postData = JSON.stringify(postData);

					if (userisIn == "local") {
						var getamountinfo =
							apiBaseURLOXY + "sumOfDealsAmountByLendersGroup";
					} else {
						var getamountinfo =
							apiBaseURLOXY + "sumOfDealsAmountByLendersGroup";
					}

					$.ajax({
						url: getamountinfo,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							$(".till-ParticipationYear").html(data.givenMonthAndYear);
							$(".till-ParticipationDate").html(data.currentDate);
							$(".oxywalletinfo").html(data.totalDealsAmount);
							$(".totalDealAmountMonth").html(
								data.totalDealAmountByMonthAndYear
							);
							$(".dealamointinfo").show();
							var template = document.getElementById(
								"OxyfoundingAmountInfo"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.individualDealsInformation,
							});
							$("#displayAmountInfo").html(html);
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	// $(".loadingSec").hide();
}

$(document).ready(function () {
	$("#whatsPreview").click(function () {
		var content = $("#whatsappcontent").val();
		$(".wtmessage").html(content);
		$("#modal-previewEmail").modal("show");
	});
});

function whatsappcampagin() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");
	$("#loadingSec").show();

	var whatsappmeaasage = $("#whatsappcontent").val();

	var whatsappGroup = "";
	$("input[type=checkbox]:checked").each(function () {
		if (this.checked) {
			whatsappGroup += $(this).val() + ",";
		}
	});
	whatsappGroup = whatsappGroup.substring(0, whatsappGroup.length - 1);

	if (userisIn == "local") {
		var whatsappcompaign = apiBaseURLOXY + "sendwhatsAppCampaignMessage";
	} else {
		var whatsappcompaign = apiBaseURLOXY + "sendwhatsAppCampaignMessage";
	}

	var postData = {
		message: whatsappmeaasage,
		whatsappGroupNames: whatsappGroup,
		messageType: "campaign",
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: whatsappcompaign,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#loadingSec").hide();

			window.scrollTo(0, 0);
			$(".showdealSuccessMessage").show("slow");
			$("#loadingSec").hide();
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

//////FETCH DEAL NAMES///

function fetchdealnames() {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var listofDeal = apiBaseURLOXY + "listOfDealNames";
	} else {
		var listofDeal = apiBaseURLOXY + "listOfDealNames";
	}

	$.ajax({
		url: listofDeal,
		type: "GET",

		success: function (data, textStatus, xhr) {
			$("#dealName").empty();
			for (var i = 0; i < data.totalWhatappGroupsCount; i++) {
				var dealname = data.listOfWhatappGroups[i].dealName;
				if (dealname != "NA") {
					$("#dealName").append(
						'<option value="' + dealname + '">' + dealname + "</option>"
					);
				}
			}

			$("#dealNames").empty();
			for (var i = 0; i < data.totalWhatappGroupsCount; i++) {
				var dealname = data.listOfWhatappGroups[i].dealName;
				if (dealname != "NA") {
					$("#dealNames").append(
						'<option value="' + dealname + '">' + dealname + "</option>"
					);
				}
			}

			$("#lendingdealNames").empty();
			for (var i = 0; i < data.totalWhatappGroupsCount; i++) {
				var dealname = data.listOfWhatappGroups[i].dealName;
				if (dealname != "NA") {
					$("#lendingdealNames").append(
						'<option value="' + dealname + '">' + dealname + "</option>"
					);
				}
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

// **********download lender wallets amount*****************

function downloadLenderWallets() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var downloadUrl = $("#profit-submit-btn").attr("data-downloadurs");

	window.open(downloadUrl, "_blank");

	// var groupname = $("#editlendergroup").val();

	// if (userisIn == "local") {
	// 	var excel = apiBaseURLOXY + "currentWalletBalanceExcelSheet";
	// } else {
	// 	var excel = apiBaseURLOXY + "currentWalletBalanceExcelSheet";
	// }

	// var postData = {
	// 	groupName: groupname,
	// };

	// var postData = JSON.stringify(postData);

	// $.ajax({
	// 	url: excel,
	// 	type: "POST",
	// 	data: postData,
	// 	contentType: "application/json",
	// 	dataType: "json",

	// 	success: function (data, textStatus, xhr) {
	//
	// 		window.open(data.lenderWalletsExcelLink, "_blank");
	// 	},
	// 	error: function (xhr, textStatus, errorThrown) {
	// 		console.log("Error Something");
	// 	},
	// 	beforeSend: function (xhr) {
	// 		xhr.setRequestHeader("accessToken", saccessToken);
	// 	},
	// });
}

function viewEquityDeals(type, dealname) {
	$(".loading").show();
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getDeals =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			suserId +
			"/listOfDealsInformationForEquityDeals";
	} else {
		var getDeals =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			suserId +
			"/listOfDealsInformationForEquityDeals";
	}
	var postData = {
		pageNo: 1,
		pageSize: 10,
		dealType: type,
		dealName: dealname,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: getDeals,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.count;

			if (totalEntries == 0) {
				$("#displayDelasInfo").show();
			} else {
				var template = document.getElementById("displayDealsScript").innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, {
					data: data.listOfBorrowersDealsResponseDto,
				});
				$("#displayDealsData").html(html);
				$(".loading").hide();
			}

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".dashBoardPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					//$(".content4").html("Page " + num); // or some ajax content loading...
					var postData = {
						pageNo: num,
						pageSize: "10",
						dealType: type,
						dealName: dealname,
					};
					var postData = JSON.stringify(postData);
					if (userisIn == "local") {
						var getDeals =
							"http://35.154.48.120:8080/oxynew/v1/user/" +
							suserId +
							"/listOfDealsInformationForEquityDeals";
					} else {
						var getDeals =
							"https://fintech.oxyloans.com/oxyloans/v1/user/" +
							suserId +
							"/listOfDealsInformationForEquityDeals";
					}
					$.ajax({
						url: getDeals,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							totalEntries = data.count;

							if (totalEntries == 0) {
								$("#displayDelasInfo").show();
							} else {
								var template =
									document.getElementById("displayDealsScript").innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.listOfBorrowersDealsResponseDto,
								});
								$("#displayDealsData").html(html);
								$(".loading").hide();
							}
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	// $(".loadingSec").hide();
}

function viewClosedDeals() {
	$(".loading").show();
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getDeals = apiBaseURLOXY + "closedDealsInformation";
	} else {
		var getDeals = apiBaseURLOXY + "closedDealsInformation";
	}
	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: getDeals,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.closedDealsCount;

			if (data.closedDealsCount == null) {
				$("#closedDealNodata").show();
			} else {
				var template = document.getElementById("displayDealsScript").innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, {
					data: data.borrowersDealsResponseDto,
				});
				$("#displayDealsData").html(html);
				$(".loading").hide();

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;

				$(".dashBoardPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...
						var postData = {
							pageNo: num,
							pageSize: "10",
						};
						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var getDeals = apiBaseURLOXY + "closedDealsInformation";
						} else {
							var getDeals = apiBaseURLOXY + "closedDealsInformation";
						}
						$.ajax({
							url: getDeals,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template =
									document.getElementById("displayDealsScript").innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.borrowersDealsResponseDto,
								});
								$("#displayDealsData").html(html);
								$(".loading").hide();
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	// $(".loadingSec").hide();
}

function getwhatsappGroupsnamess() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var updateEmiUrlCard = apiBaseURLOXY + "listOfWhatappGroupNames/groups";
	} else {
		var updateEmiUrlCard = apiBaseURLOXY + "listOfWhatappGroupNames/groups";
	}

	$.ajax({
		url: updateEmiUrlCard,
		type: "GET",

		success: function (data, textStatus, xhr) {
			$("#whatsappgroup").empty();
			for (var i = 0; i < data.listOfWhatappGroups.length; i++) {
				var whatsappGroupNames = data.listOfWhatappGroups[i].groupName;
				var whatsappChatIds = data.listOfWhatappGroups[i].chatId;

				if (whatsappGroupNames != "NA") {
					$("#whatsappgroup").append(
						// '<option value="' +loanowner + '">' +loanowner + "</option>"

						'<label for="' +
							whatsappGroupNames +
							'"><input type="checkbox" value="' +
							whatsappChatIds +
							'"/>' +
							whatsappGroupNames +
							"</label>"
					);
				}
			}
			$("#whatsappgroups").empty();
			for (var i = 0; i < data.listOfWhatappGroups.length; i++) {
				var whatsappGroupNames = data.listOfWhatappGroups[i].groupName;
				var whatsappChatIds = data.listOfWhatappGroups[i].chatId;
				if (whatsappGroupNames != "NA") {
					$("#whatsappgroups").append(
						// '<option value="' +loanowner + '">' +loanowner + "</option>"

						'<label for="' +
							whatsappGroupNames +
							'"><input type="checkbox" value="' +
							whatsappChatIds +
							'"/>' +
							whatsappGroupNames +
							"</label>"
					);
				}
			}

			$("#listLendingCommitment").empty();
			for (var i = 0; i < data.listOfWhatappGroups.length; i++) {
				var whatsappGroupNames = data.listOfWhatappGroups[i].groupName;
				var whatsappChatIds = data.listOfWhatappGroups[i].chatId;
				if (whatsappGroupNames != "NA") {
					$("#listLendingCommitment").append(
						'<label for="' +
							whatsappGroupNames +
							'"><input type="checkbox" value="' +
							whatsappChatIds +
							'"/>' +
							whatsappGroupNames +
							"</label>"
					);
				}
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function notificationforlender() {
	$("#modal-dealnotificationforlender").modal("show");
}

function sendingWhatsAppNotification() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var dealname = $("#dealNames").val();
	var whatsappGroup = "";
	$("input[type=checkbox]:checked").each(function () {
		if (this.checked) {
			whatsappGroup += $(this).val() + ",";
		}
	});
	whatsappGroup = whatsappGroup.substring(0, whatsappGroup.length - 1);

	var postData = {
		dealName: dealname,
		sentToWhatsappGorups: whatsappGroup,
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var whatsappGroupNotification =
			apiBaseURLOXY + "notificationsToLendersForPendingAction";
	} else {
		var whatsappGroupNotification =
			apiBaseURLOXY + "notificationsToLendersForPendingAction";
	}

	$.ajax({
		url: whatsappGroupNotification,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-dealnotificationforlender").modal("hide");
			$("#lenderwhatsappNotification").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}


//****************To send mail to referres about the referral bonus*************

function sendemailtoreferres() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var referre = apiBaseURLOXY + "sendingReferenceInfo";
	} else {
		var referre = apiBaseURLOXY + "sendingReferenceInfo";
	}

	$.ajax({
		url: referre,
		type: "GET",

		success: function (data, textStatus, xhr) {
			window.scrollTo(0, 0);
			$(".showSuccessMessage").show("slow");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}




//////************cic repo and update ///////////////////////

function cicaddinfo() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userId = $("#cicuserid").val();
	var dealId = $("#cicDealID").val();
	var dateOfDisbursment = $("#cicDisbursments").val();
	var disbursedAmount = $("#cicDisbursedamount").val();
	var rateOfInterest = $("#cicroi").val();
	var tenure = $("#Tenurecic").val();
	userId = userId.substr(2);

	if (dateOfDisbursment == "") {
		dateOfDisbursment = null;
	} else {
		var [date3, month3, year3] = dateOfDisbursment.split("-");
		dateOfDisbursment = date3 + month3 + year3;
	}

	var isValid = true;

	if (userId == "") {
		$(".errorcicuserid").show();
		isValid = false;
	} else {
		$(".errorcicuserid").hide();
	}

	if (dealId == "") {
		$(".errorcicDealID").show();
		isValid = false;
	} else {
		$(".errorcicDealID").hide();
	}

	

	if (userisIn == "local") {
		var cicurl = apiBaseURLOXY + "addingCICdataBasedOnId";
	} else {
		var cicurl = apiBaseURLOXY + "addingCICdataBasedOnId";
	}

	var postData = {
		userId: userId,
		dealId: dealId,
		dateOfDisbursment: dateOfDisbursment,
		disbursedAmount: disbursedAmount,
		rateOfInterest: rateOfInterest,
		tenure: tenure,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	if (isValid == true) {
		$.ajax({
			url: cicurl,
			type: "PATCH",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				$("#modal-cicsuccessinfo #display_text").html(
					"you have successfully added the cic data"
				);
				$("#modal-cicsuccessinfo").modal("show");
			},
			error: function (request, error) {
				$("#modal-cicsuccessinfo")
					.removeClass(".modal-success")
					.addClass(".modal-danger");
				$("#modal-cicsuccessinfo #display_text").html(
					arguments[0].responseJSON.errorMessage
				);

				$("#modal-cicsuccessinfo").modal("show");

				
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

function cicupdate() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userId = $("#updatecicuseric").val();
	var dateOfLastPayment = $("#ciclastdate").val();
	var dateClosed = $("#cicdateclosed").val();
	var currentBalance = $("#ciccurrentbalance").val();
	var amountOverDue = $("#cicoverdue").val();
	var noOfDaysPastDue = $("#cicnoofdayspastdue").val();
	userId = userId.substr(2);

	var isValid = true;

	if (dateClosed == "") {
		dateClosed = null;
	} else {
		var [data1, month2, year1] = dateClosed.split("-");
		dateClosed = data1 + month2 + year1;
	}

	if (dateOfLastPayment == "") {
		dateOfLastPayment = null;
	} else {
		var [data, month, year] = dateOfLastPayment.split("-");
		dateOfLastPayment = data + month + year;
	}

	if (userId == "") {
		$(".errorupdatecicuseric").show();
		isValid = false;
	} else {
		$(".errorupdatecicuseric").hide();
	}

	

	if (userisIn == "local") {
		var cicurl = apiBaseURLOXY + "updatingCICdataBasedOnUserId";
	} else {
		var cicurl = apiBaseURLOXY + "updatingCICdataBasedOnUserId";
	}

	var postData = {
		userId: userId,
		dateOfLastPayment: dateOfLastPayment,
		dateClosed: dateClosed,
		currentBalance: currentBalance,
		amountOverDue: amountOverDue,
		noOfDaysPastDue: noOfDaysPastDue,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	if (isValid == true) {
		$.ajax({
			url: cicurl,
			type: "PATCH",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				window.scrollTo(0, 0);
				$("#modal-cicsuccessinfo #display_text").html(
					"you have successfully updated the cic data"
				);
				$("#modal-cicsuccessinfo").modal("show");
			},
			error: function (request, error) {
				$("#modal-cicsuccessinfo")
					.removeClass(".modal-success")
					.addClass(".modal-danger");
				$("#modal-cicsuccessinfo #display_text").html(
					arguments[0].responseJSON.errorMessage
				);
				$("#modal-cicsuccessinfo").modal("show");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

//*************************** end repo ***************************

///****************lender participation deal on admin side********************

function lenderparticipationdeal() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var userId = $("#participatedlenderid").val();
	var groupId = $("#lendergroupid").val();
	var dealId = $("#participateddealid").val();
	var participatedAmount = $(".participatedAmount").val();
	var lenderReturnType = $("#returnType").val();
	var rateofInterest = $("#lenderroi").val();
	var processingFee = $("#feeforprocessing").val();
	userId = userId.substr(2);
	var isValid = true;

	if (userId == "") {
		$(".erroruserid").show();
		isValid = false;
	} else {
		$(".erroruserid").hide();
	}

	if (groupId == "") {
		$(".lenderparticipategroup").show();
		isValid = false;
	} else {
		$(".lenderparticipategroup").hide();
	}

	if (dealId == "") {
		$(".errordealid").show();

		isValid = false;
	} else {
		$(".errordealid").hide();
	}

	if (participatedAmount == "") {
		$(".errorParticipatedAmount").show();
		isValid = false;
	} else {
		$(".errorParticipatedAmount").hide();
	}

	if (lenderReturnType == "") {
		$(".errortype").show();
		isValid = false;
	} else {
		$(".errortype").hide();
	}

	if (rateofInterest == "") {
		$(".erroruseRoi").show();
		isValid = false;
	} else {
		$(".erroruseRoi").hide();
	}

	if (processingFee == "") {
		$(".erroruserprocessing").show();
		isValid = false;
	} else {
		$(".erroruserprocessing").hide();
	}

	if (userisIn == "local") {
		var participationDeal = apiBaseURLOXY + "updatingLenderDeal";
	} else {
		var participationDeal = apiBaseURLOXY + "updatingLenderDeal";
	}
	

	var postData = {
		userId: userId,
		groupId: groupId,
		dealId: dealId,
		participatedAmount: participatedAmount,
		lenderReturnType: lenderReturnType,
		rateofInterest: rateofInterest,
		processingFee: processingFee,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	if (isValid == true) {
		$.ajax({
			url: participationDeal,
			type: "PATCH",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				$(".lenderParticipationinDeal").show("show");
				// setTimeout(function () {
				//                  location.reload();
				//                   }, 5000);
			},
			error: function (request, error) {
				$(".modal-body #display_text").html(
					arguments[0].responseJSON.errorMessage
				);
				if (arguments[0].responseJSON.errorCode == 106) {
					$("#modal-displaylenderfeenotpaid").modal("show");
				}
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

//*************************EQUITY LENDERS*******************************

function equityLenders() {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var equityLenders = apiBaseURLOXY + "lendersInAllEquityDeals";
	} else {
		var equityLenders = apiBaseURLOXY + "lendersInAllEquityDeals";
	}

	$.ajax({
		url: equityLenders,
		type: "GET",

		success: function (data, textStatus, xhr) {
			var template = document.getElementById("equityLendersinfo").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.equityFoundingLendersDto,
			});
			$("#displayEquitylenders").html(html);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

const payuTransactionslist = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const d = new Date();
	const month = [
		"January",
		"February",
		"March",
		"April",
		"May",
		"June",
		"July",
		"August",
		"September",
		"October",
		"November",
		"December",
	];

	const currMonth = month[d.getMonth()];
	const currYear = d.getFullYear();

	const emiDetails =
		userisIn == "local"
			? `${apiBaseURLOXY}getEcsAndNonEcsPaymentHistory/${currMonth}/${currYear}`
			: `${apiBaseURLOXY}getEcsAndNonEcsPaymentHistory/${currMonth}/${currYear}`;

	const options = {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	};

	fetch(emiDetails, options)
		.then((response) => response.json())
		.then((data) => {
			const template = document.getElementById("payuTransactions").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.lenderPayuDetails,
			});
			$("#displayPayulenders").html(html);
		})
		.catch((error) => {
			console.log("Error: ", error);
		});
};

function updatePayUtransaction() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var payUuserId = $(".payuUserId").val();
	var payDate = $(".payDate").val();
	var dealId = $(".payDealId").val();
	var payamount = $(".payuAmount").val();
	payUuserId = payUuserId.substr(2);

	if (userisIn == "local") {
		var updatPay = apiBaseURLOXY + "lenderPayuDetailsInsertion";
	} else {
		var updatPay = apiBaseURLOXY + "lenderPayuDetailsInsertion";
	}

	var postData = {
		userId: payUuserId,
		paymentDate: payDate,
		dealId: dealId,
		amount: payamount,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: updatPay,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			window.scrollTo(0, 0);
			$(".payUupdateSuccessMessage").show("slow");

			setTimeout(function () {
				location.reload();
			}, 4000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".warningmessage").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 403) {
				window.scrollTo(0, 0);
				$(".awarningMessage").show("slow");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function participatedLendersExcel(dealId) {
	$(".participationLenders").attr("disabled", true);

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getDeals = apiBaseURLOXY + dealId + "/listOfLenders";
	} else {
		var getDeals = apiBaseURLOXY + dealId + "/listOfLenders";
	}

	$.ajax({
		url: getDeals,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$(".participationLenders").attr("disabled", false);
			window.open(data.participatedLendersExcel, "_blank");
		},
		error: function (xhr, textStatus, errorThrown) {
			$(".participationLenders").attr("disabled", true);
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function paytmTransactions() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var d = new Date();
	var month = new Array();
	month[0] = "January";
	month[1] = "February";
	month[2] = "March";
	month[3] = "April";
	month[4] = "May";
	month[5] = "June";
	month[6] = "July";
	month[7] = "August";
	month[8] = "September";
	month[9] = "October";
	month[10] = "November";
	month[11] = "December";
	var currMonth = month[d.getMonth()];
	var currYear = d.getFullYear();

	if (userisIn == "local") {
		var getDeals =
			apiBaseURLOXY + "getPaytmDetails/" + currMonth + "/" + currYear;
	} else {
		var getDeals =
			apiBaseURLOXY + "getPaytmDetails/" + currMonth + "/" + currYear;
	}
	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: getDeals,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			if (totalEntries == 0) {
				$(".displayNoRecords").show();
			} else {
				var template = document.getElementById("displayPaytm").innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, {
					data: data.paytmResponseDto,
				});
				$("#displayPaytmTransactions").html(html);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;

				$(".viewPaytmdetails")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...
						var postData = {
							pageNo: num,
							pageSize: "10",
						};
						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var getDeals =
								apiBaseURLOXY + "getPaytmDetails/" + currMonth + "/" + currYear;
						} else {
							var getDeals =
								apiBaseURLOXY + "getPaytmDetails/" + currMonth + "/" + currYear;
						}
						$.ajax({
							url: getDeals,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template =
									document.getElementById("displayPaytm").innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.paytmResponseDto,
								});
								$("#displayPaytmTransactions").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	// $(".loadingSec").hide();
}

function paytmTransactionsSearch() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var month = $("#paytmMonth").val();
	var year = $(".paytmyear").val();

	if (userisIn == "local") {
		var getDeals = apiBaseURLOXY + "getPaytmDetails/" + month + "/" + year;
	} else {
		var getDeals = apiBaseURLOXY + "getPaytmDetails/" + month + "/" + year;
	}
	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: getDeals,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			if (totalEntries == 0) {
				$(".displayNoRecords").show();
			} else {
				$(".viewPaytmdetails").hide();
				var template = document.getElementById("displayPaytm").innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, {
					data: data.paytmResponseDto,
				});
				$("#displayPaytmTransactions").html(html);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;

				$(".viewPaytmdetailsSearch")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...
						var postData = {
							pageNo: num,
							pageSize: "10",
						};
						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var getDeals =
								apiBaseURLOXY + "getPaytmDetails/" + month + "/" + year;
						} else {
							var getDeals =
								apiBaseURLOXY + "getPaytmDetails/" + month + "/" + year;
						}
						$.ajax({
							url: getDeals,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								$(".viewPaytmdetails").hide();
								var template =
									document.getElementById("displayPaytm").innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.paytmResponseDto,
								});
								$("#displayPaytmTransactions").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	// $(".loadingSec").hide();
}

//*************************EQUITY New LENDERS ***** livin
function equitynewLenders() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var equityLenders = apiBaseURLOXY + "lendersInAllEquityDeals";
	} else {
		var equityLenders = apiBaseURLOXY + "lendersInAllEquityDeals";
	}

	$.ajax({
		url: equityLenders,
		type: "GET",

		success: function (data, textStatus, xhr) {
			var template = document.getElementById("equityLendersinfo").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.equityNewLendersDto,
			});
			$("#displayEquitylenders").html(html);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function lenderInterestInfo(dealId) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var month = $("#months").val();
	var year = $("#dealyear").val();

	interestMonth = month;
	interestYear = year;

	if (userisIn == "local") {
		var whatsappGroupNotification =
			apiBaseURLOXY + dealId + "/" + month + "/" + year + "/interestdetails";
	} else {
		var whatsappGroupNotification =
			apiBaseURLOXY + dealId + "/" + month + "/" + year + "/interestdetails";
	}

	$.ajax({
		url: whatsappGroupNotification,
		type: "GET",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("lenderInterestMonthly").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.dealLevelLoanEmiCardInformation,
			});
			$("#loadGetgroupName").html(html);
			$(".firstInterestDate").html(data.interestStartDate);
			$(".totalInterestValue").html(data.totalAmount);
			$(".dealName").html(data.dealName);
			$(".interestPayToLender").show();
			$(".btn-excelDownload").show();
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");

			$(".warningmessage").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 404) {
				window.scrollTo(100, 0);
				$(".interestWrongMessage").show("slow");
			}
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function lenderInterestExcelDownload(dealId) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var month = interestMonth;
	var year = interestYear;

	if (userisIn == "local") {
		var interestDownload =
			apiBaseURLOXY + dealId + "/" + month + "/" + year + "/interestdetails";
	} else {
		var interestDownload =
			apiBaseURLOXY + dealId + "/" + month + "/" + year + "/interestdetails";
	}

	$.ajax({
		url: interestDownload,
		type: "GET",
		success: function (data, textStatus, xhr) {
			//
			window.open(data.excelSheet, "_blank");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");

			$(".warningmessage").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 404) {
				window.scrollTo(100, 0);
				$(".interestWrongMessage").show("slow");
			}
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getParticipateStatement(dealId) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var month = interestMonth;
	var year = interestYear;

	if (userisIn == "local") {
		var participationAdd =
			apiBaseURLOXY + dealId + "/" + month + "/" + year + "/interestdetails";
	} else {
		var participationAdd =
			apiBaseURLOXY + dealId + "/" + month + "/" + year + "/interestdetails";
	}

	$.ajax({
		url: participationAdd,
		type: "GET",
		success: function (data, textStatus, xhr) {
			var filteredData =
				data.dealLevelLoanEmiCardInformation[0].singleLenderInterestDetails;
			var filteredData2 = filteredData.listOfPaticipatedInfo;
			var template = document.getElementById("filteredCARDInfo").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: filteredData2 });
			$("#viewAddedParticipationAmount").html(html);
			$("#modal-addingamountInfo").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");

			$(".warningmessage").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 404) {
				window.scrollTo(100, 0);
				$(".interestWrongMessage").show("slow");
			}
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function confirmapprovelenderInterest(dealId) {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var paymentType = $("#lenderReturnType").val();

	var month = interestMonth;
	var year = interestYear;

	var array = "";
	$("input:checkbox[name=type]:checked").each(function () {
		if (this.checked) {
			array += $(this).val() + ",";
		}
	});

	array = array.substring(0, array.length - 1);

	if (userisIn == "local") {
		var updatPay = apiBaseURLOXY + dealId + "/updateInterestAmount";
	} else {
		var updatPay = apiBaseURLOXY + dealId + "/updateInterestAmount";
	}

	var postData = {
		month: month,
		year: year,
		listOfLenderIds: array,
		adminStatus: "APPROVED",
		lenderReturnType: paymentType,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: updatPay,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			window.scrollTo(0, 0);
			$(".interestSuccessMessage").show("slow");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".warningmessage").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 109) {
				window.scrollTo(100, 0);
				$(".interestWrongMessage").show("slow");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function rejectapprovelenderInterest(dealId) {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var rejectcomments = $(".interestRejectComments").val();
	var paymentType = $("#lenderReturnType").val();

	var month = interestMonth;
	var year = interestYear;

	var array = "";
	$("input:checkbox[name=type]:checked").each(function () {
		if (this.checked) {
			array += $(this).val() + ",";
		}
	});

	array = array.substring(0, array.length - 1);

	if (userisIn == "local") {
		var updatPay = apiBaseURLOXY + dealId + "/updateInterestAmount";
	} else {
		var updatPay = apiBaseURLOXY + dealId + "/updateInterestAmount";
	}

	var postData = {
		month: month,
		year: year,
		listOfLenderIds: array,
		adminStatus: "REJECTED",
		remarks: rejectcomments,
		lenderReturnType: paymentType,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: updatPay,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#modal-rejectapprovepaytm").modal("hide");
			window.scrollTo(0, 0);
			$(".interestSuccessMessage").show("slow");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".warningmessage").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 109) {
				$("#modal-rejectapprovepaytm").modal("hide");
				window.scrollTo(100, 0);
				$(".interestWrongMessage").show("slow");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function rejectStatusofLenders() {
	$("#modal-rejectapprovepaytm").modal("show");
}

/////////////Gmail contacts start  by livin////

function getGmailAuthorization() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getGmailAuthorization =
			apiBaseURLOXY + "getGmailAuthorization/spreadsheet/admin";
	} else {
		var getGmailAuthorization =
			apiBaseURLOXY + "getGmailAuthorization/spreadsheet/admin";
	}

	$.ajax({
		url: getGmailAuthorization,
		type: "GET",

		success: function (data, textStatus, xhr) {
			$("#Gmailcontacts").attr("href", data.signInUrl);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function borrowersMsgContenNormal(type) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	// var type="NORMAL";
	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;
	if (userisIn == "local") {
		var getStatUrl = apiBaseURLOXY + "getBorrowersMsgContent/" + type;
	} else {
		var getStatUrl = apiBaseURLOXY + "getBorrowersMsgContent/" + type;
	}

	$.ajax({
		url: getStatUrl,
		type: "GET",

		success: function (data, textStatus, xhr) {
			$("#individualText").val(data.message);
			$("#borrowerNotification").val(data.message);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function individualMessageNotification() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var whatsappmeaasage = $("#individualText").val();
	var phone = $(".individualPhoneNumber").val();

	if (userisIn == "local") {
		var whatsappcompaign = apiBaseURLOXY + "sendwhatsAppCampaignMessage";
	} else {
		var whatsappcompaign = apiBaseURLOXY + "sendwhatsAppCampaignMessage";
	}

	var postData = {
		messageType: "individual",
		phoneNumber: phone,
		message: whatsappmeaasage,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: whatsappcompaign,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			window.scrollTo(0, 0);
			$(".lenderParticipationinDeal").show("slow");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function spreadSheetNotification() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();

	var gmailcode = $("#gmailcode").val();
	var spreadSheetId = $(".speardsheet").val();
	var range = $("#rangeType").val();

	var message = $("#borrowerNotification").val();

	if (userisIn == "local") {
		var whatsappcompaign =
			apiBaseURLOXY + "sendNotoficationsToBorrowerFromAdmin";
	} else {
		var whatsappcompaign =
			apiBaseURLOXY + "sendNotoficationsToBorrowerFromAdmin";
	}

	var postData = {
		gmailCode: gmailcode,
		spreadSheetId: spreadSheetId,
		range: range,
		message: message,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: whatsappcompaign,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#loadingSec").hide();

			window.scrollTo(0, 0);
			$(".lenderParticipationinDeal").show("slow");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function sendEmailCampaginToLRBR() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();

	var primaryType = $(".campaginPrimaryType").val();
	var mailSubject = $(".emailSubPrimary").val();
	var message = $("#primaryEmailContent").val();
	var sendername = $(".emailcampaignSendernamelrbr").val();
	var emailfrom = $(".emailSenderIdLRBR").val();

	if (userisIn == "local") {
		var LRBRCAMPAIGN = apiBaseURLOXY + "borrowerAndLenderEmailCampign";
	} else {
		var LRBRCAMPAIGN = apiBaseURLOXY + "borrowerAndLenderEmailCampign";
	}

	var postData = {
		primaryType: primaryType,
		mailSubject: mailSubject,
		message: message,
		fromMail: emailfrom,
		senderName: sendername,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: LRBRCAMPAIGN,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#loadingSec").hide();

			window.scrollTo(0, 0);
			$(".lenderParticipationinDeal").show("slow");
		},
		error: function (xhr, textStatus, errorThrown) {
			$("#loadingSec").hide();
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function whatsAppBroadcastCampaign() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();

	var gmailcode = $("#gmailcode").val();
	var spreadSheetId = $(".boardCastsheetId").val();
	var range = $(".broadcastSheetName").val();

	var message = $("#broadcastText").val();

	if (userisIn == "local") {
		var whatsappcompaign = apiBaseURLOXY + "googleSheetWhatsappCampaign";
	} else {
		var whatsappcompaign = apiBaseURLOXY + "googleSheetWhatsappCampaign";
	}

	var postData = {
		gmailCode: gmailcode,
		spreadSheetId: spreadSheetId,
		range: range,
		message: message,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: whatsappcompaign,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#loadingSec").hide();

			window.scrollTo(0, 0);
			$(".lenderParticipationinDeal").show("slow");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function spreadSheetUnsentNotification() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();

	var gmailcode = $("#gmailcode").val();
	var spreadSheetId = $("#unsentSheetId").val();
	var range = $(".unsentBorrowers").val();

	var date = $("#expectedDateValue").val();

	if (userisIn == "local") {
		var whatsappcompaign = apiBaseURLOXY + "getUnsentBorrowerNotifications";
	} else {
		var whatsappcompaign = apiBaseURLOXY + "getUnsentBorrowerNotifications";
	}

	var postData = {
		gmailCode: gmailcode,
		spreadSheetId: spreadSheetId,
		range: range,
		date: date,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: whatsappcompaign,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#loadingSec").hide();

			window.scrollTo(0, 0);
			$(".lenderParticipationinDeal").show("slow");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function spreadSheetReadMessage() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();

	var gmailcode = $("#gmailcode").val();
	var spreadSheetId = $("#readSheetId").val();
	var range = $(".bRangeType").val();

	var date = $("#expectedDateValues").val();
	var messageNumber = $(".lastMessage").val();

	if (userisIn == "local") {
		var whatsappcompaign = apiBaseURLOXY + "writeNotificationsResponseMessages";
	} else {
		var whatsappcompaign = apiBaseURLOXY + "writeNotificationsResponseMessages";
	}

	var postData = {
		gmailCode: gmailcode,
		spreadSheetId: spreadSheetId,
		range: range,
		date: date,
		lastMessageNumber: messageNumber,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: whatsappcompaign,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#loadingSec").hide();

			window.scrollTo(0, 0);
			$(".readSpeardSheet").show("slow");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getCurrentwalletBlans() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var startDate = $("#startdate").val();
	var endDate = $("#enddate").val();

	if (userisIn == "local") {
		var currentBlans = apiBaseURLOXY + "getCurrentWalletBalanceOfTestLenders";
	} else {
		var currentBlans = apiBaseURLOXY + "getCurrentWalletBalanceOfTestLenders";
	}

	var postData = {
		startDate: startDate,
		endDate: endDate,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: currentBlans,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			var template = document.getElementById("currentWalletInfo").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.lendersIndividualWalletResponseDto,
			});
			$("#displayAmountInfo").html(html);
			$(".lrCurrentWallet").html(data.sumOflendersCurrentWalletAmount);
			$(".totalAmountDate").html(data.totalWalletAmountOnGivenDate);
			$(".currentWalletinfo").show();
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadLenderFeeDetails() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var actOnLoan =
			"http://35.154.48.120:8080/oxynew/v1/user/getListOfLendersUploadedFee";
	} else {
		var actOnLoan =
			"https://fintech.oxyloans.com/oxyloans/v1/user/getListOfLendersUploadedFee";
	}
	var postData = {
		pageNo: 1,
		pageSize: 10,
	};
	var postData = JSON.stringify(postData);
	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;

			if (totalEntries == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"wallettransactiondetails"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.scrowLenderTransactionResponse,
				});
				$("#displaywallettrns").html(html);

				var displayPageNo = totalEntries / 9;
				displayPageNo = displayPageNo + 1;
				$(".acceptedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...

						var postData = {
							pageNo: num,
							pageSize: 10,
						};
						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var actOnLoan =
								"http://35.154.48.120:8080/oxynew/v1/user/getListOfLendersUploadedFee";
						} else {
							var actOnLoan =
								"https://fintech.oxyloans.com/oxyloans/v1/user/getListOfLendersUploadedFee";
						}

						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								console.log(data.results);

								var template = document.getElementById(
									"wallettransactiondetails"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.scrowLenderTransactionResponse,
								});
								$("#displaywallettrns").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	$(".loadingSec").hide();
}

function updateLenderFeeapprove(id) {
	$("#modal-approveLenderfee").modal("show");
	$(".lenderFeeApproveCommentsBtn").attr("data-clickedid", id);
}

function saveupdateLenderFee() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var id = $(".lenderFeeApproveCommentsBtn").attr("data-clickedid");

	if (userisIn == "local") {
		var updateCommentUrl = apiBaseURLOXY + "updateLenderFeeStatus";
	} else {
		var updateCommentUrl = apiBaseURLOXY + "updateLenderFeeStatus";
	}

	var postData = {
		id: id,
		status: "APPROVED",
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: updateCommentUrl,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-approveLenderfee").modal("hide");
			$("#modal-transactionAprrove").modal("show");
			$("#" + id).prop("disabled", true);
			//$('#' + id).prop("disabled", false);
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function rejectLenderFee(id) {
	$("#modal-lenderFeeReject").modal("show");
	$(".lenderfeeRejectCommentsBtn").attr("data-clickedid", id);
}

function rejectupdateLenderFee() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	var id = $(".lenderfeeRejectCommentsBtn").attr("data-clickedid");

	if (userisIn == "local") {
		var updateCommentUrl = apiBaseURLOXY + "updateLenderFeeStatus";
	} else {
		var updateCommentUrl = apiBaseURLOXY + "updateLenderFeeStatus";
	}

	var postData = {
		id: id,
		status: "REJECTED",
	};
	var postData = JSON.stringify(postData);
	alert(postData);
	$.ajax({
		url: updateCommentUrl,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-lenderFeeReject").modal("hide");
			$("#modal-transactionReject").modal("show");
			$("#" + id).prop("disabled", true);
			//$('#' + id).prop("disabled", false);
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

//***getting the users queries ***start by livin****

function getUserQueries(status, usertype) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getQueries = apiBaseURLOXY + "testqueryDetailsBasedOnPrimaryType";
	} else {
		var getQueries = apiBaseURLOXY + "queryDetailsBasedOnPrimaryType";
	}
	var postData = {
		pageNo: 1,
		pageSize: 10,
		status: status,
		primaryType: usertype,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: getQueries,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			if (
				data.listOfUserQueryDetailsResponseDto.length == 0 ||
				data.listOfUserQueryDetailsResponseDto.length == null
			) {
				$(".noDatafoundQuery").show();
			} else {
				const userPendingQueryText =
					status === "Pending" && usertype === "LENDER"
						? "No of Lender Pending queries"
						: "No of Borrower Pending queries";
				const countofpendingqueryText =
					status === "Pending" && usertype === "LENDER"
						? data.lenderCount
						: data.borrowerCount;

				$(".userPendingQuery, .userQueryType").html(userPendingQueryText);
				$(".countofpendingquery, .countofquery").html(countofpendingqueryText);

				const userClosedQueryText =
					status === "Cancelled" && usertype === "LENDER"
						? "No of Lender Cancelled queries"
						: "No of Borrower Cancelled queries";
				const countclosedqueryText =
					status === "Cancelled" && usertype === "LENDER"
						? data.lenderCount
						: data.borrowerCount;

				$(".userClosedQuery").html(userClosedQueryText);
				$(".countclosedquery").html(countclosedqueryText);

				totalEntries = data.count;

				console.log(data);

				var template = document.getElementById("displayDealsScript").innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, {
					data: data.listOfUserQueryDetailsResponseDto,
				});
				$("#displayDealsData").html(html);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;

				$(".dashBoardPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...
						var postData = {
							pageSize: "10",
							pageNo: num,
							status: status,
							primaryType: usertype,
						};
						var postData = JSON.stringify(postData);

						if (userisIn == "local") {
							var getQueries = apiBaseURLOXY + "queryDetailsBasedOnPrimaryType";
						} else {
							var getQueries = apiBaseURLOXY + "queryDetailsBasedOnPrimaryType";
						}
						$.ajax({
							url: getQueries,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								const userPendingQueryText =
									status === "Pending" && usertype === "LENDER"
										? "No of Lender Pending queries"
										: "No of Borrower Pending queries";
								const countofpendingqueryText =
									status === "Pending" && usertype === "LENDER"
										? data.lenderCount
										: data.borrowerCount;

								$(".userPendingQuery, .userQueryType").html(
									userPendingQueryText
								);
								$(".countofpendingquery, .countofquery").html(
									countofpendingqueryText
								);

								const userClosedQueryText =
									status === "Cancelled" && usertype === "LENDER"
										? "No of Lender Cancelled queries"
										: "No of Borrower Cancelled queries";
								const countclosedqueryText =
									status === "Cancelled" && usertype === "LENDER"
										? data.lenderCount
										: data.borrowerCount;

								$(".userClosedQuery").html(userClosedQueryText);
								$(".countclosedquery").html(countclosedqueryText);

								var template =
									document.getElementById("displayDealsScript").innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data.listOfUserQueryDetailsResponseDto,
								});
								$("#displayDealsData").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	// $(".loadingSec").hide();
}

function queryApproveandUpdateComments(tableId, userId, status) {
	$("#modal-approveQueryCommentsUpdate").modal("show");
	$(".approveQueryCommentsBtn").attr("data-clickedid", tableId);
	$(".approveQueryCommentsBtn").attr("data-userId", userId);
	$(".approveQueryCommentsBtn").attr("data-status", status);
}

function uploadQueryScreesShot(input) {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var userid = $(".approveQueryCommentsBtn").attr("data-userId");

	if (input.files && input.files[0]) {
		var reader = new FileReader();

		reader.onload = function (e) {
			$(".panUpload .image-upload-wrap").hide();

			$(".panUpload .file-upload-image").attr("src", e.target.result);
			$(".panUpload .file-upload-content").show();
			// $('.panUpload .file-upload-image').attr('href', e.target.result);

			$(".panUpload .image-title").html(input.files[0].name);
		};

		reader.readAsDataURL(input.files[0]);

		var fd = new FormData();
		var files = input.files[0];
		//alert(fd);
		fd.append("USERQUERYSCREENSHOT", files);
		if (userisIn == "local") {
			var formUrl = apiBaseURLOXY + userid + "/userQueryScreenshot";
		} else {
			var formUrl = apiBaseURLOXY + userid + "/userQueryScreenshot";
		}
		$.ajax({
			url: formUrl,
			type: "post",
			data: fd,
			contentType: false,
			processData: false,
			success: function (data, textStatus, xhr) {
				if (data != 0) {
					var myfile = $("#query").val();
					var filename = myfile.split("\\").pop();
					$("#queryDocumnetId").val(data.documentId);
				} else {
					alert("file not uploaded");
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	} else {
		removeUpload();
	}
}

function approveQuery() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	// userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var tableId = $(".approveQueryCommentsBtn").attr("data-clickedid");
	var status = $(".approveQueryCommentsBtn").attr("data-status");
	var userId = $(".approveQueryCommentsBtn").attr("data-userId");
	var comments = $(".queryComments").val();
	var updatedBy = $(".queyUpdatedBy").val();
	var getuploadedDocumentId = $("#queryDocumnetId").val();

	if (getuploadedDocumentId == "") {
		var documentId = "0";
	} else {
		var documentId = getuploadedDocumentId;
	}

	if (userisIn == "local") {
		var adminUrl = apiBaseURLOXY + "testresolvingUserQuery";
	} else {
		var adminUrl = apiBaseURLOXY + "resolvingUserQuery";
	}

	if (status == "Pending") {
		var postData = {
			id: tableId,
			userId: userId,
			status: status,
			comments: comments,
			resolvedBy: updatedBy,
			adminDocumentId: documentId,
			respondedBy: "ADMIN",
		};
	} else {
		var postData = {
			id: tableId,
			userId: userId,
			status: status,
			comments: comments,
			resolvedBy: updatedBy,
			adminDocumentId: documentId,
		};
	}

	var postData = JSON.stringify(postData);

	$.ajax({
		url: adminUrl,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-approveQueryCommentsUpdate").modal("hide");
			window.scrollTo(0, 0);
			$(".querySuccessMessage").show("slow");
		},

		error: function (xhr, textStatus, errorThrown) {
			console.log("err")
			console.log("Error Something");
			if (xhr.status === 400) {
				var errorData = JSON.parse(xhr.responseText);
				// Extract the error message from the parsed response
				var errorMessage = errorData.errorMessage;
							   
				// Show the modal dialog
				console.log(errorMessage)
				$("#modal-transactiondanger").modal("show");
				// Display the error message in the modal body
				$("#modal-transactiondanger .modal-body").html(errorMessage);
				 setTimeout(function () {
					location.reload();      
				}, 4000);                          
			} 

		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getChatIdForWhatsappBroadCast() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getChatID = apiBaseURLOXY + "listOfWhatappGroupNames/broadcast";
	} else {
		var getChatID = apiBaseURLOXY + "listOfWhatappGroupNames/broadcast";
	}

	$.ajax({
		url: getChatID,
		type: "GET",

		success: function (data, textStatus, xhr) {
			$("#whatsappgroup").empty();
			for (var i = 0; i < data.listOfWhatappGroups.length; i++) {
				var whatsappGroupNames = data.listOfWhatappGroups[i].groupName;
				var whatsappChatid = data.listOfWhatappGroups[i].chatId;
				if (whatsappGroupNames != "NA") {
					$("#whatsappgroup").append(
						'<label for="' +
							whatsappGroupNames +
							'"><input type="checkbox" value="' +
							whatsappChatid +
							'"/>' +
							whatsappGroupNames +
							"</label>"
					);
				}
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function downloadInvestorsLendersExcel(dealId) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getInvestorsList =
			apiBaseURLOXY + "equityInvestorsExcelDownload/" + dealId;
	} else {
		var getInvestorsList =
			apiBaseURLOXY + "equityInvestorsExcelDownload/" + dealId;
	}
	$.ajax({
		url: getInvestorsList,
		type: "GET",
		success: function (data, textStatus, xhr) {
			window.open(data.downloadUrl, "_blank");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getlistOfBorrowerDeals() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getInvestorsList = apiBaseURLOXY + "listOfBorrowerDeals/equity";
	} else {
		var getInvestorsList = apiBaseURLOXY + "listOfBorrowerDeals/equity";
	}
	$.ajax({
		url: getInvestorsList,
		type: "GET",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("displayDealsScript").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data.dealsInfoDto });
			$("#displayDealsData").html(html);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function confirmCloseDeal() {
	$(".approvedPrincipalUsers").attr("disabled", true);
	$("#modal-closed-deal").modal("show");
}

function dealclosedPreview() {
	dealClosingDate = dealClosingDate = $("#deal-closedDate").val();
	$(".closedate").html(dealClosingDate);
	$("#modal-closed-deal").modal("hide");
	$("#closedDealConfirmationFromAdmin").modal("show");
}

function dealClosed(dealId) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var dealclosedDate = dealClosingDate;
	var dealId = dealId;

	if (userisIn == "local") {
		var closeDeal = apiBaseURLOXY + "dealLevelClosing";
	} else {
		var closeDeal = apiBaseURLOXY + "dealLevelClosing";
	}
	var postData = {
		dealId: dealId,
		dealCloseDate: dealclosedDate,
	};
	var postData = JSON.stringify(postData);
	console.log(postData);
	$.ajax({
		url: closeDeal,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$(".approvedPrincipalUsers").attr("disabled", false);
			$("#closedDealConfirmationFromAdmin").modal("hide");
			window.scrollTo(0, 0);
			$(".showDealClosedMessage").show("slow");
		},

		error: function (request, error) {
			console.log("error");

			$(".approvedPrincipalUsers").attr("disabled", true);
			$("#closedDealConfirmationFromAdmin").modal("hide");
			$(".showDealClosedErrorMessage  #error-DealClosed").html(
				arguments[0].responseJSON.errorMessage
			);
			if (arguments[0].responseJSON.errorCode == 109) {
				$(".showDealClosedErrorMessage").show("slow");
			}
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getDealList() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var dealType = $("#closedDealType").val();

	if (userisIn == "local") {
		var getInvestorsList = apiBaseURLOXY + "listOfBorrowerDeals/" + dealType;
	} else {
		var getInvestorsList =
			apiBaseURLOXY + "listOfBorrowerDeals/equity/" + dealType;
	}
	$.ajax({
		url: getInvestorsList,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$("#dealNames").empty();
			for (var i = 0; i < data.dealsInfoDto.length; i++) {
				var dealNames = data.dealsInfoDto[i].dealName;
				var dealId = data.dealsInfoDto[i].dealId;
				if (dealNames != "NA") {
					$("#dealNames").append(
						'<option value="' + dealId + '">' + dealNames + "</option>"
					);
				}
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function emailCampaign() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();

	var gmailcode = $("#gmailcode").val();
	var spreadSheetId = $(".emailsheetId").val();
	var sheetname = $(".emailSheetName").val();
	var emailsubject = $(".emailsubject").val();
	var campaignType = $(".campaginType").val();
	var message = $("#emailText").val();

	var campaignsendertype = $(".emailcampaignSendername").val();
	var campaignUserTo = $(".emailSenderId").val();


	var whatsappImage = $(".emailwhatsappImage").val();
	var sampleEmail = $(".emailSheesampleEmail").val();
	var mobileNumber = $(".emailSheeTmobileNumber").val();


	if (userisIn == "local") {
		var emailcompaign = apiBaseURLOXY + "sendWhatsappAndEmailCampaign";
	} else {
		var emailcompaign = apiBaseURLOXY + "sendWhatsappAndEmailCampaign";
	}

	var postData = {

		gmailCode: gmailcode,
		spreadSheetId: spreadSheetId,
		range: sheetname,
		mailSubject: emailsubject,
		message: message,
		type: campaignType,
		senderName: campaignsendertype,
		fromMail: campaignUserTo,
		whatsappImage,
		sampleEmail,
		mobileNumber
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: emailcompaign,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#loadingSec").hide();

			window.scrollTo(0, 0);
			$(".lenderParticipationinDeal").show("slow");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewADDStatement(dealId, suserId) {

	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");


	if (userisIn == "local") {
		var getparticipationStatus =
			apiBaseURLOXY + suserId + "/" + dealId + "/paticipationChanges";
	} else {
		var getparticipationStatus =
			apiBaseURLOXY + suserId + "/" + dealId + "/paticipationChanges";
	}

	$.ajax({
		url: getparticipationStatus,
		type: "GET",

		success: function (data, textStatus, xhr) {
			var template = document.getElementById(
				"addParticipationStatus"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, {
				data: data.lenderParticipationUpdatedInfo,
			});
			$("#viewAddStatement").html(html);
			$("#modal-addParticipation-Status").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function ViewPrincipalReturnInfo(dealId, suserId) {
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getprincipalReturnInfo =
			apiBaseURLOXY + suserId + "/" + dealId + "/lenderPrincipalReturn";
	} else {
		var getprincipalReturnInfo =
			apiBaseURLOXY + suserId + "/" + dealId + "/lenderPrincipalReturn";
	}

	$.ajax({
		url: getprincipalReturnInfo,
		type: "GET",

		success: function (data, textStatus, xhr) {
			$(".principalReturnText").html("principal Returned Info");
			var template = document.getElementById("principalInfoenable").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data });
			$("#viewAddStatement").html(html);
			$("#modal-addParticipation-Status").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".modal-body #principalError").html(
				arguments[0].responseJSON.errorMessage
			);
			if (arguments[0].responseJSON.errorCode == 404) {
				$("#modal-principalErrorMeaages").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getdealLevelInterestInfo() {
	saccessToken = getCookie("saccessToken");

	let suserId = $("#dealLenderId").val();
	var dealId = $("#dealId").val();
	suserId = suserId.substring(2);

	emidealId = dealId;
	emiLenderid = suserId;

	if (userisIn == "local") {
		var getpaymentstatus =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			suserId +
			"/" +
			dealId +
			"/dealLevelLoanEmiCard";
	} else {
		var getpaymentstatus =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			suserId +
			"/" +
			dealId +
			"/dealLevelLoanEmiCard";
	}

	$.ajax({
		url: getpaymentstatus,
		type: "GET",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			var template = document.getElementById("lenderDealEmiCard").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, {
				data: data.dealLevelLoanEmiCard,
			});
			$("#viewLenderStatement").html(html);
			$(".dealEmiInfo").show();
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewaddstatement(snois) {

	let suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	 suserId = emiLenderid;
	var dealId = emidealId;

	if (userisIn == "local") {
		var getpaymentstatus =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			suserId +
			"/" +
			dealId +
			"/dealLevelLoanEmiCard";
	} else {
		var getpaymentstatus =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			suserId +
			"/" +
			dealId +
			"/dealLevelLoanEmiCard";
	}

	$.ajax({
		url: getpaymentstatus,
		type: "GET",
		dataType: "json",

		success: function (data, textStatus, xhr) {

			var filteredData = data.dealLevelLoanEmiCard[snois - 1];
			console.log(filteredData);
			var template = document.getElementById("filteredCARDInfo").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, {
				data: filteredData.listOfPaticipatedInfo,
			});
			$("#viewAddedParticipationAmount").html(html);
			$("#modal-addingamountInfo").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

const reopenDeal = (dealId) => {
	$(".btn-dealReopen").attr("data-id", dealId);
	$("#update-deal-extend-tenure").modal("show");
};

const confirmRepoensubmission = async () => {
	$(".btn-dealReopen").attr("disabled", true);
	$(".loadingSec").show();

	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const reopenDate = $("#dealTenturedate").val();
	const dealId = $(".btn-dealReopen").attr("data-id");

	let isValid = true;

	if (reopenDate == "") {
		$(".dealTentureerrormessage").show();
		$(".loadingSec").hide();
		$(".btn-dealReopen").attr("disabled", false);
		isValid = false;
	} else {
		$(".dealTentureerrormessage").hide();
	}

	const reopen =
		userisIn === "local"
			? `${apiBaseURLOXY}deal-reopen`
			: `${apiBaseURLOXY}deal-reopen`;

	const postData = {
		dealId: dealId,
		fundsAcceptanceEndDate: reopenDate,
	};

	try {
		if (isValid == true) {
			const response = await fetch(reopen, {
				method: "PATCH",
				body: JSON.stringify(postData),
				headers: {
					"Content-Type": "application/json",
					accessToken: saccessToken,
				},
			});

			if (response.ok) {
				$(".loadingSec").hide();
				$("#update-deal-extend-tenure").modal("hide");
				$(".dealextendReopen #message").html("Deal Successfully Reopend");

				$("#modal-showdealTenureSuccess").modal("show");
				$(".btn-dealReopen").attr("disabled", false);
				setTimeout(() => {
					location.reload();
				}, 4000);
			} else {
				console.log("Error Something");
				$(".btn-dealReopen").attr("disabled", false);
			}
		}
	} catch (error) {
		console.log("Error Something");
		$(".loadingSec").hide();
	}
	return isValid;
};

const extendTenure = (dealId) => {
	$(".btn-dealExtend").attr("data-id", dealId);
	$("#update-deal-tenure-extend").modal("show");
};

const confirmextendTenureMonths = async () => {
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	$(".btn-dealExtend").attr("disabled", true);

	const monthsDate = $("#tenureMonthsDate").val();
	const dealId = $(".btn-dealExtend").attr("data-id");
	$(".loadingSec").show();

	let isValid = true;

	if (monthsDate == "") {
		$(".dealTenturemonthsDate").show();
		$(".btn-dealExtend").attr("disabled", false);
		$("#loadingSec").hide();
		isValid = false;
	} else {
		$(".dealTenturemonthsDate").hide();
	}

	const reopen =
		userisIn === "local"
			? `${apiBaseURLOXY}extendsDuration`
			: `${apiBaseURLOXY}extendsDuration`;

	const postData = {
		dealId,
		duration: monthsDate,
	};

	try {
		if (isValid == true) {
			const response = await fetch(reopen, {
				method: "PATCH",
				body: JSON.stringify(postData),
				headers: {
					"Content-Type": "application/json",
					accessToken: saccessToken,
				},
			});

			if (response.ok) {
				$(".loadingSec").hide();
				$("#update-deal-tenure-extend").modal("hide");
				$("#modal-showdealTenureSuccess").modal("show");
				$(".btn-dealExtend").attr("disabled", true);

				setTimeout(() => {
					location.reload();
				}, 4000);
			} else {
				console.log("Error Something");
				$(".btn-dealExtend").attr("disabled", false);
			}
		}
	} catch (error) {
		console.log("Error Something");
		$(".loadingSec").hide();
	}
	return isValid;
};

function closeTheDealStatus(dealId) {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var closeDeal = apiBaseURLOXY + dealId + "/dealPaticipationStatusUpdation";
	} else {
		var closeDeal = apiBaseURLOXY + dealId + "/dealPaticipationStatusUpdation";
	}

	var postData = {
		statusType: "ACHIEVED",
	};

	$("#loadingSec").show();
	var postData = JSON.stringify(postData);
	$.ajax({
		url: closeDeal,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#loadingSec").hide();

			window.scrollTo(0, 0);
			$(".dealClosedSuccess").show("slow");
			setTimeout(function () {
				location.reload();
			}, 4000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function runningDealInformation(dealType) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var runningDealInfo = apiBaseURLOXY + dealType + "/allRunningDeals";
	} else {
		var runningDealInfo = apiBaseURLOXY + dealType + "/allRunningDeals";
	}

	$.ajax({
		url: runningDealInfo,
		type: "GET",

		success: function (data, textStatus, xhr) {
			$(".allDealsParticipationSum").html(data.totalRunningDealsAmount);
			$(".allDealsParticipationachived").html(data.allDealsParticipationSum);
			$(".allDealsCurrentAmount").html(data.totalCurrentDealsAmount);

			if (data.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"runningDealsInformation"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.listOfRunningDeals,
				});
				$("#displayRunningInfo").html(html);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function viewCurrentDealInfo(paymentDate) {
	$(".solidToggle_" + paymentDate).slideToggle("slow");
	$(".viewQueryShowInterestPayments-" + paymentDate).show();
	$(".showinterestPaymentinquery-" + paymentDate).show();
}

function interestPaysearch(status) {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	var month = $("#interestmonth").val();
	var year = $("#interestPayYear").val();
	var startdate = $("#interestStartDateval").val();
	var endDate = $("#interestEndDateval").val();

	if (status == "EXECUTED") {
		status = "EXECUTED";
	} else {
		status = "INITIATED";
	}

	if (userisIn == "local") {
		var interestPay =
			apiBaseURLOXY +
			"dealLevelInterestPaymentsInfo/" +
			month +
			"/" +
			year +
			"?status=" +
			status +
			"&startDate=" +
			startdate +
			"&" +
			"endDate=" +
			endDate;
	} else {
		var interestPay =
			apiBaseURLOXY +
			"dealLevelInterestPaymentsInfo/" +
			month +
			"/" +
			year +
			"?status=" +
			status +
			"&startDate=" +
			startdate +
			"&" +
			"endDate=" +
			endDate;
	}

	$.ajax({
		url: interestPay,
		type: "GET",

		success: function (data, textStatus, xhr) {
			if (data.length == 0 || data.length == "0") {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"displayInterestScript"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, { data: data });
				$("#loadDealsInfo").html(html);

				for (var i = 0; i < data.length; i++) {
					$(".showinterestinfopayment").each(function (index, value) {
						var paymentDate = $(this).attr("data-Id");
						if (data[i].paymentDate == paymentDate) {
							var template = document.getElementById(
								"displayshowinterestInfoScript"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data[i].dealLevelInterestPaymentsDto,
							});
							$("#displayUserShowinterestInfo-" + paymentDate).html(html);
						}
					});
				}
			}
		},

		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".modal-body #searchbody").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 404) {
				$("#modal-searchcall-showinterestdata").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function getInterestInfo(status) {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	var d = new Date();
	var month = new Array();
	month[0] = "January";
	month[1] = "February";
	month[2] = "March";
	month[3] = "April";
	month[4] = "May";
	month[5] = "June";
	month[6] = "July";
	month[7] = "August";
	month[8] = "September";
	month[9] = "October";
	month[10] = "November";
	month[11] = "December";
	var currMonth = month[d.getMonth()];
	var currYear = d.getFullYear();

	var firstDay = new Date(d.getFullYear(), d.getMonth(), 1);
	var presentDate = String(d.getDate()).padStart(2, "0");
	var lastDay = new Date(
		new Date().getFullYear(),
		new Date().getMonth() + 1,
		0
	).getDate();

	if (presentDate < 10) {
		presentDate = presentDate.substring(1);
	}

	if (status == "EXECUTED") {
		$(".exceutedFilesInfo").show();

		if (userisIn == "local") {
			var interestPay =
				apiBaseURLOXY +
				"dealLevelInterestPaymentsInfo/" +
				currMonth +
				"/" +
				currYear +
				"?status=" +
				status +
				"&startDate=" +
				presentDate +
				"&endDate=" +
				lastDay;
		} else {
			var interestPay =
				apiBaseURLOXY +
				"dealLevelInterestPaymentsInfo/" +
				currMonth +
				"/" +
				currYear +
				"?status=" +
				status +
				"&startDate=" +
				presentDate +
				"&endDate=" +
				lastDay;
		}
	} else {
		if (userisIn == "local") {
			var interestPay =
				apiBaseURLOXY +
				"dealLevelInterestPaymentsInfo/" +
				currMonth +
				"/" +
				currYear +
				"?startDate=" +
				presentDate +
				"&endDate=" +
				lastDay;
		} else {
			var interestPay =
				apiBaseURLOXY +
				"dealLevelInterestPaymentsInfo/" +
				currMonth +
				"/" +
				currYear +
				"?startDate=" +
				presentDate +
				"&endDate=" +
				lastDay;
		}
	}
	$.ajax({
		url: interestPay,
		type: "GET",

		success: function (data, textStatus, xhr) {
			if (data.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"displayInterestScript"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, { data: data });
				$("#loadDealsInfo").html(html);

				for (var i = 0; i < data.length; i++) {
					$(".showinterestinfopayment").each(function (index, value) {
						var paymentDate = $(this).attr("data-Id");
						if (data[i].paymentDate == paymentDate) {
							var template = document.getElementById(
								"displayshowinterestInfoScript"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data[i].dealLevelInterestPaymentsDto,
							});
							$("#displayUserShowinterestInfo-" + paymentDate).html(html);
						}
					});
				}
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".modal-body #searchbody").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 404) {
				$("#modal-searchcall-showinterestdata").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

//******payment current month  date*******************
function updateCurrentmonthpaymentdate(dealId, noLenders, amount, paymentdate) {
	// function updateCurrentmonthpaymentdate(dealId){

	$("#modal-currentmonth-paymentdate").modal("show");
	var updatedDate = $("#paymentDate").val();
	// $("#modal-currentmonth-paymentdate .dealpaymentBtn").attr("onclick", "currentMonthDealPaymentDateUpdation('"+dealId+"','"+updatedDate+"','onhold')");
	$("#modal-currentmonth-paymentdate .dealpaymentBtn").attr(
		"onclick",
		"currentMonthDealPaymentDateUpdation('" +
			dealId +
			"','" +
			updatedDate +
			"','onhold','" +
			noLenders +
			"','" +
			amount +
			"','" +
			paymentdate +
			"')"
	);
}

//********INTERESTPAY START**********************

function approveingInterestPay(
	dealId,
	paymentdate,
	status,
	totalInterest,
	originalPaymentDate
) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (primaryType == "PAYMENTSADMIN") {
		var approvingUser = "bhargav";
	} else if (primaryType == "SUBBUADMIN") {
		var approvingUser = "subbu";
	} else {
		var approvingUser = "radha";
	}

	var postData = {
		paymentDate: paymentdate,
		dealId: dealId,
		userId: suserId,
		status: status,
		totalAmount: totalInterest,
		originalPaymentDate: originalPaymentDate,
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var approveInterestPay = apiBaseURLOXY + "interestDetailsForDeall";
	} else {
		var approveInterestPay = apiBaseURLOXY + "interestDetailsForDeall";
	}

	$.ajax({
		url: approveInterestPay,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$(".interestDealName").html(data.dealName);
			$(".tottalTenure").html(data.tenure);
			$(".cureentTenure").html(data.paymentMonth);

			$(".totalDealValue").html(data.totalDealValue);
			$(".totalDealAchived").html(data.totalAchievedValue);
			$(".totalDealCurrentValue").html(data.currentValue);
			$(".totalDealPaymentStatus").html(data.dealStatus);

			if (data.interestsApprovalDto.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"displayInterestScript2"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.interestsApprovalDto,
				});
				$("#approveIntrestInfo").html(html);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			$(".modal-body").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 101) {
				$("#modal-showerrormessagesfotApproveingUser").modal("show");
			}
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function h2hApprovingUser(originalPaymentDateh2h) {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (primaryType == "PAYMENTSADMIN") {
		var approvingUser = "bhargav";
		var radhaSirApproved = false;
	} else if (primaryType == "SUBBUADMIN") {
		var approvingUser = "subbu";
		var radhaSirApproved = false;
	} else {
		var approvingUser = "radha";
		var radhaSirApproved = true;
	}

	if ($(".h2h2checkallApproved").is(":checked")) {
		var checkALL = true;
	} else {
		var checkALL = false;
	}

	var approveData = [];

	$("input:checkbox[name=selectOption]:checked").each(function (index, value) {
		var _thisid = $(this).attr("data-userID");
		var response = $(".response_" + _thisid).val();
		if ($(this).is(":checked")) {
			var _checkedRnot = "Approved";
		} else {
			var _checkedRnot = "Rejected";
		}
		approveData.push({
			userId: _thisid,
			approvalStatus: _checkedRnot,
			remarks: response,
		});
	});

	var paymentdate = $("#paymentcurrentDate").val();
	var approveDealId = $("#approvedealID").val();

	var getTypeofSubmit = document.querySelectorAll(
		'input[id="selectAll"]:checked'
	).length;
	if (getTypeofSubmit == 1) {
		var postData = {
			paymentDate: paymentdate,
			userId: suserId,
			dealId: approveDealId,
			checkAll: checkALL,
			radhaSirApproved: radhaSirApproved,
			interestsApprovalDto: approveData,
			status: "APPROVED",
			originalPaymentDate: originalPaymentDateh2h,
		};
	} else {
		var postData = {
			paymentDate: paymentdate,
			userId: suserId,
			dealId: approveDealId,
			checkAll: checkALL,
			radhaSirApproved: radhaSirApproved,
			interestsApprovalDto: approveData,
			status: "APPROVED",
			originalPaymentDate: originalPaymentDateh2h,
		};
	}

	var postData = JSON.stringify(postData);

	console.log(postData);

	if (userisIn == "local") {
		var approvingUser = apiBaseURLOXY + "interestsApprovalss";
	} else {
		var approvingUser = apiBaseURLOXY + "interestsApprovalss";
	}
	$.ajax({
		url: approvingUser,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			outputfolderfile = data.fileName;
			writeCookie("outputfolder", outputfolderfile);
			// $("#movedoctooutputfolder").val(data.fileName);
			$("#modal-H2H-ApprovedSuccessMessage").modal("show");

			setTimeout(function () {
				location.reload();
			}, 7000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function currentDealUsersInterest(dealId, paymentdate) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var postData = {
		paymentDate: paymentdate,
		dealId: dealId,
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var currentDealUsers = apiBaseURLOXY + "interestsInfoBreakUp";
	} else {
		var currentDealUsers = apiBaseURLOXY + "interestsInfoBreakUp";
	}

	$.ajax({
		url: currentDealUsers,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			if (data.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById("currentUsersdetails").innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, { data: data });
				$("#displaycurrentUsers").html(html);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

//********approved interest  START**********************

function approvedInterestPay(dealId, paymentdate, status, orginalDate) {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (primaryType == "PAYMENTSADMIN") {
		var approvingUser = "bhargav";
	} else if (primaryType == "SUBBUADMIN") {
		var approvingUser = "subbu";
	} else {
		var approvingUser = "radha";
	}

	var postData = {
		paymentDate: paymentdate,
		dealId: dealId,
		status: status,
		userId: suserId,
		originalPaymentDate: orginalDate,
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var approveInterestPay = apiBaseURLOXY + "interestDetailsForDeall";
	} else {
		var approveInterestPay = apiBaseURLOXY + "interestDetailsForDeall";
	}

	$.ajax({
		url: approveInterestPay,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$(".interestDealName").html(data.dealName);
			$(".tottalTenure").html(data.tenure);
			$(".cureentTenure").html(data.paymentMonth);

			if (data.interestsApprovalDto.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"displayApprovedScript"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.interestsApprovalDto,
				});
				$("#approveIntrestInfo").html(html);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

//**************** changing approved user to on hold*********************

function interestOnHoldUsers() {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (primaryType == "PAYMENTSADMIN") {
		var approvingUser = "bhargav";
		var radhaSirApproved = false;
	} else if (primaryType == "SUBBUADMIN") {
		var approvingUser = "subbu";
		var radhaSirApproved = false;
	} else {
		var approvingUser = "radha";
		var radhaSirApproved = false;
	}

	var approveData = [];
	$("input:checkbox[name=selectOption]:checked").each(function (index, value) {
		// var thisValue = $(this).val().slice(1,-1);
		var _thisid = $(this).attr("data-userID");
		var response = $(".response_" + _thisid).val();
		if ($(this).is(":checked")) {
			var _checkedRnot = "onhold";
		}

		approveData.push({
			userId: _thisid,
			approvalStatus: _checkedRnot,
			remarks: response,
		});
	});

	var paymentdate = $("#paymentDateOnHold").val();
	var onholdDealId = $("#onHolddealID").val();

	var getTypeofSubmit = document.querySelectorAll(
		'input[id="selectAll"]:checked'
	).length;

	if (getTypeofSubmit == 1) {
		var postData = {
			paymentDate: paymentdate,
			userId: suserId,
			dealId: onholdDealId,
			checkAll: false,
			radhaSirApproved: radhaSirApproved,
			interestsApprovalDto: approveData,
		};
	} else {
		var postData = {
			paymentDate: paymentdate,
			userId: suserId,
			dealId: onholdDealId,
			checkAll: false,
			radhaSirApproved: radhaSirApproved,
			interestsApprovalDto: approveData,
		};
	}

	var postData = JSON.stringify(postData);

	console.log(postData);

	if (userisIn == "local") {
		var approvingUser = apiBaseURLOXY + "interestsApprovalss";
	} else {
		var approvingUser = apiBaseURLOXY + "interestsApprovalss";
	}

	// return false;
	$.ajax({
		url: approvingUser,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-H2H-ONHoldSuccessMessage").modal("show");

			setTimeout(function () {
				location.reload();
			}, 7000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function reflectDbChanges() {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var paymentdate = $("#paymentDateApprove").val();
	var dealId = $("#approvedealID").val();

	var postData = {
		paymentDate: paymentdate,
		dealId: dealId,
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var approvingUser = apiBaseURLOXY + "updateInterestsInfoExcelSheet";
	} else {
		var approvingUser = apiBaseURLOXY + "updateInterestsInfoExcelSheet";
	}

	$.ajax({
		url: approvingUser,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-dbchangesforInterest").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function confirmTOoutputfolder() {
	$("#modal-confirmOutput-folder").modal("show");
}

function movefoldertoh2hdoc() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	let foldername = getCookie("outputfolder");
	

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var postData = {
		fileName: foldername,
		sendMessages: true,
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var docToOutput = apiBaseURLOXY + "moveFileToApprovalFolder";
	} else {
		var docToOutput = apiBaseURLOXY + "moveFileToApprovalFolder";
	}

	$.ajax({
		url: docToOutput,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-confirmOutput-folder").modal("hide");
			$("#modal-movedTOoutputfolder").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function currentMonthDealPaymentDateUpdation(
	dealId,
	paymentdate,
	status,
	noLender,
	interestAmount,
	orginalDate
) {
	$("#modal-currentmonth-paymentdate").modal("hide");

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (primaryType == "PAYMENTSADMIN") {
		var approvingUser = "bhargav";
	} else if (primaryType == "SUBBUADMIN") {
		var approvingUser = "subbu";
	} else {
		var approvingUser = "radha";
	}

	var updatedDate = $("#paymentDate").val();

	var postData = {
		userId: suserId,
		paymentDate: updatedDate,
		dealId: dealId,
		status: status,
		totalAmount: interestAmount,
		noOfLenders: noLender,
		originalPaymentDate: orginalDate,
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var approveInterestPay = apiBaseURLOXY + "interestDetailsForDeall";
	} else {
		var approveInterestPay = apiBaseURLOXY + "interestDetailsForDeall";
	}

	$.ajax({
		url: approveInterestPay,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-success-PaymentdateUpdate").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			$(".modal-body #paymentError").html(
				arguments[0].responseJSON.errorMessage
			);

			if (arguments[0].responseJSON.errorCode == 404) {
				$("#modal-error-PaymentdateUpdate").modal("show");
			}

			if (arguments[0].responseJSON.errorCode == 101) {
				$("#modal-success-PaymentdateUpdate").modal("hide");
				$("#modal-error-PaymentdateUpdate").modal("show");
			}
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function checkChange() {
	console.log(1);
	var totalCheckbox = document.querySelectorAll(
		'input[name="selectOption"]'
	).length;
	var totalChecked = document.querySelectorAll(
		'input[name="selectOption"]:checked'
	).length;

	console.log(totalCheckbox);
	console.log(totalChecked);

	if (totalCheckbox == totalChecked) {
		document.getElementsByName("selectAll")[0].checked = true;
	} else {
		document.getElementsByName("selectAll")[0].checked = false;
	}
}

$(".downloadPrincipalExcelFile").click(function () {
	signout();
});

/////////AUTO GENERATED  deal based AGREEMENTS////////

function dealbasedAgreements() {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	var dealId = $(".dealId").val();
	var utm = $(".utm").val();
	var disbursedDate = $("#disbursement").val();

	if (userisIn == "local") {
		var updatLenderGroup =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			dealId +
			"/dealIdBasedAgreementsGenerationForZaggle";
	} else {
		var updatLenderGroup =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			dealId +
			"/dealIdBasedAgreementsGenerationForZaggle";
	}

	var postData = {
		disbursedDate: disbursedDate,
		utm: utm,
	};
	var postData = JSON.stringify(postData);
	$.ajax({
		url: updatLenderGroup,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#modal-agreements-update").modal("show");
			setTimeout(function () {
				location.reload();
			}, 3000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");

			$(".modal-body #erorr-zaggle").html(
				arguments[0].responseJSON.errorMessage
			);

			if (arguments[0].responseJSON.errorCode == 105) {
				$("#modal-error-zaggle").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function searchLenderReferralId() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const accessToken = getCookie("saccessToken");

	var lenderid = $(".refereeId").val();
	var referrerType = $("#referreType").val();

	lenderid = lenderid.substring(2);

	if (userisIn == "local") {
		var getrefereeInfo =
			apiBaseURLOXY + lenderid + "/allLenderReferenceDetails";
	} else {
		var getrefereeInfo =
			apiBaseURLOXY + lenderid + "/allLenderReferenceDetails";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
		primaryType: referrerType,
	};
	var postData = JSON.stringify(postData);

	$.ajax({
		url: getrefereeInfo,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#displaywallet").hide();
			$(".viewlenderwallet").hide();

			var template = document.getElementById("referrerSearchData").innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.listOfLenderReferenceResponseDto,
			});
			$("#displayRefereeSearch").html(html);
			$("#displayRefereeSearch").show();

			var displayPageNo = data.count / 10;
			displayPageNo = displayPageNo + 1;
			$(".viewreferrePrimaryType")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					var postData = {
						pageNo: num,
						pageSize: 10,
						primaryType: referrerType,
					};

					if (userisIn == "local") {
						var getrefereeInfo =
							apiBaseURLOXY + lenderid + "/allLenderReferenceDetails";
					} else {
						var getrefereeInfo =
							apiBaseURLOXY + lenderid + "/allLenderReferenceDetails";
					}

					var postData = JSON.stringify(postData);
					$.ajax({
						url: getrefereeInfo,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							$("#displaywallet").hide();
							$(".viewlenderwallet").hide();
							var template =
								document.getElementById("referrerSearchData").innerHTML;
							Mustache.parse(template);
							var html = Mustache.render(template, data);
							var html = Mustache.to_html(template, {
								data: data.listOfLenderReferenceResponseDto,
							});
							$("#displayRefereeSearch").html(html);
							$("#displayRefereeSearch").show();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", accessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function lenderDealStatisticsInfo() {
    const suserId = getCookie("sUserId");
    const sprimaryType = getCookie("sUserType");
    const accessToken = getCookie("saccessToken");

    var lenderID = $("#lenderId").val();
    lenderID = lenderID.substring(2);

    var dealStatistics = (userisIn == "local") ? apiBaseURLOXY + lenderID + "/totalTestLenderParticipatedDeals" :
        apiBaseURLOXY + lenderID + "/totalTestLenderParticipatedDeals";

    var postData = {
        pageNo: 1,
        pageSize: 10,
    };
    var postData = JSON.stringify(postData);

    $.ajax({
        url: dealStatistics,
        type: "POST",
        data: postData,
        contentType: "application/json",
        dataType: "json",
        success: function(data, textStatus, xhr) {
            if (data.lenderPaticipatedResponseDto.length > 0) {
                var template = document.getElementById("displayLenderDealinfo").innerHTML;
                Mustache.parse(template);
                var html = Mustache.render(template, {
                    data: data.lenderPaticipatedResponseDto
                });
                $("#example2 tbody").html(html);
                $("#example2 tbody").show();
                $("#nodatafound").hide();
            } else {
                $("#example2 tbody").hide();
                $("#nodatafound").show();
            }

            $(".dealsUser").html(data.lenderName);
            $(".dealUserNO").html(data.mobileNumber);

            $(".lenderDealInfo").show();
            var displayPageNo = data.count / 10;
            displayPageNo = displayPageNo + 1;
            $(".searchDealsPagination").bootpag({
                total: displayPageNo,
                page: 1,
                maxVisible: 5,
                leaps: true,
                firstLastUse: true,
                first: "←",
                last: "→",
                wrapClass: "pagination",
                activeClass: "active",
                disabledClass: "disabled",
                nextClass: "next",
                prevClass: "prev",
                lastClass: "last",
                firstClass: "first",
            }).on("page", function(event, num) {
                var postData = {
                    pageNo: num,
                    pageSize: 10,
                };
                var dealStatistics = (userisIn == "local") ? apiBaseURLOXY + lenderID + "/totalTestLenderParticipatedDeals" :
                    apiBaseURLOXY + lenderID + "/totalTestLenderParticipatedDeals";
                var postData = JSON.stringify(postData);
                $.ajax({
                    url: dealStatistics,
                    type: "POST",
                    data: postData,
                    contentType: "application/json",
                    dataType: "json",
                    success: function(data, textStatus, xhr) {
                        var template = document.getElementById("displayLenderDealinfo").innerHTML;
                        Mustache.parse(template);
                        var html = Mustache.render(template, {
                            data: data.lenderPaticipatedResponseDto
                        });
                        $("#example2 tbody").html(html);
                    },
                    error: function(xhr, textStatus, errorThrown) {
                        console.log("Error Something");
						$("#nodatafound").show()
                    },
                    beforeSend: function(xhr) {
                        xhr.setRequestHeader("accessToken", accessToken);
                    },
                });
            });
        },
		error: function(xhr, textStatus, errorThrown) {
			console.log("Error Something");
			if (xhr.status === 400) {
				// Parse the JSON response
				var errorData = JSON.parse(xhr.responseText);
				// Extract the error message from the parsed response
				var errorMessage = errorData.errorMessage;
				
				// Show the modal dialog
				$("#modal-transactiondanger").modal("show");
				// Display the error message in the modal body
				$("#modal-transactiondanger .modal-body").html(errorMessage);
				
				// Reload the page after 4 seconds
				setTimeout(function () {
					location.reload();
				}, 4000);
			}
			console.log(errorMessage);
		},		
        beforeSend: function(xhr) {
            xhr.setRequestHeader("accessToken", accessToken);
        },
    });
}



const resolvedQueries = (status, usertype) => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let getDeals;
	if (userisIn == "local") {
		getDeals = apiBaseURLOXY + "queryDetailsBasedOnPrimaryType";
	} else {
		getDeals = apiBaseURLOXY + "queryDetailsBasedOnPrimaryType";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
		status: status,
		primaryType: usertype,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: getDeals,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			console.log(data);

			const userResolvedQueryText =
				status === "Completed" && usertype === "LENDER"
					? "No of Lender Resolved queries"
					: "No of Borrower Resolved queries";
			const countofresolvedgqueryText =
				status === "Completed" && usertype === "LENDER"
					? data.lenderCount
					: data.borrowerCount;

			$(".userResolvedQuery").html(userResolvedQueryText);
			$(".countofresolvedgquery").html(countofresolvedgqueryText);

			totalEntries = data.count;

			const template = document.getElementById("displayDealsScript").innerHTML;
			Mustache.parse(template);
			const html = Mustache.to_html(template, {
				data: data.listOfUserQueryDetailsResponseDto,
			});
			$("#displayDealsData").html(html);
			$(".loading").hide();

			let displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".dashBoardPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					var postData = {
						pageSize: "10",
						pageNo: num,
						status: status,
						primaryType: usertype,
					};
					var postData = JSON.stringify(postData);

					let getDeals;
					if (userisIn == "local") {
						getDeals = apiBaseURLOXY + "queryDetailsBasedOnPrimaryType";
					} else {
						getDeals = apiBaseURLOXY + "queryDetailsBasedOnPrimaryType";
					}

					$.ajax({
						url: getDeals,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							const userResolvedQueryText =
								status === "Completed" && usertype === "LENDER"
									? "No of Lender Resolved queries"
									: "No of Borrower Resolved queries";
							const countofresolvedgqueryText =
								status === "Completed" && usertype === "LENDER"
									? data.lenderCount
									: data.borrowerCount;

							$(".userResolvedQuery").html(userResolvedQueryText);
							$(".countofresolvedgquery").html(countofresolvedgqueryText);
							const template =
								document.getElementById("displayDealsScript").innerHTML;
							Mustache.parse(template);
							const html = Mustache.to_html(template, {
								data: data.listOfUserQueryDetailsResponseDto,
							});
							$("#displayDealsData").html(html);
							$(".loading").hide();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	// $(".loadingSec").hide();
};

const countofpendingquery = (queryStatus, userType) => {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const primaryType = sprimaryType;
	const accessToken = saccessToken;

	var postData = {
		status: queryStatus,
	};

	var postData = JSON.stringify(postData);

	const countQuery =
		userisIn == "local"
			? apiBaseURLOXY + "countOfQueriesBasedOnStatus"
			: apiBaseURLOXY + "countOfQueriesBasedOnStatus";

	$.ajax({
		url: countQuery,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			// $(".countofquery").html(data.count);
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
		},

		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};
/**************** Lender Deal Withdrawal Request start by livin*****************/

const lenderDealWithdrawalRequest = (userType) => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let getLenders;
	if (userisIn == "local") {
		getLenders = apiBaseURLOXY + "listOfWithdrawalsRequestedByLenders";
	} else {
		getLenders = apiBaseURLOXY + "listOfWithdrawalsRequestedByLenders";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
		userType
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	$.ajax({
		url: getLenders,
		dataType: "json",
		contentType: "application/json",
		type: "POST",
		data: postData,
		success: function (data, textStatus, xhr) {
			console.log(data);

			if (data.lenderWithdrawalFundsFromDealsResponseDto == null) {
				$(".noRecordFound").show();
			} else {
				totalEntries = data.totalCount;
				const template = document.getElementById(
					"loadDealwithdrawfundslistTpl"
				).innerHTML;
				Mustache.parse(template);

				const html = Mustache.to_html(template, {
					data: data.lenderWithdrawalFundsFromDealsResponseDto,
				});
				$("#dealwithdrawfundslist").html(html);

				let displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				/*888888888888888*/
				$(".lenderswithdrawalPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...

						var postData = {
							pageNo: num,
							pageSize: 10,
						};

						var postData = JSON.stringify(postData);

						let getLenders;
						if (userisIn == "local") {
							getLenders =
								apiBaseURLOXY + "listOfWithdrawalsRequestedByLenders";
						} else {
							getLenders =
								apiBaseURLOXY + "listOfWithdrawalsRequestedByLenders";
						}

						$.ajax({
							url: getLenders,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								console.log(data);
								const template = document.getElementById(
									"loadDealwithdrawfundslistTpl"
								).innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.lenderWithdrawalFundsFromDealsResponseDto,
								});
								$("#dealwithdrawfundslist").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
				/*888888888888888*/
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

function dealwithdrawalApproveAlert(Id, dealId) {
	$(".withdrwalapprove-Text").html("Aprroved Date");

	$("#modal-ApprovedTheWithdrawalRequest").modal("show");
	$(".dealWithdraw_Btn").attr(
		"onClick",
		'approvedDealwithdrawalConfirms("' + Id + '","' + dealId + '","APPROVED")'
	);
}

function updatefdexecutedInfo(loanId) {
	$("#fdrepaymentbtn").attr("data-loanid", loanId);
	$("#modal-fdexecutedPaymentDetailsInfo").modal("show");
}

const confirmFdClosedRepaymentInfo = () => {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const borrowerPaymentId = $("#fdrepaymentbtn")
		.attr("data-loanid")
		.substring(6);
	const amountReturnedToRepayment = $("#fdrepaymentamount").val();
	const amountReturnedToAnother = $("#fdreturntoanother").val();

	let isValid = true;

	if (amountReturnedToRepayment == "") {
		$("#fdrepaymentamounttoerror").show();
		isValid = false;
	} else {
		$("#fdrepaymentamounttoerror").hide();
	}

	if (amountReturnedToAnother == "") {
		$("#fdrepaymentamounttoAnothererror").show();
		isValid = false;
	} else {
		$("#fdrepaymentamounttoAnothererror").hide();
	}
	const apiUIrl = apiBaseURLOXY + "fd-status-updated";

	var postData = {
		borrowerPaymentId,
		amountReturnedToRepayment,
		amountReturnedToAnother,
	};

	const options = {
		method: "PATCH",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: JSON.stringify(postData),
	};

	if (isValid == true) {
		fetch(apiUIrl, options)
			.then((response) => response.json())
			.then((data) => {
				$("#modal-fdexecutedPaymentDetailsInfo").modal("hide");
				$("#modal-fdupdatedatesaveconfirmation").modal("show");

				setTimeout(() => {
					location.reload();
				}, 3000);

				console.log(data);
			})
			.catch((error) => {
				console.log("Error: ", error);
			});
	} else {
		isValid = false;
	}
};

function dealwithdrawalRejectAlert(Id, dealId) {
	$(".withdrwalapprove-Text").html("Reject Date");
	$(".approve-ConfirmText").html("Reject confirmation");

	var datePick = new Date();
	var month = parseInt(datePick.getMonth() + 1);
	if (month <= 9) {
		month = "0" + month;
	}

	var detfulldate =
		datePick.getDate() + "/" + month + "/" + datePick.getFullYear();
	// approvedDealwithdrawalConfirms(Id,dealId,'REJECTED',detfulldate);

	$(".withdrwalapprove-Text,.date,.label-account,.label-dropdown").hide();
	$(".divPartshow").show();
	$("#modal-ApprovedTheWithdrawalRequest").modal("show");
	$(".dealWithdraw_Btn").attr(
		"onClick",
		'approvedDealwithdrawalConfirms("' +
			Id +
			'","' +
			dealId +
			'","REJECTED","' +
			detfulldate +
			'")'
	);
}

function approvedDealwithdrawalConfirms(Id, dealId, status, curreentDate) {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var accountType = $("#debitedAcc").val();
	var approvedConfimation = $("#withdrawalDisbursementDate").val();

	if (approvedConfimation == "") {
		approvedConfimation = curreentDate;
	}

	if (status == "REJECTED") {
		var comments = $(".rejectionCommenmts").val();

		if (comments == "") {
			$(".rejectionSpan").show();
			return false;
		} else {
			$(".rejectionSpan").hide();
		}

		var postData = {
			id: Id,
			status: status,
			paidDate: approvedConfimation,
			remarks: comments,
		};
	} else {
		var postData = {
			id: Id,
			status: status,
			paidDate: approvedConfimation,
			accountType: accountType,
		};
	}

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var lenderWithDraw = apiBaseURLOXY + "approvingWithdrawalRequest";
	} else {
		var lenderWithDraw = apiBaseURLOXY + "approvingWithdrawalRequest";
	}

	$.ajax({
		url: lenderWithDraw,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-ApprovedTheWithdrawalRequest").modal("hide");

			if (status == "APPROVED") {
				$(".RejectApprovewithdrawal").addClass("modal-success");
				$(".withdrawal-Text").html(
					"you have successfully approved the lender withdrawal request"
				);
				$("#modal-withdrawalApproveReject").modal("show");
			} else {
				$(".RejectApprovewithdrawal").addClass("modal-success");
				$(".withdrawal-Text").html(
					"you have successfully rejected the lender withdrawal request"
				);
				$("#modal-withdrawalApproveReject").modal("show");
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$("#modal-ApprovedTheWithdrawalRequest").modal("hide");
			if (arguments[0].responseJSON.errorCode == 109) {
				$("#modal-calroi-sheet").modal("hide");
				$(".RejectApprovewithdrawal").addClass("modal-danger");
				$(".withdrawal-Text").html("your had already approved");
				$("#modal-withdrawalApproveReject").modal("show");
			}

			if (arguments[0].responseJSON.errorCode == 114) {
				$("#modal-calroi-sheet").modal("hide");
				$(".RejectApprovewithdrawal").addClass("modal-danger");
				$(".withdrawal-Text").html(arguments[0].responseJSON.errorMessage);
				$("#modal-withdrawalApproveReject").modal("show");
			}

			if (arguments[0].responseJSON.errorCode == 108) {
				$("#modal-calroi-sheet").modal("hide");
				$(".RejectApprovewithdrawal").addClass("modal-danger");
				$(".withdrawal-Text").html(arguments[0].responseJSON.errorMessage);
				$("#modal-withdrawalApproveReject").modal("show");
			}
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

$(document).ready(function () {
	$("#partner-add-btn").click(function () {
		$("#borrowerpartnerdetailspanel").show();
		$("#partnertitle").text("Add Partner Details");
		$("#forAdd").show();
	});

	$("#dealer-add-btn").click(function () {
		$("#forTransfer").hide();
	});
});

$(document).ready(function () {
	$("#partnerSubmission-submit-flow").click(function () {

		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		userId = suserId;
		primaryType = sprimaryType;
		accessToken = saccessToken;

		var enteredPartnerId = $("#partnerEditing").val();
		var enteredutmName = $("#utmSourceNameValue").val();
		var entereduserType = $("#userTypename").val();
		var enteredrepaymentMethod = $("input[name=partnercibilRoi]:checked").val();
		var referralcheck = $("input[name=partnerReferralcheck]:checked").val();

		var enteredloanAmountCalculation = $("#partnerLoanAMOUNT").val();
		var enteredduration = $("#partnerduration").val();
		var enteredfirstCibilScore = $("#partnerCibilroi1").val();
		var enteredsecondCibilScore = $("#partnerCibilroi2").val();
		var enteredthirdCibilScore = $("#partnerCibilroi3").val();
		var enteredfourthCibilScore = $("#partnerCibilroi4").val();
		var enteredfifthCibilScore = $("#partnerCibilroi5").val();
		var lenderfee = $(".lenderproceesingfee").val();
		var borrowerfee = $(".bproceesingfee").val();

		var partnerchoice = $("#lenderchoicePartner").val();
		var partnerchoiceDealId = $("#partnerchoiceDeal").val();

		var partnerchoiceStatus = $(".partnerlenderChoose").attr("data-status");

		var isValid = true;

		if (enteredutmName == "") {
			$(".utmSourceNamenameError").show();
			isValid = false;
		} else {
			$(".utmSourceNamenameError").hide();
		}

		if (entereduserType == "") {
			$(".userTypenameError").show();
			isValid = false;
		} else {
			$(".userTypenameError").hide();
		}

		if (enteredrepaymentMethod == undefined) {
			$(".partnerRepayment").show();
			isValid = false;
		} else {
			$(".partnerRepayment").hide();
		}

		if (enteredloanAmountCalculation == "") {
			$(".partnerloansamount").show();
			isValid = false;
		} else {
			$(".partnerloansamount").hide();
		}

		if (enteredduration == "") {
			$(".partnerDurationError").show();
			isValid = false;
		} else {
			$(".partnerDurationError").hide();
		}

		if (enteredfirstCibilScore == "") {
			$(".roicbil400error").show();
			isValid = false;
		} else {
			$(".roicbil400error").hide();
		}

		if (enteredsecondCibilScore == "") {
			$(".roicbil500Error").show();
			isValid = false;
		} else {
			$(".roicbil500Error").hide();
		}

		if (lenderfee == "") {
			$(".lenderProcessingfee").show();
			isValid = false;
		} else {
			$(".lenderProcessingfee").hide();
		}

		if (borrowerfee == "") {
			$(".borrowerProcessingfee").show();
			isValid = false;
		} else {
			$(".borrowerProcessingfee").hide();
		}

		if (enteredthirdCibilScore == "") {
			$(".roicbil600").show();
			isValid = false;
		} else {
			$(".roicbil600").hide();
		}

		if (enteredfourthCibilScore == "") {
			$(".roicbil700").show();
			isValid = false;
		} else {
			$(".roicbil700").hide();
		}

		if (enteredfifthCibilScore == "") {
			$(".roicbil800").show();
			isValid = false;
		} else {
			$(".roicbil800").hide();
		}

		if (referralcheck == undefined) {
			$(".partnerreferralcheckerror").show();
			isValid = false;
		} else {
			$(".partnerreferralcheckerror").hide();
		}

		if (partnerchoice == "") {
			$(".partnerlenderChoose").show();
			isValid = false;
		} else {
			$(".partnerlenderChoose").hide();
		}

		if (
			partnerchoice == "LENDERSFROMOXYLOANS" &&
			(partnerchoiceStatus != "OPEN" || partnerchoiceStatus == "")
		) {
			if (partnerchoiceDealId == "") {
				$(".partnerChoosenDealId").show();
				isValid = false;
			} else {
				$(".partnerChoosenDealId").hide();
			}
		} else {
			partnerchoiceDealId = 0;
		}

		var postData = {
			id: enteredPartnerId,
			utmName: enteredutmName,
			type: entereduserType,
			repaymentMethod: enteredrepaymentMethod,
			loanAmountCalculation: enteredloanAmountCalculation,
			duration: enteredduration,
			referralCheck: referralcheck,
			firstCibilScore: enteredfirstCibilScore,
			secondCibilScore: enteredsecondCibilScore,
			thirdCibilScore: enteredthirdCibilScore,
			fourthCibilScore: enteredfourthCibilScore,
			fifthCibilScore: enteredfifthCibilScore,
			lenderProcessingFee: lenderfee,
			borrowerProcessingFee: borrowerfee,
			lenderChoice: partnerchoice,
			dealId: partnerchoiceDealId,
		};

		var postData = JSON.stringify(postData);

		if (userisIn == "local") {
			var getPartnerUtm = apiBaseURLOXY + "updatingTypesOfBorrowersAndInfo";
		} else {
			var getPartnerUtm = apiBaseURLOXY + "updatingTypesOfBorrowersAndInfo";
		}
		console.log(postData);

		if (isValid == true) {
			$.ajax({
				url: getPartnerUtm,
				type: "PATCH",
				data: postData,
				contentType: "application/json",
				dataType: "json",
				success: function (data, textStatus, xhr) {
					partnerUserType = data.userType;
					partnerUtmName = data.utmName;
					if (userisIn == "local") {
						partnerutm =
							"http://182.18.139.198/new/register_borrower?utm=" +
							partnerUtmName;
					} else {
						partnerutm =
							"https://www.oxyloans.com/new/register_borrower?utm=" +
							partnerUtmName;
					}
					$("#partnerCopyURL").val(partnerutm);
					$("#borrowerpartnerdetailspanel").hide();
					$(".btn-partner-borrower").show();
					$("#modal-generatedpasswordPartner").modal("show");
				},

				error: function (xhr, textStatus, errorThrown) {
					console.log("Error Something");

					console.log(arguments[0]);
				},

				beforeSend: function (xhr) {
					xhr.setRequestHeader("accessToken", saccessToken);
				},
			});
		}
	});
});

function viewPartnersANDDealers(type) {
	$(".loading").show();
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var searchUser = apiBaseURLOXY + "borrowersBasedOnType";
	} else {
		var searchUser = apiBaseURLOXY + "borrowersBasedOnType";
	}
	var postData = {
		pageNo: 1,
		pageSize: 10,
		userType: type,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: searchUser,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.countValue;
			var template = document.getElementById("displayUserTypeScript").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, {
				data: data.oxyUserTypeResponseDto,
			});
			$("#displayUserData").html(html);
			$(".loading").hide();

			var displayPageNo = totalEntries / 10;
			displayPageNo = displayPageNo + 1;

			$(".dealersPagination")
				.bootpag({
					total: displayPageNo,
					page: 1,
					maxVisible: 5,
					leaps: true,
					firstLastUse: true,
					first: "←",
					last: "→",
					wrapClass: "pagination",
					activeClass: "active",
					disabledClass: "disabled",
					nextClass: "next",
					prevClass: "prev",
					lastClass: "last",
					firstClass: "first",
				})
				.on("page", function (event, num) {
					var postData = {
						pageNo: num,
						pageSize: 10,
						userType: type,
					};
					var postData = JSON.stringify(postData);
					if (userisIn == "local") {
						var searchUser = apiBaseURLOXY + "borrowersBasedOnType";
					} else {
						var searchUser = apiBaseURLOXY + "borrowersBasedOnType";
					}
					$.ajax({
						url: searchUser,
						type: "POST",
						data: postData,
						contentType: "application/json",
						dataType: "json",
						success: function (data, textStatus, xhr) {
							var template = document.getElementById(
								"displayUserTypeScript"
							).innerHTML;
							Mustache.parse(template);
							var html = Mustache.to_html(template, {
								data: data.oxyUserTypeResponseDto,
							});
							$("#displayUserData").html(html);
							$(".loading").hide();
						},
						error: function (xhr, textStatus, errorThrown) {
							console.log("Error Something");
						},
						beforeSend: function (xhr) {
							xhr.setRequestHeader("accessToken", saccessToken);
						},
					});
				});
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

//************* fetch utm details      *************************

function fetchUtmPartnerDetails(userID, editid) {
	sprimaryType = getCookie("sUserType");
	saccessToken = getCookie("saccessToken");

	if (userID != 0) {
		$("#borrowerpartnerdetailspanel").show();
		$("#partnertitle").text("Add Partner Details");
		$("#forAdd").show();
		$(".editnameofUtm").html("submit");

		if (userisIn == "local") {
			var getUTMdetails = apiBaseURLOXY + userID + "/getSingleUserType";
		} else {
			var getUTMdetails = apiBaseURLOXY + userID + "/getSingleUserType";
		}

		$.ajax({
			url: getUTMdetails,
			type: "GET",
			success: function (data, textStatus, xhr) {
				$("#utmSourceNameValue").val(data.utmName);
				$("#userTypename").val(data.type);
				$("input[name=partnercibilRoi]")
					.filter("[value=" + data.repaymentMethod + "]")
					.prop("checked", true);

				$("input[name=partnerReferralcheck]")
					.filter("[value=" + data.referralCheckStatus + "]")
					.prop("checked", true);
				$("#partnerLoanAMOUNT").val(data.loanAmountCalculation);
				$("#partnerduration").val(data.duration);
				$("#partnerCibilroi1").val(data.firstCibilScore);
				$("#partnerCibilroi2").val(data.secondCibilScore);
				$("#partnerCibilroi3").val(data.thirdCibilScore);
				$("#partnerCibilroi4").val(data.fourthCibilScore);
				$("#lenderchoicePartner").val(data.lenderChoice);
				$("#partnerCibilroi5").val(data.fifthCibilScore);
				$(".lenderproceesingfee").val(data.lenderProcessingFee);
				$(".bproceesingfee").val(data.borrowerProcessingFee);
				$(".partnerlenderChoose").attr("data-status", data.dealStatus);

				if (
					data.lenderChoice == "LENDERSFROMOXYLOANS" &&
					data.dealStatus != "OPEN"
				) {
					$(".oxypartnerChoice").show();
					$(".partnerlenderChoose").attr("data-status", data.dealStatus);
				} else {
					$(".oxypartnerChoice").hide();
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
}

function copyThePartnerUrl(utmName) {
	if (userisIn == "local") {
		var element = "http://182.18.139.198/new/register_borrower?utm=" + utmName;
	} else {
		var element =
			"https://www.oxyloans.com/new/register_borrower?utm=" + utmName;
	}

	var $temp = $("<input>");
	$("body").append($temp);
	$temp.val(element).select();
	document.execCommand("copy");
	$temp.remove();
	$(".copyPartnerLink-" + utmName).html("Copied!");
}

function approveingwithdrawalPrincipal(userid) {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var approveInterestPay =
			apiBaseURLOXY + userid + "/deal-withdrawal-interest";
	} else {
		var approveInterestPay =
			apiBaseURLOXY + userid + "/deal-withdrawal-interest";
	}

	$.ajax({
		url: approveInterestPay,
		type: "GET",
		success: function (data, textStatus, xhr) {
			console.log(data);

			var template = document.getElementById(
				"displayh2hPrincipalScript2"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data,
			});
			$("#displayTheApproveh2hWithdrawal").html(html);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function h2hPrincipalApprovedUsers(account, userid) {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var postData = {
		accountType: account,
		id: userid,
		amountType: "INTEREST",
	};

	var postData = JSON.stringify(postData);

	console.log(postData);

	if (userisIn == "local") {
		var approvingUser = apiBaseURLOXY + "h2happroval";
	} else {
		var approvingUser = apiBaseURLOXY + "h2happroval";
	}

	$.ajax({
		url: approvingUser,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-H2H-ApprovedWithdrawalMessage").modal("show");
			setTimeout(function () {
				location.reload();
			}, 7000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function retunrPrincipalAmount(dealId) {
	$(".partiallyprincipalRetunrs").hide();

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var approveWithdrawalData = [];

	const choosenWalletUsers = 0;
	$("input:checkbox[name=widthdrawalCheckPrincipal]:checked").each(function (
		index,
		value
	) {
		var _thisid = $(this).attr("data-userID");
		var enteredAmount = $(".response_" + _thisid).val();
		var currentamount = $(".paticipatedAmountVal_" + _thisid).val();
		var userChoosenType = $(this).attr("data-UserChooosenType_" + _thisid);

		if (enteredAmount == "" || enteredAmount == "Enter Principal Amount") {
			enteredAmount = 0;
		}

		approveWithdrawalData.push({
			userId: _thisid,
			currentAmount: currentamount,
			pricipalReturnAmount: enteredAmount,
		});
	});

	var approveWalletLender = [];
	$("input:checkbox[name=checkAllWalletLoadMembers]:checked").each(function (
		index,
		value
	) {
		var _thisid = $(this).attr("wallet-userID");
		var loadAmount = $(".loadwallet_" + _thisid).val();
		var previousRequestedAmount = $(
			".previousRequestedWalletVal_" + _thisid
		).val();
		var userChoosenBankType = $(this).attr("data-UserChooosenType_" + _thisid);
		var totalLoadAmount = $(this).attr("totalAmount_UserId");

		console.log(userChoosenBankType);

		if (loadAmount == "" || loadAmount == "Enter Wallet Amount") {
			loadAmount = 0;
		}

		approveWalletLender.push({
			userId: _thisid,
			currentAmount: totalLoadAmount,
			previousRequestedAmount: previousRequestedAmount,
			movingToWallet: loadAmount,
		});
	});

	const newArryapostData = [...approveWithdrawalData, ...approveWalletLender];

	// if (
	// 	approveWithdrawalData.length == null ||
	// 	approveWithdrawalData.length == 0
	// ) {
	// 	$("#modal-principalErrorMeaages")
	// 		.removeClass("modal-success")
	// 		.addClass("modal-warning");
	// 	$("#modal-principalErrorMeaages #principalError").html(
	// 		"You chose wallet users. It is only for bank account users."
	// 	);
	// 	$("#modal-principalErrorMeaages").modal("show");
	// 	return false;
	// }

	var postData = {
		lenderPrincipalRequestDto: newArryapostData,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);

	if (userisIn == "local") {
		var partialApprove = apiBaseURLOXY + dealId + "/principalReturn";
	} else {
		var partialApprove = apiBaseURLOXY + dealId + "/principalReturn";
	}

	$.ajax({
		url: partialApprove,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-partially-ApprovedSuccessMessage").modal("show");

			setTimeout(function () {
				location.reload();
				$(".partiallyprincipalRetunrs").show();
			}, 3000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");

			$(".partiallyprincipalRetunrs").show();
			$(".modal-body #principalError").html(
				arguments[0].responseJSON.errorMessage
			);

			if (arguments[0].responseJSON.errorCode == 108) {
				$("#modal-principalErrorMeaages").modal("show");
			}

			if (arguments[0].responseJSON.errorCode == 112) {
				$("#modal-principalErrorMeaages").modal("show");
			}
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}
function moveWalletConfirmation(dealId) {
	$(".movewalletfun").attr("disabled", true);
	$("#modal-ApproveMoveToWallet").modal("show");
}

function loadingLenderWallets(dealId) {

	$(".dealPrincipal_Btn").attr("disabled", true);
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var approveWalletLender = [];

	let choosenprincipalUsers = 0;

	$("input:checkbox[name=checkAllWalletLoadMembers]:checked").each(function (
		index,
		value
	) {
		var _thisid = $(this).attr("wallet-userID");
		var loadAmount = $(".loadwallet_" + _thisid).val();
		var previousRequestedAmount = $(
			".previousRequestedWalletVal_" + _thisid
		).val();
		var userChoosenBankType = $(this).attr("data-UserChooosenType_" + _thisid);
		var totalLoadAmount = $(this).attr("totalAmount_UserId");

		console.log(userChoosenBankType);

		if (loadAmount == "" || loadAmount == "Enter Wallet Amount") {
			loadAmount = 0;
		}

		approveWalletLender.push({
			userId: _thisid,
			currentAmount: totalLoadAmount,
			previousRequestedAmount: previousRequestedAmount,
			movingToWallet: loadAmount,
		});
	});

	var approveWithdrawalData = [];
	$("input:checkbox[name=widthdrawalCheckPrincipal]:checked").each(function (
		index,
		value
	) {
		var _thisid = $(this).attr("data-userID");
		var enteredAmount = $(".response_" + _thisid).val();
		var currentamount = $(".paticipatedAmountVal_" + _thisid).val();
		var userChoosenType = $(this).attr("data-UserChooosenType_" + _thisid);

		if (enteredAmount == "" || enteredAmount == "Enter Principal Amount") {
			enteredAmount = 0;
		}

		approveWithdrawalData.push({
			userId: _thisid,
			currentAmount: currentamount,
			pricipalReturnAmount: enteredAmount,
		});
	});

	const newArryapostData = [...approveWalletLender, ...approveWithdrawalData];

	var account = $(".movewalletaccountNO").val();

	if (account == "") {
		$(".walletmoveerror").show();
		return false;
	} else {
		$(".walletmoveerror").hide();
	}

	if (account != "wallet") {
		var postData = {
			debitAccountNo: account,
			lenderPaticipationRequest: newArryapostData,
		};

		if (userisIn == "local") {
			var loadWallet = apiBaseURLOXY + dealId + "/movingPrincipalToH2h";
		} else {
			var loadWallet = apiBaseURLOXY + dealId + "/movingPrincipalToH2h";
		}
	} else {
		if (userisIn == "local") {
			var loadWallet = apiBaseURLOXY + dealId + "/movingPrincipalToWallet";
		} else {
			var loadWallet = apiBaseURLOXY + dealId + "/movingPrincipalToWallet";
		}

		var postData = {
			lenderPaticipationRequest: newArryapostData,
		};
	}

	var postData = JSON.stringify(postData);

	$.ajax({
		url: loadWallet,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$(".movewalletfun").attr("disabled", false);
			$("#modal-ApproveMoveToWallet").modal("hide");

			$(".loadedWalletUserInfo .successMessage").html(
				"users wallet loaded successfully, a page will refresh after 5s"
			);
			$("#modal-partially-ApprovedSuccessMessage").modal("show");

			setTimeout(function () {
				location.reload();
				$(".dealPrincipal_Btn").attr("disabled", false);
			}, 2500);
		},
		error: function (xhr, textStatus, errorThrown) {
			$(".movewalletfun,.dealPrincipal_Btn").attr("disabled", false);

			if (
				arguments[0].responseJSON.errorCode == 105 ||
				arguments[0].responseJSON.errorCode == 124 ||
				arguments[0].responseJSON.errorCode == 112
			) {
				$(".walletmoveerror").html(arguments[0].responseJSON.errorMessage);
				$(".walletmoveerror").show();
			}
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

//*************************Partial Approve Users*******************************

function partialApprovedUsersinitiated(dealId, status) {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (status == "INITIATED") {
		$(".h2hInitiatedUsers").show();
	} else {
		$(".h2hPrincipalUsers").show();
	}

	if (userisIn == "local") {
		var initiatedUsers =
			apiBaseURLOXY + dealId + "/" + status + "/principalReturnInitiated";
	} else {
		var initiatedUsers =
			apiBaseURLOXY + dealId + "/" + status + "/principalReturnInitiated";
	}

	$.ajax({
		url: initiatedUsers,
		type: "GET",
		success: function (data, textStatus, xhr) {
			console.log(data);

			if (data.lenderPrincipalRequestDto.length == 0) {
				$(".sumofPrinInterest").html("0");
				$(".dispalyNodata").show();
			} else {
				$(".sumofPrinInterest").html(data.amount);
				h2hprincipalDatePicker = data.date;
				var template = document.getElementById(
					"displayInitiatedScript"
				).innerHTML;

				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.lenderPrincipalRequestDto,
				});
				$("#displayinitiatedData").html(html);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function moveinitiatedTransaction(status, dealId) {

	$("#h2hPrincipalUsers").attr("disabled", true);

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var h2hDeal = apiBaseURLOXY + dealId + "/pricipalReturnToH2H";
	} else {
		var h2hDeal = apiBaseURLOXY + dealId + "/pricipalReturnToH2H";
	}
	var postData = {
		status: status,
		accountType: null,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: h2hDeal,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#h2hPrincipalUsers").attr("disabled", false);
			$("#modal-movedPrincipalToh2h2").modal("show");
		},
		statusCode: {
			400: function (response) {
				$("#modal-already-moved-h2h").modal("show");
			},
		},
		error: function (xhr, textStatus, errorThrown) {
			$("#h2hPrincipalUsers").attr("disabled", false);
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

const moveinitiatedTransactionprincipal = (status, dealId) => {
	$("#modal-ApprovePrincipalAmount").modal("show");
	$(".dealPrincipal_Btn").attr("data-status", status);
	$(".dealPrincipal_Btn").attr("data-dealId", dealId);
};

const moveinitiatedprincipal = () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const status = $(".dealPrincipal_Btn").attr("data-status");
	const dealId = $(".dealPrincipal_Btn").attr("data-dealId");
	const account = $(".principaldebitedAccount").val();

	const h2hDeal =
		userisIn == "local"
			? `${apiBaseURLOXY}${dealId}/pricipalReturnToH2H`
			: `${apiBaseURLOXY}${dealId}/pricipalReturnToH2H`;

	const postData = {
		status: status,
		accountType: account,
	};

	const options = {
		method: "PATCH",
		headers: {
			accessToken: saccessToken,
			"Content-Type": "application/json",
		},
		body: JSON.stringify(postData),
	};

	fetch(h2hDeal, options)
		.then((response) => {
			if (response.ok) {
				$("#modal-ApprovePrincipalAmount").modal("hide");
				$("#modal-movedPrincipalToh2h2").modal("show");
			} else if (response.status === 400) {
				$("#modal-already-moved-h2h").modal("show");
			}
		})
		.catch((error) => {
			console.log("Error: ", error);
		});
};

const transactionsalertInfo = () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const fromdate = $("#alertFromDate").val();
	const Todate = $("#alertToDate").val();
	const trnsType = $(".qraccountType").val();
	const debitAccount = $(".qraccountNo").val();

	const transDetails =
		userisIn == "local"
			? `${apiBaseURLOXY}getBankTransactions`
			: `${apiBaseURLOXY}getBankTransactions`;

	const postData = {
		fromDate: fromdate,
		toDate: Todate,
		transactionType: trnsType,
		accountNumber: debitAccount,
	};

	const options = {
		method: "POST",
		headers: {
			accessToken: saccessToken,
			"Content-Type": "application/json",
		},
		body: JSON.stringify(postData),
	};

	fetch(transDetails, options)
		.then((response) => response.json())
		.then((data) => {
			$("#downloadExcelpath").val(data.downloadUrl);
			const template = document.getElementById(
				"displayTransactionTpl"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.bankTransactionsBreakUpDtoList,
			});
			$("#displayTransactionInfo").html(html);
		})
		.catch((error) => {
			console.log("Error: ", error);
		});
};

const currentMonthTransactionsalertInfo = () => {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const d = new Date();
	const currYear = d.getFullYear();
	let currMonth = d.getMonth() + 1;

	if (currMonth <= 9) {
		currMonth = "0" + currMonth;
	}

	const Todate = `${d.getDate()}/${currMonth}/${currYear}`;
	const fromdate = "01/01/2022";

	const transDetails =
		userisIn == "local"
			? `${apiBaseURLOXY}getBankTransactions`
			: `${apiBaseURLOXY}getBankTransactions`;

	const postData = {
		fromDate: fromdate,
		toDate: Todate,
		transactionType: "CREDITED",
		accountNumber: "777705849441",
	};

	const options = {
		method: "POST",
		headers: {
			accessToken: saccessToken,
			"Content-Type": "application/json",
		},
		body: JSON.stringify(postData),
	};

	fetch(transDetails, options)
		.then((response) => response.json())
		.then((data) => {
			$("#downloadExcelpath").val(data.downloadUrl);
			const template = document.getElementById(
				"displayTransactionTpl"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.bankTransactionsBreakUpDtoList,
			});
			$("#displayTransactionInfo").html(html);
		})
		.catch((error) => {
			console.log("Error: ", error);
		});
};

const downloadTransactionExcel = () => {
	var downloadPath = $("#downloadExcelpath").val();
	window.open(downloadPath, "_blank");
};

const downloadUtmUsers = (primarytype) => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	const utmSource = $("#utmValue").val();

	const getUtmList =
		userisIn == "local"
			? `${apiBaseURLOXY}utmBasedExcelDownload/${primarytype}/${utmSource}`
			: `${apiBaseURLOXY}utmBasedExcelDownload/${primarytype}/${utmSource}`;

	const options = {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	};

	fetch(getUtmList, options)
		.then((response) => response.json())
		.then((data) => {
			if (data.downloadUrl !== "") {
				window.open(data.downloadUrl, "_blank");
			} else {
				alert("download URLs is empty");
			}
		})
		.catch((error) => {
			console.log("Error: ", error);
		});
};

const readCmsDatepopup = () => {
	$("#modal-readFolder-filesondate").modal("show");
};

$(document).ready(() => {
	$("#readCMSReportsd").click(() => {

		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		const readfileDate = $("#cmsfilesRead").val();
		let sendNotification = $("input[name=readReportsCheck]:checked").val();

		sendNotification = sendNotification === "on" ? true : false;

		const readCMS =
			userisIn == "local"
				? `${apiBaseURLOXY}updationFromICICIFiles`
				: `${apiBaseURLOXY}updationFromICICIFiles`;

		const postData = {
			date: readfileDate,
			sendMessages: sendNotification,
			readingType: "date",
		};

		const options = {
			method: "POST",
			headers: {
				accessToken: saccessToken,
				"Content-Type": "application/json",
			},
			body: JSON.stringify(postData),
		};

		fetch(readCMS, options)
			.then((response) => response.json())
			.then((data) => {
				$(".modal-body #paymentError").html(
					"files read successfully and updated on lender dashboard."
				);
				$("#modal-readFolder-filesondate").modal("hide");
				$("#modal-success-PaymentdateUpdate").modal("show");
			})
			.catch((error) => {
				console.log("Error: ", error);
			});
	});
});

$(document).ready(() => {
	$("#readCMSReportsm").click(() => {
		
		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		const readfileMonth = $("#readNotificationMonthBase").val();
		const readfileYear = $("#readNotificationYearbase").val();

		const fulldate = `${readfileMonth}-${readfileYear}`;

		let sendNotification = $("input[name=readReportsCheck]:checked").val();

		sendNotification = sendNotification === "on" ? true : false;

		const readCMS =
			userisIn == "local"
				? `${apiBaseURLOXY}updationFromICICIFiles`
				: `${apiBaseURLOXY}updationFromICICIFiles`;

		const postData = {
			date: fulldate,
			sendMessages: sendNotification,
			readingType: "month",
		};

		const options = {
			method: "POST",
			headers: {
				accessToken: saccessToken,
				"Content-Type": "application/json",
			},
			body: JSON.stringify(postData),
		};

		fetch(readCMS, options)
			.then((response) => response.json())
			.then((data) => {
				$(".modal-body #paymentError").html(
					"files read successfully and updated on lender dashboard."
				);
				$("#modal-readFolder-filesondate").modal("hide");
				$("#modal-success-PaymentdateUpdate").modal("show");
			})
			.catch((error) => {
				console.log("Error: ", error);
			});
	});
});

const oxycmsoutputfileslist = () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const d = new Date();

	let month = d.getMonth() + 1;
	const year = d.getFullYear();
	let currentdate = d.getDate();

	if (month <= 9) {
		month = "0" + month;
	}

	if (currentdate <= 9) {
		currentdate = "0" + currentdate;
	}

	const readfileDate = `${currentdate}/${month}/${year}`;

	const otputfiles =
		userisIn == "local"
			? `${apiBaseURLOXY}listOfFilesInBeforeApproval`
			: `${apiBaseURLOXY}listOfFilesInBeforeApproval`;

	const postData = {
		date: readfileDate,
		folderType: "Oxyloans",
	};

	const options = {
		method: "POST",
		headers: {
			accessToken: saccessToken,
			"Content-Type": "application/json",
		},
		body: JSON.stringify(postData),
	};

	fetch(otputfiles, options)
		.then((response) => response.json())
		.then((data) => {
			console.log(data);

			let sum = 0;
			for (let i = 0; i < data.length; i++) {
				sum += data[i].amount;
			}

			$(".totalCmsamount").html(sum);

			if (data.length === 0) {
				$("#cmsdisplayNodata").show();
			} else {
				const template = document.getElementById(
					"displayDealsCmsFolderList"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.render(template, { data });
				$("#displaycmsoutputfolderFiles").html(html);
			}
		})
		.catch((error) => {
			console.log("Error: ", error);
			$("#cmsdisplayNodata").show();
			$(".cmsnodatafound").html("Error Something");
		});
};

const partnercmsoutputfileslist = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const d = new Date();
	let month = d.getMonth() + 1;
	const year = d.getFullYear();
	let currentdate = d.getDate();

	if (month <= 9) {
		month = "0" + month;
	}

	if (currentdate <= 9) {
		currentdate = "0" + currentdate;
	}

	const readfileDate = `${currentdate}/${month}/${year}`;

	const otputfiles =
		userisIn == "local"
			? `${apiBaseURLOXY}listOfFilesInBeforeApproval`
			: `${apiBaseURLOXY}listOfFilesInBeforeApproval`;

	const postData = {
		date: readfileDate,
		folderType: "Partner",
	};

	const options = {
		method: "POST",
		headers: {
			accessToken: saccessToken,
			"Content-Type": "application/json",
		},
		body: JSON.stringify(postData),
	};

	fetch(otputfiles, options)
		.then((response) => response.json())
		.then((data) => {
			let sum = 0;
			for (let i = 0; i < data.length; i++) {
				sum += data[i].amount;
			}

			if (data.length === 0) {
				$("#oxydisplayNodata").show();
			} else {
				$(".partnertotalCmsamount").html(sum);
				const template = document.getElementById(
					"partnerdisplayDealsCmsFolderList"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.render(template, { data });
				$("#partnerdisplaycmsoutputfolderFiles").html(html);
			}
		})
		.catch((error) => {
			console.log("Error: ", error);
			if (error.responseJSON && error.responseJSON.errorCode === 404) {
				$("#oxydisplayNodata").show();
			}
		});
};

const studentcmsoutputfileslist = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const d = new Date();
	let month = d.getMonth() + 1;
	const year = d.getFullYear();
	let currentdate = d.getDate();

	if (month <= 9) {
		month = "0" + month;
	}

	if (currentdate <= 9) {
		currentdate = "0" + currentdate;
	}

	const readfileDate = `${currentdate}/${month}/${year}`;

	const otputfiles =
		userisIn == "local"
			? `${apiBaseURLOXY}listOfFilesInBeforeApproval`
			: `${apiBaseURLOXY}listOfFilesInBeforeApproval`;

	const postData = {
		date: readfileDate,
		folderType: "OxyloansLoans",
	};

	const options = {
		method: "POST",
		headers: {
			accessToken: saccessToken,
			"Content-Type": "application/json",
		},
		body: JSON.stringify(postData),
	};

	fetch(otputfiles, options)
		.then((response) => response.json())
		.then((data) => {
			if (data.length === 0) {
				$("#nodatacmsStudentFiles").show();
			} else {
				const template = document.getElementById(
					"studentdisplayCmsFolderList"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.render(template, { data });
				$("#displaycmsStudentfiles").html(html);
			}
		})
		.catch((error) => {
			$("#nodatacmsStudentFiles").show();
			console.log("Error: ", error);
			if (error.responseJSON && error.responseJSON.errorCode === 404) {
				$("#nodatacmsStudentFiles").show();
			}
		});
};

const loadcmsFileDataStatus = (inputfiledata) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const cmsfileSatus =
		userisIn == "local"
			? `${apiBaseURLOXY}cms-files`
			: `${apiBaseURLOXY}cms-files`;

	const postData = {
		notify: false,
		folderPath: inputfiledata,
	};

	const options = {
		method: "POST",
		headers: {
			accessToken: saccessToken,
			"Content-Type": "application/json",
		},
		body: JSON.stringify(postData),
	};

	fetch(cmsfileSatus, options)
		.then((response) => response.json())
		.then((data) => {
			if (inputfiledata == 0) {
				if (data.length === 0) {
					$("#nodatacmsStatus").show();
				} else {
					const template = document.getElementById(
						"displayCmsDataScriptData"
					).innerHTML;
					Mustache.parse(template);
					const html = Mustache.render(template, { data });
					$("#displaycmsStatusData").html(html);
				}
			} else {
				if (data.length === 0) {
					$("#nodatacmsStatusfailure").show();
				} else {
					const template = document.getElementById(
						"displayCmsDataScriptDatafailures"
					).innerHTML;
					Mustache.parse(template);
					const html = Mustache.render(template, { data });
					$("#displaycmsStatusDatafailure").html(html);
				}
			}
		})
		.catch((error) => {
			console.log("Error: ", error);
		});
};

function loadCmsStatus() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var d = new Date();

	var month = d.getMonth() + 1;
	var year = d.getFullYear();
	var currentdate = d.getDate();

	if (month <= 9) {
		month = "0" + month;
	}

	if (currentdate <= 9) {
		currentdate = "0" + currentdate;
	}

	var readfileDate = currentdate + "/" + month + "/" + year;

	if (userisIn == "local") {
		var cmsStatus = apiBaseURLOXY + "cms-stats?date=" + readfileDate;
	} else {
		var cmsStatus = apiBaseURLOXY + "cms-stats?date=" + readfileDate;
	}

	$.ajax({
		url: cmsStatus,
		type: "GET",
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			// var sum = 0;
			// for (var i = 0; i < data.length; i++) {
			// 	sum = sum + data[i].amount;
			// }
			// if (data.length == 0) {
			// 	$("#oxydisplayNodata").show();
			// } else {
			// 	$(".partnertotalCmsamount").html(sum);
			// 	var template = document.getElementById(
			// 		"partnerdisplayDealsCmsFolderList"
			// 	).innerHTML;
			// 	Mustache.parse(template);
			// 	var html = Mustache.render(template, data);
			// 	var html = Mustache.to_html(template, { data: data });
			// 	$("#partnerdisplaycmsoutputfolderFiles").html(html);
			// }
		},

		error: function (request, error) {
			console.log("error");
			if (arguments[0].responseJSON.errorCode == 404) {
				$("#oxydisplayNodata").show();
			}
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function cmsSelectDateOptionsSearch() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var month = $(".cmsmonth").val();
	var year = $(".cmsYear").val();
	var currentdate = $(".cmsDay").val();
	var cmsSearchUserType = $(".cmsSearchUserType").val();

	var readfileDate = currentdate + "/" + month + "/" + year;

	if (userisIn == "local") {
		var otputfiles = apiBaseURLOXY + "listOfFilesInBeforeApproval";
	} else {
		var otputfiles = apiBaseURLOXY + "listOfFilesInBeforeApproval";
	}

	var postData = {
		date: readfileDate,
		folderType: cmsSearchUserType,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: otputfiles,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
		

				if(cmsSearchUserType=="Student"){                  
			      if(data.length==0){
				$("#displaycmsStudentfiles").html(
					'<tr id="displayNoRecords" class="displayRequests"><td colspan="12"><b>No Record found!</b></td></tr> '
				);
						$("#nodatacmsStudentFiles").show();

					}else{
						    const template = document.getElementById(
					"studentdisplayCmsFolderList"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.render(template, { data });
				$("#displaycmsStudentfiles").html(html);

					}
			

				}else{

					if(data.length==0){

				$("#displaycmsoutputfolderFiles").html(
					'<tr id="displayNoRecords" class="displayRequests"><td colspan="12"><b>No Record found!</b></td></tr> '
				);

					}else{
						var template = document.getElementById(
					"displayDealsCmsFolderList"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, { data: data });
				$("#displaycmsoutputfolderFiles").html(html);

					}

				

				}
			
		
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function finalyMoveCms() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var array = "";
	$("input:checkbox[name=cmsoutputfolderListUsers]:checked").each(function () {
		if (this.checked) {
			array += $(this).val() + ",";
		}
	});

	array = array.substring(0, array.length - 1);
	if ($(".cmsNotification").is(":checked")) {
		var notificationtolender = true;
	} else {
		var notificationtolender = false;
	}

	if (userisIn == "local") {
		var otputfiles = apiBaseURLOXY + "moveFileToApprovalFolder";
	} else {
		var otputfiles = apiBaseURLOXY + "moveFileToApprovalFolder";
	}

	var postData = {
		fileName: array,
		sendMessages: notificationtolender,
		folderType: "Oxyloans",
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: otputfiles,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			window.scrollTo(100, 0);
			$(".finallMoveCMSSucessmessage").show();
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function studentMoveCms() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var array = "";
	$("input:checkbox[name=studentfdlistFiles]:checked").each(function () {
		if (this.checked) {
			array += $(this).val() + ",";
		}
	});

	array = array.substring(0, array.length - 1);

	if (array == "") {
		$(".displaystudentNofile").show();
		return false;
	} else {
		$(".displaystudentNofile").hide();
	}

	if (userisIn == "local") {
		var otputfiles = apiBaseURLOXY + "moveFileToApprovalFolder";
	} else {
		var otputfiles = apiBaseURLOXY + "moveFileToApprovalFolder";
	}

	var postData = {
		fileName: array,
		sendMessages: false,
		folderType: "OxyloansLoans",
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: otputfiles,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			window.scrollTo(100, 0);
			$(".finallMoveCMSSucesstudentsmessage").show();
		},

		error: function (request, error) {
			console.log("error");

			console.log("Error Something");
			$(".errorstudentloan #studentcmserror").html(
				arguments[0].responseJSON.errorMessage
			);
			if (arguments[0].responseJSON.errorCode == 404) {
				$("#modal-studentloanError").modal("show");
			}
			if (arguments[0].responseJSON.errorCode == 108) {
				$("#modal-studentloanError").modal("show");
			}
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function partnerfinalyMoveCms() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var array = "";
	$("input:checkbox[name=partnercmsoutputfolderListUsers]:checked").each(
		function () {
			if (this.checked) {
				array += $(this).val() + ",";
			}
		}
	);

	array = array.substring(0, array.length - 1);

	if ($(".partnercmsNotification").is(":checked")) {
		var notificationtolender = true;
	} else {
		var notificationtolender = false;
	}

	if (userisIn == "local") {
		var otputfiles = apiBaseURLOXY + "moveFileToApprovalFolder";
	} else {
		var otputfiles = apiBaseURLOXY + "moveFileToApprovalFolder";
	}

	var postData = {
		fileName: array,
		sendMessages: notificationtolender,
		folderType: "Partner",
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: otputfiles,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			window.scrollTo(100, 0);
			$(".partnerfinallMoveCMSSucessmessage").show();
		},

		error: function (request, error) {
			console.log("error");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function poolingLendersInfo() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var poolingLenders = apiBaseURLOXY + "poolingAccountDetails";
	} else {
		var poolingLenders = apiBaseURLOXY + "poolingAccountDetails";
	}
	var postData = {
		pageNo: 1,
		pageSize: 10,
	};
	var postData = JSON.stringify(postData);
	$.ajax({
		url: poolingLenders,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;

			$(".totalCurrentAmount").html(data.totalCurrentAmount);
			$(".totalMonthlyInterest").html(data.totalMonthlyInterest);

			if (totalEntries == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"wallettransactiondetails"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.listOfPoolingAccountsDetails,
				});
				$("#displaywallettrns").html(html);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".acceptedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						var postData = {
							pageNo: num,
							pageSize: 10,
						};
						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var poolingLenders = apiBaseURLOXY + "poolingAccountDetails";
						} else {
							var poolingLenders = apiBaseURLOXY + "poolingAccountDetails";
						}

						$.ajax({
							url: poolingLenders,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template = document.getElementById(
									"wallettransactiondetails"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.listOfPoolingAccountsDetails,
								});
								$("#displaywallettrns").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	$(".loadingSec").hide();
}

const autoapprovals = (dealId, date, status) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	foldername = getCookie("outputfolder");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	const postData = {
		userId: suserId,
		dealId: dealId,
		paymentDate: date,
		status: status,
	};

	const options = {
		method: "PATCH",
		headers: {
			accessToken: saccessToken,
			"Content-Type": "application/json",
		},
		body: JSON.stringify(postData),
	};

	const docToOutput =
		userisIn == "local"
			? `${apiBaseURLOXY}updatePhase1Andphase2Interests`
			: `${apiBaseURLOXY}updatePhase1Andphase2Interests`;

	fetch(docToOutput, options)
		.then((response) => {
			if (response.ok) {
				setTimeout(function () {
					$("#modal-movedTOoutputfolder").modal("show");
				}, 4000);
			} else {
				console.log("Error: Something went wrong");
			}
		})
		.catch((error) => {
			console.log("Error: ", error);
		});
};

const generatepasswordpartnerDealers = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const genPass =
		userisIn == "local"
			? `${apiBaseURLOXY}generatingPasswordForPartners`
			: `${apiBaseURLOXY}generatingPasswordForPartners`;

	const options = {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	};

	fetch(genPass, options)
		.then((response) => {
			if (response.ok) {
				$("#modal-generatedpasswordPartner").modal("show");
			} else {
				console.log("Error: Something went wrong");
			}
		})
		.catch((error) => {
			console.log("Error: ", error);
		});
};

//////qr payments history *********************////

function qrpaymentsHistory() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var qrUrl =
			"http://35.154.48.120:8080/oxynew/v1/user/qrSuccessTransactionDetails";
	} else {
		var qrUrl =
			"https://fintech.oxyloans.com/oxyloans/v1/user/qrSuccessTransactionDetails";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: qrUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.totalCount;
			if (totalEntries == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById("displayQRPaytm").innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.qrCodeTransactionDetails,
				});
				$("#displayQRransactions").html(html);
				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".viewqrpayments")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						var postData = {
							pageNo: num,
							pageSize: "10",
						};

						var postData = JSON.stringify(postData);

						if (userisIn == "local") {
							var qrUrl =
								"http://35.154.48.120:8080/oxynew/v1/user/qrSuccessTransactionDetails";
						} else {
							var qrUrl =
								"https://fintech.oxyloans.com/oxyloans/v1/user/qrSuccessTransactionDetails";
						}

						$.ajax({
							url: qrUrl,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template =
									document.getElementById("displayQRPaytm").innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.qrCodeTransactionDetails,
								});
								$("#displayQRransactions").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getListOfPartnersUsers() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	getUserUtm = getCookie("partnerUtmName");

	if (userisIn == "local") {
		var listofusers =
			apiBaseURLOXY + getUserUtm + "/gettingPartnerDetailsBasedOnUtm";
	} else {
		var listofusers =
			apiBaseURLOXY + getUserUtm + "/gettingPartnerDetailsBasedOnUtm";
	}

	$.ajax({
		url: listofusers,
		type: "GET",
		success: function (data, textStatus, xhr) {
			writeCookie("UTMNAME", data.utmName);
			$(".partnerUtm").html(data.utmName);

			if (userisIn == "local") {
				$(".b_partnerUtm").val(
					"http://182.18.139.198/new/register_borrower?utm=" + data.utmName
				);
				$(".l_partnerUtm").val(
					"http://182.18.139.198/new/register_lender?utm=" + data.utmName
				);
				$(".l_partnerRegister").val(
					"http://182.18.139.198/new/register_lender?utmForPartner=PR_" +
						data.utmName
				);
				$(".b_partnerRegister").val(
					"http://182.18.139.198/new/register_borrower?utmForPartner=PR_" +
						data.utmName
				);
			} else {
				$(".b_partnerUtm").val(
					"https://www.oxyloans.com/new/register_borrower?utm=" + data.utmName
				);
				$(".l_partnerUtm").val(
					"https://www.oxyloans.com/new/register_lender?utm=" + data.utmName
				);
				$(".l_partnerRegister").val(
					"https://www.oxyloans.com/new/register_lender?utmForPartner=PR_" +
						data.utmName
				);
				$(".b_partnerRegister").val(
					"https://www.oxyloans.com/new/register_borrower?utmForPartner=PR_" +
						data.utmName
				);
			}

			if (data.countOfBorrowers == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"displayInterestScript"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.listOfBorrowers,
				});
				$("#loadDealsInfo").html(html);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".modal-body #searchbody").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 404) {
				$("#modal-searchcall-showinterestdata").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function resetPartnerCredentials() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var utmName = $(".utmPartnerName").val();
	var utmPass = $(".partnerPassword").val();

	var postData = {
		partnerUtmName: utmName,
		partnerPassword: utmPass,
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var resetPass = apiBaseURLOXY + "resetpasswordForPartners";
	} else {
		var resetPass = apiBaseURLOXY + "resetpasswordForPartners";
	}

	$.ajax({
		url: resetPass,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-partner-credentials-reset").modal("show");
			setTimeout(function () {
				location.reload();
			}, 4000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getListOfLendersList() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	getUserUtm = getCookie("partnerUtmName");

	if (userisIn == "local") {
		var listofusers =
			apiBaseURLOXY + getUserUtm + "/gettingPartnerDetailsBasedOnUtm";
	} else {
		var listofusers =
			apiBaseURLOXY + getUserUtm + "/gettingPartnerDetailsBasedOnUtm";
	}

	$.ajax({
		url: listofusers,
		type: "GET",

		success: function (data, textStatus, xhr) {
			if (data.countOfLenders == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"displayInterestScript"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.listOfLenders,
				});
				$("#loadDealsInfo").html(html);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".modal-body #searchbody").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 404) {
				$("#modal-searchcall-showinterestdata").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function updateEmailMobile() {
	getUserMobile = getCookie("partnerMobileNumber");
	getUserEmail = getCookie("partnerEmail");
	isupdate = getCookie("isupdate");

	if (getUserMobile == "" && getUserEmail == "" && isupdate == "") {
		$("#update-paretner-details-mobile").modal("show");
	} else {
		$("#update-paretner-details-mobile").modal("hide");
	}
}

function partnerUpdateNumberEmail() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	foldername = getCookie("outputfolder");
	getUserUtm = getCookie("partnerUtmName");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var phoneno = $("#partnerPhone").val();
	var email = $("#partnerEmail").val();

	var postData = {
		partnerUtmName: getUserUtm,
		partnerEmail: email,
		partnerMobileNumber: phoneno,
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var update = apiBaseURLOXY + "savingPartnerDetails";
	} else {
		var update = apiBaseURLOXY + "savingPartnerDetails";
	}

	$.ajax({
		url: update,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#update-paretner-details-mobile").modal("hide");
			$("#modal-sucessfully-updated").modal("show");
			var mobile = data.partnerMobileNumber;

			writeCookie("isupdate", mobile);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function loadUtm() {
	utmName = getCookie("UTMNAME");
	$("#nR_partnerUtm").val(
		"https://www.oxyloans.com/new/nrilenderregistration?ref=" + utmName
	);
	$("#b_partnerUtm").val(
		"https://www.oxyloans.com/new/register_borrower?utm=" + utmName
	);
	$("#l_partnerUtm").val(
		"https://www.oxyloans.com/new/register_lender?utm=" + utmName
	);
}

function copyBorrowerrefLink(element) {
	var $temp = $("<input>");
	$("body").append($temp);
	$temp.val($(element).val()).select();
	document.execCommand("copy");
	$temp.remove();
	$(".btn-ref-borrower").html("Copied!");
}

function copyLenderrrefLink(element) {
	var $temp = $("<input>");
	$("body").append($temp);
	$temp.val($(element).val()).select();
	document.execCommand("copy");
	$temp.remove();
	$(".btn-ref-lender,.btn-ref").html("Copied!");
}

function copyNrirefLink(element) {
	var $temp = $("<input>");
	$("body").append($temp);
	$temp.val($(element).val()).select();
	document.execCommand("copy");
	$temp.remove();
	$(".btn-ref-nri").html("Copied!");
}

function partner_register(element) {
	var $temp = $("<input>");
	$("body").append($temp);
	$temp.val($(element).val()).select();
	document.execCommand("copy");
	$temp.remove();
	$(".btn-reg-partner").html("Copied!");
}

function partner_bregister(element) {
	var $temp = $("<input>");
	$("body").append($temp);
	$temp.val($(element).val()).select();
	document.execCommand("copy");
	$temp.remove();
	$(".btn-regb-partner").html("Copied!");
}

$(document).ready(function () {
	$("#referee-submit-btn").click(function () {
		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");
		userId = suserId;
		primaryType = sprimaryType;
		accessToken = saccessToken;

		var enteredname = $("#refereename").val();
		var enteredemil = $("#referemail").val();
		// var mailSubject = $("#mailSubject").val();
		// var mailcontent = $("#mailcontent").val();
		var referrerType = $("input[name='referrerType']:checked").val();
		var userPrimaryType = $("input[name='primaryreferrerType']:checked").val();
		var referrercountryCode = $("#phoneNumber").val();

		var isValid = true;

		if (enteredname == "") {
			$(".name").show();
			isValid = false;
		} else {
			$(".name").hide();
		}

		if (referrercountryCode == "") {
			$(".mobilenumber").show();
			isValid = false;
		} else {
			$(".mobilenumber").hide();
		}

		if (enteredemil == "") {
			$(".email").show();
			isValid = false;
		} else {
			$(".email").hide();
		}

		if (userPrimaryType == undefined) {
			$(".chooseReferrer").show();
			isValid = false;
		} else {
			$(".chooseReferrer").hide();
		}

		var postData = {
			email: enteredemil,
			mobileNumber: referrercountryCode,
			name: enteredname,
			mailContent: "0",
			mailSubject: "0",
			referrerId: userId,
			primaryType: userPrimaryType,
			citizenType: referrerType,
			seekerRequestedId: "0",
			userType: "PARTNER",
		};
		var postData = JSON.stringify(postData);
		console.log(postData);

		if (userisIn == "local") {
			var getStatUrl =
				"http://35.154.48.120:8080/oxynew/v1/user/lenderReferring";
		} else {
			var getStatUrl =
				"https://fintech.oxyloans.com/oxyloans/v1/user/lenderReferring";
		}

		if (isValid == true) {
			$.ajax({
				url: getStatUrl,
				type: "POST",
				data: postData,
				contentType: "application/json",
				dataType: "json",

				success: function (data, textStatus, xhr) {
					$("#modal-alreadyDoneSendOffers").modal("show");
					setTimeout(function () {
						location.reload();
					}, 3000);
				},
				error: function (xhr, textStatus, errorThrown) {
					$(".modal-body #text1").html(arguments[0].responseJSON.errorMessage);
					if (arguments[0].responseJSON.errorCode == 109) {
						$("#modal-alreadyDoneSendOffertopartner").modal("show");
					} else if (arguments[0].responseJSON.errorCode == 403) {
						$("#modal-alreadyDoneSendOffer").modal("show");
					}
				},
				beforeSend: function (xhr) {
					xhr.setRequestHeader("accessToken", saccessToken);
				},
			});
		}
		return isValid;
	});

	$("#viewPreview").click(function () {
		var getsubjectValue = $("#mailSubject").val();
		$(".getSubject").html(getsubjectValue);

		var getContentValue = $("#mailcontent").val();

		$(".getEmailMessage").html(getContentValue);

		var usrNameEmail = $(".displayUserName").html();
		$(".usrNameEmail").html(usrNameEmail);

		var getfrndName = $("#refereename").val();
		if (getfrndName == "") {
			getfrndName = "User Name";
		}
		$(".getfrndName").html(getfrndName);

		var d = new Date();
		var month = d.getMonth() + 1;
		var day = d.getDate();

		var output =
			d.getFullYear() +
			"/" +
			(("" + month).length < 2 ? "0" : "") +
			month +
			"/" +
			(("" + day).length < 2 ? "0" : "") +
			day;

		$(".getDate").html(output);
		$("#modal-previewEmail").modal("show");
	});
});

$(document).ready(function () {
	$("#bulkinvite").click(function () {
		$("#modal-uploadBulkInvite").modal("show");
	});
});

function readBulkInviteThroughDoc(input) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var content = $("#mailcontent").val();

	if (input.files && input.files[0]) {
		var reader = new FileReader();

		reader.onload = function (e) {
			$(".passportUpload1 .image-upload-wrap").hide();

			$(".passportUpload1 .file-upload-image").attr("src", e.target.result);
			$(".passportUpload1 .file-upload-content").show();
			$(".passportUpload1 .image-title").html(input.files[0].name);
		};

		reader.readAsDataURL(input.files[0]);

		var fd = new FormData();
		var files = input.files[0];

		fd.append("BULKINVITE", files);
		fd.append("content", content);

		if (userisIn == "local") {
			var actionURL = apiBaseURLOXY + "sendBulkInviteThroughExcel/" + suserId;
		} else {
			var actionURL = apiBaseURLOXY + "sendBulkInviteThroughExcel/" + suserId;
		}
		$.ajax({
			url: actionURL,
			type: "POST",
			data: fd,
			contentType: false,
			processData: false,
			success: function (data, textStatus, xhr) {
				if (data != 0) {
					$("#modal-uploadBulkInvite").modal("hide");
					$("#modal-fileUploadedSuccessfully").modal("show");
				} else {
					$("#modal-uploadBulkInvite").modal("hide");
					alert("file not uploaded");
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				$("#modal-uploadBulkInvite").hide();
				alert("file not uploaded");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", accessToken);
			},
		});
	}
}

function emailcontent() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;
	if (userisIn == "local") {
		var getStatUrl =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			userId +
			"/mailContentShowingToPartner";
	} else {
		var getStatUrl =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			userId +
			"/mailContentShowingToPartner";
	}

	$.ajax({
		url: getStatUrl,
		type: "GET",

		success: function (data, textStatus, xhr) {
			$("#emailsubject").val(data.mailSubject);

			var emailcontent = data.mailContent;
			if (primaryType == "BORROWER") {
				emailcontent = emailcontent.split(
					"I am Investing multiples of INR 50,000 "
				)[0];
			}
			var bottomcontet = data.bottomOfTheMail;

			var fullemailcontent = emailcontent + "\n" + bottomcontet;

			$("#mailcontent").val(fullemailcontent);
			$("#emailcontent").val(fullemailcontent);

			$("#mailSubject").val(data.mailSubject);

			$(".getEmailMessage").html(data.mailContent);
			$(".usrNameEmails").html(data.mailSubject);
			$("#subjectbulk").val(data.mailSubject);

			$("#contentbulk").val(data.mailContent);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", accessToken);
		},
	});
}

function lenderreferrerinfo() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var actOnLoan =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			userId +
			"/displayingReferrerInfo";
	} else {
		var actOnLoan =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			userId +
			"/displayingReferrerInfo";
	}
	// alert(actOnLoan);
	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.countOfReferees;
			if (data.countOfReferees == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"wallettransactiondetails"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.listOfLenderReferenceDetails,
				});
				$("#displaywallettrns").html(html);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".acceptedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...
						var postData = {
							pageNo: num,
							pageSize: "10",
						};

						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var actOnLoan =
								"http://35.154.48.120:8080/oxynew/v1/user/" +
								userId +
								"/displayingReferrerInfo";
						} else {
							var actOnLoan =
								"https://fintech.oxyloans.com/oxyloans/v1/user/" +
								userId +
								"/displayingReferrerInfo";
						}

						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template = document.getElementById(
									"wallettransactiondetails"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.listOfLenderReferenceDetails,
								});
								// alert(html);

								$("#displaywallettrns").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function Gmailcontacts() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var gmailCode = $("#gmailcode").val();
	// alert( gmailCode);

	if (userisIn == "local") {
		var actOnLoan =
			"http://35.154.48.120:8080/oxynew/v1/user/getContactsFromGmailAccount/" +
			userId;
	} else {
		var actOnLoan =
			"https://fintech.oxyloans.com/oxyloans/v1/user/getContactsFromGmailAccount/" +
			userId;
	}

	var postData = {
		gmailCode: gmailCode,
		userType: "partner",
	};

	var postData = JSON.stringify(postData);
	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			var template = document.getElementById("Gmailcontacts").innerHTML;
			Mustache.parse(template);
			var html = Mustache.to_html(template, { data: data });
			$("#gmailcontacts").html(html);
			$("#modal-alreadyDoneSendOffers").modal("show");

			totalEntries = data.length;
			if (data.length == 0) {
				$("#displayNoRecords").show();
			} else {
				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".acceptedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						var postData = {
							gmailCode: gmailCode,
						};

						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var actOnLoan =
								"http://35.154.48.120:8080/oxynew/v1/user/getLenderStoredEmailContacts/" +
								suserId;
						} else {
							var actOnLoan =
								"https://fintech.oxyloans.com/oxyloans/v1/user/getLenderStoredEmailContacts/" +
								suserId;
						}

						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template =
									document.getElementById("Gmailcontacts").innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: data,
								});
								$("#gmailcontacts").html(html);
								$("#modal-alreadyDoneSendOffers").modal("show");
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getlendercontacts() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getGmailAuthorization =
			"http://35.154.48.120:8080/oxynew/v1/user/getLenderStoredEmailContacts/" +
			suserId;
	} else {
		var getGmailAuthorization =
			"https://fintech.oxyloans.com/oxyloans/v1/user/getLenderStoredEmailContacts/" +
			suserId;
	}

	$.ajax({
		url: getGmailAuthorization,
		type: "GET",

		success: function (data, textStatus, xhr) {
			if (data.length == "0") {
				$(".displayRequests").show();
			} else {
				var template = document.getElementById("Gmailcontacts").innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, { data: data });
				$("#gmailcontacts").html(html);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}
///////Bulk lender Invites//////START BY LIVIN///

function bulkinvitelender() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	$(".loadingSec").show();

	var array = "";
	$("input:checkbox[name=type]:checked").each(function () {
		if (this.checked) {
			array += $(this).val() + ",";
		}
	});

	var mailContent = $("#contentbulk").val();
	var mailSubject = $("#subjectbulk").val();

	if (userisIn == "local") {
		var updateCommentUrl =
			"http://35.154.48.120:8080/oxynew/v1/user/lenderReferring";
	} else {
		var updateCommentUrl =
			"https://fintech.oxyloans.com/oxyloans/v1/user/lenderReferring";
	}
	var postData = {
		email: array,
		referrerId: suserId,
		mailContent: mailContent,
		mailSubject: mailSubject,
	};

	var postData = JSON.stringify(postData);
	// alert(postData);
	$.ajax({
		url: updateCommentUrl,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$(".loadingSec").hide();
			$("#modal-alreadyDoneSendOffers").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".loadingSec").hide();
			$(".modal-body #text1").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 403) {
				$("#modal-alreadyLenderReferred").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function previewLink() {
	var d = new Date();
	var month = d.getMonth() + 1;
	var day = d.getDate();
	var output =
		d.getFullYear() +
		"/" +
		(("" + month).length < 2 ? "0" : "") +
		month +
		"/" +
		(("" + day).length < 2 ? "0" : "") +
		day;
	$(".getDate").html(output);
	$("#modal-previewEmail").modal("show");
}

$(document).ready(function () {
	$("#emailredirection").click(function () {
		window.location = "https://oxyloans.com/new/displayingReferrerInfo";
	});
});

// *********download referrence amount based on payment Status*********

function downloadreferrencePaymentStatus(earnStatus) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	// var paymentStatus=$(".myEarningStatus").val();

	if (userisIn == "local") {
		var ignoreURL =
			"http://35.154.48.120:8080/oxynew/v1/user/downLoadLinkForBonusAmount";
	} else {
		var ignoreURL =
			"https://fintech.oxyloans.com/oxyloans/v1/user/downLoadLinkForBonusAmount";
	}

	var postData = {
		userId: suserId,
		paymentStatus: earnStatus,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: ignoreURL,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			window.open(data.downloadLink, "_blank");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

$(function () {
	$(".myEarningStatus").change(function () {
		$(".showEarnamountStatus").append('<div class="loader"></div>');
		$(".showEarnamountStatus").addClass("lildark");
		var thisSortby = $(this).val();
		$(".btn4ReferralPayment").attr(
			"onClick",
			'downloadreferrencePaymentStatus("' + thisSortby + '")'
		);

		setTimeout(function () {
			referralBonusAmountBasedONStatus(thisSortby);
		}, 1000);
	});
});

function refereeRegisteredInfo() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var actOnLoan =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			userId +
			"/refereeRegisteredInfo";
	} else {
		var actOnLoan =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			userId +
			"/refereeRegisteredInfo";
	}
	// alert(actOnLoan);
	var postData = {
		pageNo: 1,
		pageSize: 10,
	};
	// alert(postData);
	var postData = JSON.stringify(postData);
	$.ajax({
		url: actOnLoan,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			totalEntries = data.countOfReferees;
			if (data.countOfReferees == 0) {
				$("#displayNoRecords").show();
			} else {
				var template = document.getElementById(
					"wallettransactiondetails"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.listOfLenderReferenceDetails,
				});
				$("#displaywallettrns").html(html);

				$(".userEarnedAmount").html(data.totalAmountEarned);

				var displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				$(".acceptedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...
						var postData = {
							pageNo: num,
							pageSize: "10",
						};

						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var actOnLoan =
								"http://35.154.48.120:8080/oxynew/v1/user/" +
								userId +
								"/refereeRegisteredInfo";
						} else {
							var actOnLoan =
								"https://fintech.oxyloans.com/oxyloans/v1/user/" +
								userId +
								"/refereeRegisteredInfo";
						}

						$.ajax({
							url: actOnLoan,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								$(".userEarnedAmount").html(data.totalAmountEarned);

								var template = document.getElementById(
									"wallettransactiondetails"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.listOfLenderReferenceDetails,
								});
								// alert(html);

								$("#displaywallettrns").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function downloadReferralAmountStatement() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var referralUrl =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			suserId +
			"/referralBonusAmountLink";
	} else {
		var referralUrl =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			suserId +
			"/referralBonusAmountLink";
	}

	$.ajax({
		url: referralUrl,
		type: "GET",
		success: function (data, textStatus, xhr) {
			$(".userEarnedAmount").html(data.amountEarned);
			window.open(data.downloadUrl, "_blank");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

//******get sdvise seekers info ********start by livin*****

function getadviceSeekers() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var seekersData =
			"http://35.154.48.120:8080/oxynew/v1/user/fetchAdviseSeekers/" +
			suserId;
	} else {
		var seekersData =
			"https://fintech.oxyloans.com/oxyloans/v1/user/fetchAdviseSeekers/" +
			suserId;
	}

	$.ajax({
		url: seekersData,
		type: "GET",

		success: function (data, textStatus, xhr) {
			if (data.length == "0") {
				$(".displayRequests").show();
			} else {
				var template = document.getElementById("seekerInfo").innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, { data: data });
				$("#seekersData").html(html);
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

//**********Referral Bonus Amount Based On Status***********

function referralBonusAmountBasedONStatus(paymentStatus) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		var getborrowers =
			"http://35.154.48.120:8080/oxynew/v1/user/referralBonusAmountBasedOnStatus";
	} else {
		var getborrowers =
			"https://fintech.oxyloans.com/oxyloans/v1/user/referralBonusAmountBasedOnStatus";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
		paymentStatus: paymentStatus,
		userId: suserId,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: getborrowers,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$(".totalEarning").html(data.totalAmountEarned);
			$(".paidEarning").html(data.sumOfPaidAmount);
			$(".unpaidEarning").html(data.sumOfUnpaidAmount);

			totalEntries = data.lenderReferenceAmountResponse.length;

			if (totalEntries == 0) {
				$("#displaywallettrns").hide();
				$("#noRecordFound").show();
			} else {
				var template = document.getElementById(
					"wallettransactiondetails"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.lenderReferenceAmountResponse,
				});
				$("#displaywallettrns").html(html);
				$("#displaywallettrns").show();

				var displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".acceptedPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						var postData = {
							pageNo: num,
							pageSize: "10",
							paymentStatus: paymentStatus,
							userId: suserId,
						};

						var postData = JSON.stringify(postData);

						if (userisIn == "local") {
							var getborrowers =
								"http://35.154.48.120:8080/oxynew/v1/user/referralBonusAmountBasedOnStatus";
						} else {
							var getborrowers =
								"https://fintech.oxyloans.com/oxyloans/v1/user/referralBonusAmountBasedOnStatus";
						}
						$.ajax({
							url: getborrowers,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								var template = document.getElementById(
									"wallettransactiondetails"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.render(template, data);
								var html = Mustache.to_html(template, {
									data: data.lenderReferenceAmountResponse,
								});
								$("#displaywallettrns").html(html);
								$(".userEarnedAmount").html(data.totalAmountEarned);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
	$(".showEarnamountStatus .loader").remove();
	$(".showEarnamountStatus").removeClass("lildark");
}

function partnerVerifySession() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	partnerName = getCookie("partnerUtmName");

	if (userisIn == "local") {
		var verifySession =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			partnerName +
			"/countOfLRAndBRforPartner";
	} else {
		var verifySession =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			partnerName +
			"/countOfLRAndBRforPartner";
	}

	$.ajax({
		url: verifySession,
		type: "GET",
		success: function (data, textStatus, xhr) {
			partnermobileverification = data.mobileverified;
			partnerEmaileverification = data.emailVerified;

			if (partnermobileverification == true) {
				$(".verify-otp").hide();
				$(".inputs-verify").hide();
				$(".imagesection").hide();
			} else {
				$(".mobileverifiydonesection").hide();
			}

			if (partnerEmaileverification == true) {
				$(".verify-Emailotp").hide();
				$(".inputs-verify-Email").hide();
				$(".email-section").hide();
			} else {
				$(".emailverifiydonesection").hide();
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function partnerVerifyMobile() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	partnerName = getCookie("partnerUtmName");

	var partnerMobile = $("#partnerMobileno").val();

	var isValid = true;

	if (partnerMobile == "") {
		$(".partnerMobileerror").show();
		isValid = false;
	} else {
		$(".partnerMobileerror").hide();
	}

	var postData = {
		utmName: partnerName,
		partnerMobileNumber: partnerMobile,
	};
	postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var getotp =
			"http://35.154.48.120:8080/oxynew/v1/user/verifyingMobileAndEmailForPartner";
	} else {
		var getotp =
			"https://fintech.oxyloans.com/oxyloans/v1/user/verifyingMobileAndEmailForPartner";
	}

	if (isValid == true) {
		$.ajax({
			url: getotp,
			type: "PATCH",
			data: postData,
			contentType: "application/json",
			dataType: "json",

			success: function (data, textStatus, xhr) {
				$(".verify-otp").show();
				$(".inputs-verify").hide();

				partnerMobileNumber = data.mobileNumber;
				partnerMobileOtpsession = data.mobileOtpSession;
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");

				$(".errormessage #data").html(arguments[0].responseJSON.errorMessage);
				if (arguments[0].responseJSON.errorCode == 103) {
					$("#modal-partnerErrormessages").modal("show");
				}

				if (arguments[0].responseJSON.errorCode == 105) {
					$("#modal-partnerErrormessages").modal("show");
				}
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

function partnerVerifyMobileotpsession() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	partnerName = getCookie("partnerUtmName");

	var mobileNumber = $("#partnerMobileno").val();
	var otp1 = $("#codeBox1").val();
	var otp2 = $("#codeBox2").val();
	var otp3 = $("#codeBox3").val();
	var otp4 = $("#codeBox4").val();
	var otp5 = $("#codeBox5").val();
	var otp6 = $("#codeBox6").val();

	var mobileotpinputs = otp1 + otp2 + otp3 + otp4 + otp5 + otp6;

	var postData = {
		utmName: partnerName,
		partnerMobileNumber: mobileNumber,
		mobileOtpSession: partnerMobileOtpsession,
		mobileOtpValue: mobileotpinputs,
	};
	postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var getotp =
			"http://35.154.48.120:8080/oxynew/v1/user/verifyingMobileAndEmailForPartner";
	} else {
		var getotp =
			"https://fintech.oxyloans.com/oxyloans/v1/user/verifyingMobileAndEmailForPartner";
	}

	$.ajax({
		url: getotp,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#modal-partnerVerifymobile").modal("show");

			setTimeout(function () {
				window.location.reload();
			}, 3000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$(".errormessage #data").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 103) {
				$("#modal-partnerErrormessages").modal("show");
			}

			if (arguments[0].responseJSON.errorCode == 105) {
				$("#modal-partnerErrormessages").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function partnerVerifyEmail() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	partnerName = getCookie("partnerUtmName");
	partnerMobile = getCookie("partnerMobileNumber");

	var partnerEmail = $("#partnerEmailid").val();

	var isValid = true;

	if (partnerEmail == "") {
		$(".partnerEmailerror").show();
		isValid = false;
	} else {
		$(".partnerEmailerror").hide();
	}

	var postData = {
		utmName: partnerName,
		partnerMobileNumber: partnerMobile,
		partnerEmail: partnerEmail,
	};
	postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var getotp =
			"http://35.154.48.120:8080/oxynew/v1/user/verifyingMobileAndEmailForPartner";
	} else {
		var getotp =
			"https://fintech.oxyloans.com/oxyloans/v1/user/verifyingMobileAndEmailForPartner";
	}
	if (isValid == true) {
		$.ajax({
			url: getotp,
			type: "PATCH",
			data: postData,
			contentType: "application/json",
			dataType: "json",

			success: function (data, textStatus, xhr) {
				$(".verify-Emailotp").show();
				$(".inputs-verify-Email").hide();

				partneremailMobileNumber = data.mobileNumber;
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");

				$(".errormessage #data").html(arguments[0].responseJSON.errorMessage);
				if (arguments[0].responseJSON.errorCode == 403) {
					$("#modal-partnerErrormessages").modal("show");
				}

				if (arguments[0].responseJSON.errorCode == 113) {
					$("#modal-partnerErrormessages").modal("show");
				}
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

function partnerVerifyEmailotpsession() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	partnerName = getCookie("partnerUtmName");

	var email = $("#partnerEmailid").val();

	var otp1 = $("#codeBoxE1").val();
	var otp2 = $("#codeBoxE2").val();
	var otp3 = $("#codeBoxE3").val();
	var otp4 = $("#codeBoxE4").val();
	var otp5 = $("#codeBoxE5").val();
	var otp6 = $("#codeBoxE6").val();

	var emailotpinputs = otp1 + otp2 + otp3 + otp4 + otp5 + otp6;

	var postData = {
		utmName: partnerName,
		partnerMobileNumber: partneremailMobileNumber,
		partnerEmail: email,
		emailOtpValue: emailotpinputs,
	};
	postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var getEmail =
			"http://35.154.48.120:8080/oxynew/v1/user/verifyingMobileAndEmailForPartner";
	} else {
		var getEmail =
			"https://fintech.oxyloans.com/oxyloans/v1/user/verifyingMobileAndEmailForPartner";
	}

	$.ajax({
		url: getEmail,
		type: "PATCH",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#modal-partnerVerifyEmail").modal("show");

			setTimeout(function () {
				window.location.reload();
			}, 4000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");

			$(".errormessage #data").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 403) {
				$("#modal-partnerErrormessages").modal("show");
			}

			if (arguments[0].responseJSON.errorCode == 113) {
				$("#modal-partnerErrormessages").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function wellcomenote() {
	$("#modal-welcomeWindow").modal("show");
}

$(document).ready(function () {
	$("#user-bank-verify").click(function () {
		$("#loadingSec").show();
		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");
		userId = suserId;
		primaryType = sprimaryType;
		accessToken = saccessToken;

		var enteredaccountno = $("#oxyaccountno").val();
		var enteredIFSCCode = $("#oxybankifscCode").val();
		var enteredconfirmaccountno = $("#oxyconfirmaccountno").val();

		var ifscRegex = /^[A-Z]{4}\d{1}[A-Z0-9]{6}$/i;

		var isValid = true;

		if (enteredaccountno == "") {
			$(".accountnoError").show();
			isValid = false;
		} else {
			$(".accountnoError").hide();
		}

		if (enteredconfirmaccountno == "") {
			$(".oxyconfirmaccountnoError").show();
			isValid = false;
		} else {
			$(".oxyconfirmaccountnoError").hide();
		}

		if (enteredaccountno != enteredconfirmaccountno) {
			$(".oxyconfirmaccountnoError").show();
			isValid = false;
		} else {
			$(".oxyconfirmaccountnoError").hide();
		}

		if (!ifscRegex.test(enteredIFSCCode)) {
			$(".IFSCCodeerror").html("Please enter valid IFSC code.");
			$(".IFSCCodeerror").show();
			isValid = false;
		} else {
			$(".IFSCCodeerror").hide();
		}

		var postData = {
			bankAccount: enteredaccountno,
			ifscCode: enteredIFSCCode,
		};
		var postData = JSON.stringify(postData);

		if (userisIn == "local") {
			validate =
				"http://35.154.48.120:8080/oxynew/v1/user/verifyBankAccountAndIfsc";
		} else {
			validate =
				"https://fintech.oxyloans.com/oxyloans/v1/user/verifyBankAccountAndIfsc";
		}
		if (isValid == true) {
			$.ajax({
				url: validate,
				type: "POST",
				data: postData,
				contentType: "application/json",
				dataType: "json",
				success: function (data, textStatus, xhr) {
					if (data.status == "SUCCESS" && data.accountStatus == "VALID") {
						setTimeout(function () {
							$("#loadingSec").hide();
						}, 3000);
						$("#user-bank-save").show();
						bankVerifyingSTATUS = "SUCCESS";

						$(".bank_username,.bank_Name,.bank_Branch,.bank_city").show();
						$("#bankUsername").val(data.data.nameAtBank);
						$("#bankname").val(data.data.bankName);
						$("#bankBranch").val(data.data.branch);
						$("#bankcity").val(data.data.city);
					} else {
						setTimeout(function () {
							$("#loadingSec").hide();
						}, 3000);

						$(".bank_username,.bank_Name,.bank_Branch,.bank_city").hide();
						alert("please  Enter the valid bank details");
						bankVerifyingSTATUS = "FAILED";
					}
				},
				error: function (xhr, textStatus, errorThrown) {
					console.log("error");
				},
				beforeSend: function (xhr) {
					xhr.setRequestHeader("accessToken", saccessToken);
				},
			});
		}
		$("#loadingSec").hide();
		return isValid;
	});
});

$(document).ready(function () {
	$("#user-bank-save").click(function () {
		$("#loadingSec").show();

		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");
		const partnerUtmName = getCookie("partnerUtmName");

		userId = suserId;
		primaryType = sprimaryType;
		accessToken = saccessToken;

		var enteredaccountno = $("#oxyaccountno").val();
		var enteredIFSCCode = $("#oxybankifscCode").val();
		var enteredconfirmaccountno = $("#oxyconfirmaccountno").val();

		var bankName = $("#bankname").val();
		var branchName = $("#bankBranch").val();
		var userName = $("#bankUsername").val();

		var bankcity = $("#bankcity").val();

		var ifscRegex = /^[A-Z]{4}\d{1}[A-Z0-9]{6}$/i;

		var isValid = true;

		if (enteredaccountno == "") {
			$(".accountnoError").show();
			isValid = false;
		} else {
			$(".accountnoError").hide();
		}

		if (enteredaccountno != enteredconfirmaccountno) {
			$(".confirmaccountnoError").show();
			isValid = false;
		} else {
			$(".confirmaccountnoError").hide();
		}

		if (!ifscRegex.test(enteredIFSCCode)) {
			$(".IFSCCodeerror").html("Please enter valid IFSC code.");
			$(".IFSCCodeerror").show();
			isValid = false;
		} else {
			$(".IFSCCodeerror").hide();
		}

		if (bankName == "") {
			$(".errorbankName").show();
			isValid = false;
		} else {
			$(".errorbankName").hide();
		}
		if (branchName == "") {
			$(".errorbankBranch").show();
			isValid = false;
		} else {
			$(".errorbankBranch").hide();
		}

		if (userName == "") {
			$(".errorName").show();
			isValid = false;
		} else {
			$(".errorName").hide();
		}

		if (bankcity == "") {
			$(".errorbankCity").show();
			isValid = false;
		} else {
			$(".errorbankCity").hide();
		}

		var postData = {
			accountNumber: enteredaccountno,
			ifscCode: enteredIFSCCode,
			bankName: bankName,
			branchName: branchName,
			userName: userName,
		};
		var postData = JSON.stringify(postData);

		if (userisIn == "local") {
			validate =
				"http://35.154.48.120:8080/oxynew/v1/user/" +
				partnerUtmName +
				"/bankDetailsForPartner";
		} else {
			validate =
				"https://fintech.oxyloans.com/oxyloans/v1/user/" +
				partnerUtmName +
				"/bankDetailsForPartner";
		}
		if (isValid == true) {
			$.ajax({
				url: validate,
				type: "PATCH",
				data: postData,
				contentType: "application/json",
				dataType: "json",
				success: function (data, textStatus, xhr) {
					$("#loadingSec").hide();
					$("#modal-partnerBankDetails").modal("show");
				},
				error: function (xhr, textStatus, errorThrown) {
					$("#loadingSec").hide();
					console.log("error");
				},
				beforeSend: function (xhr) {
					xhr.setRequestHeader("accessToken", saccessToken);
				},
			});
		}
		$("#loadingSec").hide();
		return isValid;
	});
});

function createBorrowerDeal(loanid) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	partnerName = getCookie("partnerUtmName");

	if (userisIn == "local") {
		var checkdealCreated =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			loanid +
			"/loanOfferStatusToBorrower";
	} else {
		var checkdealCreated =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			loanid +
			"/loanOfferStatusToBorrower";
	}

	$.ajax({
		url: checkdealCreated,
		type: "GET",

		success: function (data, textStatus, xhr) {
			window.location = "createDeal?loanrequestId=" + loanid;
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");

			$(".modal-body-deal #text3").html(arguments[0].responseJSON.errorMessage);
			if (arguments[0].responseJSON.errorCode == 110) {
				$("#modal-dealCreatedForBorrower").modal("show");
			}
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function fetchborrowerdetails(loanid) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	const partnerName = getCookie("partnerUtmName");

	if (userisIn == "local") {
		var checkdealCreated =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			loanid +
			"/commentsFromAdmin";
	} else {
		var checkdealCreated =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			loanid +
			"/commentsFromAdmin";
	}

	$.ajax({
		url: checkdealCreated,
		type: "GET",

		success: function (data, textStatus, xhr) {
			$("#duration").val(data.duration);
			$("#borrowerRateOfInterest").val(data.rateOfInterestToBorrower);
			$("#oxyPremiumMonthlyInterest").val(data.rateOfInterestToLender);
			$("#newLendersMonthlyInterest").val(data.rateOfInterestToLender);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getBankDetails() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	const partnerUtmName = getCookie("partnerUtmName");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		validate =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			partnerUtmName +
			"/partnerProfileDetails";
	} else {
		validate =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			partnerUtmName +
			"/partnerProfileDetails";
	}

	$.ajax({
		url: validate,
		type: "GET",
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#oxyaccountno").val(data.accountNumber);
			$("#oxyconfirmaccountno").val(data.accountNumber);
			$("#bankBranch").val(data.branchName);
			$("#oxybankifscCode").val(data.ifscCode);
			$("#partnerName").val(data.name);
			$("#pemail").val(data.email);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function docuNDA() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	const partnerUtmName = getCookie("partnerUtmName");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var enteredname = $("#partnerName").val();
	var enteredCompanyname = $("#partnerCompany").val();
	var enteredcompanyaddress = $("#companyAddress").val();
	//alert(enteredconfirmaccountno);

	var enterrole = $("#role").val();
	var enteremail = $("#pemail").val();
	var entertype = $("#docutype").val();
	var service = $("#services").val();
	var enterecity = $("#partnercity").val();

	var isValid = true;

	if (enteredname == "") {
		$(".partnerNameError").show();
		isValid = false;
	} else {
		$(".partnerNameError").hide();
	}

	if (enteredCompanyname == "") {
		$(".companynameError").show();
		isValid = false;
	} else {
		$(".companynameError").hide();
	}

	if (enteredcompanyaddress == "") {
		$(".companyaddresserror").show();
		isValid = false;
	} else {
		$(".companyaddresserror").hide();
	}

	if (enterrole == "") {
		$(".errorRole").show();
		isValid = false;
	} else {
		$(".errorRole").hide();
	}
	if (enteremail == "") {
		$(".erroremailerror").show();
		isValid = false;
	} else {
		$(".erroremailerror").hide();
	}
	if (entertype == "") {
		$(".errortypes").show();
		isValid = false;
	} else {
		$(".errortypes").hide();
	}
	if (service == "") {
		$(".errorservices").show();
		isValid = false;
	} else {
		$(".errorservices").hide();
	}
	if (enterecity == "") {
		$(".errorpartnerCity").show();
		isValid = false;
	} else {
		$(".errorpartnerCity").hide();
	}

	var postData = {
		partnerName: enteredname,
		companyName: enteredCompanyname,
		companyAddress: enteredcompanyaddress,
		title: enterrole,
		emailId: enteremail,
		type: entertype,
		services: service,
		city: enterecity,
	};
	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		validate =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			partnerUtmName +
			"/partnerNDA";
	} else {
		validate =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			partnerUtmName +
			"/partnerNDA";
	}
	if (isValid == true) {
		$.ajax({
			url: validate,
			type: "POST",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				$("#modal-partnerNDADetails").modal("show");

				if (data.status != null) {
					window.open(data.status, "_blank");
				} else {
					$.colorbox({ href: data.status });
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				$("#loadingSec").show();
				console.log("error");
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}

	return isValid;
}

function downloadNDA(input, id) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	const partnerUtmName = getCookie("partnerUtmName");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		validate =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			id +
			"/downloadPartnerAgreementType/" +
			input +
			"";
	} else {
		validate =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			id +
			"/downloadPartnerAgreementType/" +
			input +
			"";
	}
	$.ajax({
		url: validate,
		type: "GET",
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			if (data.downloadUrl != null) {
				window.open(data.downloadUrl, "_blank");
			} else {
				$.colorbox({ href: data.downloadUrl });
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("error");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getautodate() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var date = $("#fundsAcceptanceStartDate").val();

	if (userisIn == "local") {
		var fetchdate = apiBaseURLOXY + "firstInterestStartDate";
	} else {
		var fetchdate = apiBaseURLOXY + "firstInterestStartDate";
	}

	var postData = {
		fundsStartDate: date,
	};

	var postData = JSON.stringify(postData);

	$.ajax({
		url: fetchdate,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			$("#loanActiveDate").val(data.firstInterestDate);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function readMOU() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	const partnerUtmName = getCookie("partnerUtmName");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var form = $("#moufileupload")[0];

	var fd = new FormData();
	var files = form.files[0];
	fd.append("PARTNERMOU", files);

	if (userisIn == "local") {
		actionURL =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			userId +
			"/partnerAgreementType";
	} else {
		actionURL =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			userId +
			"/partnerAgreementType";
	}

	$.ajax({
		url: actionURL,
		type: "POST",
		data: fd,
		contentType: false,
		processData: false,
		enctype: "multipart/form-data",

		success: function (data, textStatus, xhr) {
			$("#modal-partnerMOUupload").modal("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$("#modal-errorpartnerMOUupload").modal("show");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function downloadPartnerDocs(input) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	const partnerUtmName = getCookie("partnerUtmName");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (userisIn == "local") {
		validate =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			userId +
			"/downloadPartnerAgreementType/" +
			input +
			"";
	} else {
		validate =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			userId +
			"/downloadPartnerAgreementType/" +
			input +
			"";
	}
	$.ajax({
		url: validate,
		type: "GET",
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$("#modal-successdownload").modal("show");

			if (data.downloadUrl != null) {
				window.open(data.downloadUrl, "_blank");
			} else {
				$.colorbox({ href: data.downloadUrl });
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("error");
			$("#modal-errordownload").modal("show");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

function getSessionExpireData() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	const tokenTimeStamp = getCookie("tokenTime");

	var addingtime = 1500000;
	var getTime = parseInt(tokenTimeStamp) + addingtime;
	var date = new Date();
	var milliseconds = date.getTime();
	if (milliseconds > getTime) {
		getNewTime();
	}
}

function getNewTime() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var getsession =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			suserId +
			"/USER/accessTokenGeneration";
	} else {
		var getsession =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			suserId +
			"/USER/accessTokenGeneration";
	}
	$.ajax({
		url: getsession,
		type: "GET",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			writeCookie("tokenTime", "");
			writeCookie("tokenTime", data.tokenGeneratedTime);
			writeCookie("saccessToken", "");
			$("#modal-check-session-expire").modal("hide");
		},
	}).done(function (data, textStatus, xhr) {
		console.log(xhr.getResponseHeader("accessToken"));
		accessToken = xhr.getResponseHeader("accessToken");
		writeCookie("saccessToken", accessToken);

		setTimeout(function () {
			window.location.reload();
		}, 3000);
	});
}

function genNocforBorrower(userid) {
	$("#modal-gen-noc-borrower").modal("show");
	$(".saveNocUser").attr("data-loanid", userid);
}

function generatenocLoanRequest() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var borrowerid = $(".saveNocUser").attr("data-loanid");
	var paidDate = $("#nocBorrowerpaidDate").val();
	var LoanAmount = $("#nocLoanAmount").val();

	var isValid = true;

	if (paidDate == "") {
		$(".paiddate").show();
		isValid = false;
	}

	if (LoanAmount == "") {
		$(".nocLoanAmounterror").show();
		isValid = false;
	}

	var postData = {
		id: borrowerid,
		loanAmount: LoanAmount,
		paidDate: paidDate,
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var borrowerNoc =
			"http://35.154.48.120:8080/oxynew/v1/user/borrowerNoc";
	} else {
		var borrowerNoc =
			"https://fintech.oxyloans.com/oxyloans/v1/user/borrowerNoc";
	}

	if (isValid == true) {
		$.ajax({
			url: borrowerNoc,
			type: "PATCH",
			data: postData,
			contentType: "application/json",
			dataType: "json",

			success: function (data, textStatus, xhr) {
				$("#modal-gen-noc-borrower").modal("hide");
				$("#modal-movefiletocms .modal-body").html(
					"You have successfully generated the Noc and the borrower will get the attachment through email."
				);
				$("#modal-movefiletocms").modal("show");

				if (data.downloadUrl != "") {
					console.log(data.downloadUrl);

					var sourcePath = data.downloadUrl;
					var contentTypeCheck = ".pdf";

					if (sourcePath.indexOf(contentTypeCheck) != -1) {
						window.open(data.downloadUrl, "_blank");
					} else {
						$.colorbox({ href: data.downloadUrl });
					}
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");

				$(".modal-body #text1").html(arguments[0].responseJSON.errorMessage);

				if (arguments[0].responseJSON.errorCode == 114) {
					$("#modal-gen-noc-borrower").modal("hide");
					$("#modal-amount-limit-exced").modal("show");
				}
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

function isapppLevelDisbursed(userid) {
	$("#modal-App-Level-disbursed").modal("show");
	$(".savedisbursedUser").attr("data-loanid", userid);
}

function AppLevelDisbursedAmount() {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var borrowerid = $(".savedisbursedUser").attr("data-loanid");
	var ApproveData = $("#disbursedDate").val();

	var isValid = true;

	if (ApproveData == "") {
		$(".loanDealError").show();
		isValid = false;
	}

	var postData = {
		adminComments: "DISBURSED",
		disbursedDate: ApproveData,
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var disbursedApp =
			"http://35.154.48.120:8080/oxynew/v1/user/" +
			borrowerid +
			"/dealLevelDisbursmentForAppLevel";
	} else {
		var disbursedApp =
			"https://fintech.oxyloans.com/oxyloans/v1/user/" +
			borrowerid +
			"/dealLevelDisbursmentForAppLevel";
	}

	if (isValid == true) {
		$.ajax({
			url: disbursedApp,
			type: "PATCH",
			data: postData,
			contentType: "application/json",
			dataType: "json",

			success: function (data, textStatus, xhr) {
				$("#modal-App-Level-disbursed").modal("hide");
				$("#modal-movefiletocms .modal-body").html(
					"Thanks for using the application level"
				);
				$("#modal-movefiletocms").modal("show");
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");

				$(".modal-body #text1").html(arguments[0].responseJSON.errorMessage);

				if (arguments[0].responseJSON.errorCode == 114) {
					$("#modal-App-Level-disbursed").modal("hide");
					$("#modal-amount-limit-exced").modal("show");
				}
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

function disbursespopup(userid) {
	$("#modal-calroi-sheet").modal("show");
	$(".savedisbursedDeal").attr("data-loanid", userid);
}

function disbursesToCms(status) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var borrowerid = $(".savedisbursedDeal").attr("data-loanid");
	var dealId = $("#loanOfferDeal").val();
	var feeroi = $("#disbursefeeValue").val();
	var feestatus = $("#borrowerfeeStatus").val();

	var isValid = true;

	if (dealId == "") {
		$(".loanDealError").show();
		isValid = false;
	}

	if (feeroi == "") {
		$(".roierrorcms").show();
		isValid = false;
	}

	if (feestatus == "") {
		$(".roidisError").show();
		isValid = false;
	}

	var postData = {
		borrowerFeePaid: feestatus,
		paymentFeeRateOfInterest: feeroi,
		borrowerId: borrowerid,
		dealId: dealId,
	};

	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		var disburtocms =
			"http://35.154.48.120:8080/oxynew/v1/user/applicationLevelFundsTransfer?dealId=" +
			dealId +
			"&borrowerId=" +
			borrowerid;
	} else {
		var disburtocms =
			"https://fintech.oxyloans.com/oxyloans/v1/user/applicationLevelFundsTransfer?dealId=" +
			dealId +
			"&borrowerId=" +
			borrowerid;
	}

	if (isValid == true) {
		$.ajax({
			url: disburtocms,
			type: "POST",
			data: postData,
			contentType: "application/json",
			dataType: "json",

			success: function (data, textStatus, xhr) {
				$("#modal-calroi-sheet").modal("hide");
				$("#modal-movefiletocms").modal("show");
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");

				$(".modal-body #text1").html(arguments[0].responseJSON.errorMessage);

				if (arguments[0].responseJSON.errorCode == 404) {
					$("#modal-calroi-sheet").modal("hide");
					$("#modal-amount-limit-exced").modal("show");
				}
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	return isValid;
}

const BorrowerFeeTransactionslist = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const d = new Date();
	const month = [
		"January",
		"February",
		"March",
		"April",
		"May",
		"June",
		"July",
		"August",
		"September",
		"October",
		"November",
		"December",
	];
	const currMonth = month[d.getMonth()];
	const currYear = d.getFullYear();

	const emiDetails =
		userisIn == "local"
			? `${apiBaseURLOXY}monthlyPaymentStats?month=${currMonth}/&year=${currYear}`
			: `${apiBaseURLOXY}monthlyPaymentStats?month=${currMonth}/&year=${currYear}`;

	const options = {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	};

	fetch(emiDetails, options)
		.then((response) => response.json())
		.then((data) => {
			$(".borrowerfee").html(data.totalBorrowerFee);
			$(".lenderfee").html(data.totalLenderFee);
			$(".amountDisbursedfee").html(data.totalAmountDisbursed);
			$(".lenderCurrentfee").html(data.totalLenderFeeInCurrentMonth);

			if (data.listOfBorrowersIncludingFee.length === 0) {
				$(".displaynone").show();
			} else {
				$(".displaynone").hide();
				const template = document.getElementById(
					"borrowerpayuTransactions"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.listOfBorrowersIncludingFee,
				});
				$("#borrowerdisplayPayulenders").html(html);
			}
		})
		.catch((error) => {
			console.log("Error: ", error);
		});
};

const withdrawalList = (dealId) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const withDrawallist =
		userisIn == "local"
			? `${apiBaseURLOXY}${dealId}/withdrawalInfoBasedOnId`
			: `${apiBaseURLOXY}${dealId}/withdrawalInfoBasedOnId`;

	const options = {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	};

	fetch(withDrawallist, options)
		.then((response) => response.json())
		.then((data) => {
			if (data.listOfWithdrawRequests.length === 0) {
				$(".noRecordFound").show();
			} else {
				$(".noRecordFound").hide();
				const template = document.getElementById(
					"displaywithdrawalScript"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.listOfWithdrawRequests,
				});
				$("#withdrawalListUser").html(html);
			}

			if (data.listOfWithdrawInitiated.length === 0) {
				$("#displayInitiated").show();
			} else {
				$("#displayInitiated").hide();
				const template = document.getElementById(
					"displaywithdrawalScript"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.listOfWithdrawInitiated,
				});
				$("#withdrawalListApprove").html(html);
			}
		})
		.catch((error) => {
			console.log("Error: ", error);
		});
};

const hideBorrowerDetails = (ID) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const postData = {
		additionalFiledsToUser: "YES",
	};

	const options = {
		method: "PATCH",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: JSON.stringify(postData),
	};

	const disburtocms =
		userisIn == "local"
			? `http://35.154.48.120:8080/oxynew/v1/user/${ID}/additionalFieldsToUser`
			: `https://fintech.oxyloans.com/oxyloans/v1/user/${ID}/additionalFieldsToUser`;

	fetch(disburtocms, options)
		.then((response) => response.json())
		.then((data) => {
			$("#modal-shortprofilefortheborrower").modal("show");
		})
		.catch((error) => {
			console.log("Error: ", error);

			$(".modal-body #text1").html(error.responseJSON.errorMessage);

			if (error.responseJSON.errorCode == 404) {
				$("#modal-calroi-sheet").modal("hide");
				$("#modal-amount-limit-exced").modal("show");
			}
		});
};

/////////UPDATE LENDER GROUP////////

const viewPaymentSuccessUsers = (deald, paymentdate) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const viewPaymentUsers =
		userisIn == "local"
			? `${apiBaseURLOXY}interestDetailsForDeall`
			: `${apiBaseURLOXY}interestDetailsForDeall`;

	const postData = {
		paymentDate: paymentdate,
		dealId: deald,
		status: "SUCCESS",
	};

	const options = {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: JSON.stringify(postData),
	};

	fetch(viewPaymentUsers, options)
		.then((response) => response.json())
		.then((data) => {
			if (data.interestsApprovalDto == null) {
				$("#displayNoRecords").show();
			} else {
				const template = document.getElementById(
					"displayViewPaymentSuccess"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.render(template, data);
				$("#withdrawalListApprove").html(html);
			}
		})
		.catch((error) => {
			console.log("Error: ", error);
			$(".modal-body .text-errorMessage").html(error.responseJSON.errorMessage);
			if (error.responseJSON.errorCode == 404) {
				$("#modal-view-paymentsuccessUsers").modal("show");
			}
		});
};

const digits = () => {
	$(".numdigitsvalues").each(function () {
		const text = $(this).text();
		const formattedText = text.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
		$(this).text(formattedText);
	});
};

function loadcmsBoxes() {
	const cmscookies = getCookie("cmsSkip");
	if (cmscookies == "false" || cmscookies == false) {
		$(".cmsLoginPass").show();
		$(".cmsBoxCard,.searchcmsapplication").hide();
	} else {
		$(".cmsLoginPass").hide();
		$(".cmsBoxCard,.searchcmsapplication").show();
	}
}

const verifyCmsLOGIN = () => {
	const cmspass = $(".cmspassword").val();
	const isProd = userisIn === "prod";
	const isLocal = userisIn === "local";

	const isValid =
		(cmspass === "Kofee@1919" && isProd) || (cmspass === "Test@123" && isLocal);

	if (isValid) {

		writeCookie("cmsSkip", true);
		$(".cmsLoginPass").hide();
		$(".cmsBoxCard,.searchcmsapplication").show();
	} else {

		$(".errorCms").show();
		$(".errorCms").fadeOut(100).fadeIn(100).fadeOut(100).fadeIn(100);
	}
};

const verifypaymentVerifyStudent = () => {

	const verifypass = $(".paymentverifyLoginpassword").val();
	const isProd = userisIn === "prod";
	const isLocal = userisIn === "local";

	const isValid =
		(verifypass === "Pa$$w0" && isProd) ||
		(verifypass === "Test@123" && isLocal);

	if (isValid) {
		writeCookie("fdverifySkip", true);
		$(".fdverifypaymentlogin").hide();
		$(".bank-verifydata_boolean").show();
	} else {
		$(".errorverify").show();
		$(".errorverify").fadeOut(100).fadeIn(100).fadeOut(100).fadeIn(100);
	}
};

function loadverifyBoxes() {

	const fdcookies = getCookie("fdverifySkip");
	if (fdcookies == "false" || fdcookies == false || fdcookies == "") {
		$(".fdverifypaymentlogin").show();
		$(".bank-verifydata_boolean").hide();
	} else {
		$(".fdverifypaymentlogin").hide();
		$(".bank-verifydata_boolean").show();
	}
}

const initiatingNotification = (dealId) => {

	$(".sendEmailNotification").attr("data-reqid", dealId);
	$("#intiateTheDealamountPrincipal").modal("show");
};

const submitEmailNotificationDeal = async () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	$(".sendEmailNotification").attr("disabled", true);

	const dealId = $(".sendEmailNotification").attr("data-reqid");
	const notification = $("#readinitiateMethodType").val();

	const notificationUrl =
		userisIn === "local"
			? `${apiBaseURLOXY}sendingEmailWhileInitiatingAmount`
			: `${apiBaseURLOXY}sendingEmailWhileInitiatingAmount`;

	const postData = {
		dealId: dealId,
		amountType: notification,
	};

	try {
		const response = await fetch(notificationUrl, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: JSON.stringify(postData),
		});

		response.ok
			? (() => {
					$("#modal-shortprofilefortheborrower #message").html(
						"Thanks, the lenders will get the email notifications."
					);
					$("#intiateTheDealamountPrincipal").modal("hide");
					$("#modal-shortprofilefortheborrower").modal("show");

					setTimeout(function () {
						window.location.reload();
					}, 5000);
			  })()
			: (() => {
					$(".sendEmailNotification").attr("disabled", false);
					$("#modal-shortprofilefortheborrower")
						.addClass("modal-warning")
						.removeClass("modal-success");
					$("#modal-shortprofilefortheborrower #message").html(
						arguments[0].responseJSON.errorMessage
					);
					$("#modal-shortprofilefortheborrower").modal("show");
			  })();
	} catch (error) {
		console.log("Error:", error);
		$(".sendEmailNotification").attr("disabled", false);
		$("#modal-shortprofilefortheborrower")
			.addClass("modal-warning")
			.removeClass("modal-success");
		$("#modal-shortprofilefortheborrower #message").html("An error occurred.");
		$("#modal-shortprofilefortheborrower").modal("show");
	}
};

const checkFirstInterestDate = () => {

	const fundsStartDate = $("#fundsAcceptanceStartDate").val();
	const firstInterestDate = $("#loanActiveDate").val();

	const start = fundsStartDate.split("/");
	const end = firstInterestDate.split("/");

	const convertStart = new Date(`${start[2]}/${start[1]}/${start[0]}`);
	const convertEnd = new Date(`${end[2]}/${end[1]}/${end[0]}`);

	const diffInDays = Math.round(
		(convertEnd - convertStart) / (1000 * 60 * 60 * 24)
	);

	if (diffInDays < 28) {
		alert("The first interest date should be greater than 28 days.");
	}
};

const fetchWhatsappChatID = async () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const userId = suserId;
	const primaryType = sprimaryType;
	const accessToken = saccessToken;

	const dealNameInput = $("#dealName").val();

	const dealNameUrl =
		userisIn === "local"
			? `http://35.154.48.120:8080/oxynew/v1/user/${dealNameInput}/group_chatid`
			: `https://fintech.oxyloans.com/oxyloans/v1/user/${dealNameInput}/group_chatid`;

	try {
		const response = await fetch(dealNameUrl, {
			method: "GET",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
		});

		if (response.ok) {
			const data = await response.json();
			if (data.id !== "NA" && data.id != null && data.id !== "") {
				$("#dealWhatsappChatId").val(data.id);
			}
		} else {
			console.log("error");
			alert("The Whatsapp group name does not match with the deal name.");
		}
	} catch (error) {
		console.log("error");
		alert("The Whatsapp group name does not match with the deal name.");
	}
};

function w2wWithdrawalhistory(userType) {
	
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	if (userisIn == "local") {
		var w2whistory =
			"http://35.154.48.120:8080/oxynew/v1/user/wallet_to_wallet_initiated_transfer";
	} else {
		var w2whistory =
			"https://fintech.oxyloans.com/oxyloans/v1/user/wallet_to_wallet_initiated_transfer";
	}
	
	if (sprimaryType === "PRIMARYADMIN") {
		var postData = {
			pageNo: 1,
			pageSize: 10,
			userType:'LIVE'
		};
	} else {
		var postData = {
			pageNo: 1,
			pageSize: 10,
			userType
		};
	}

	var postData = JSON.stringify(postData);
	$.ajax({
		url: w2whistory,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			console.log(data);

			if (data.walletTransferLenderToLenderResponseDto == null) {
				$("#displayNoRecords").show();
			} else {


				let totalEntries = data.totalCount;

				   const newobj=data.walletTransferLenderToLenderResponseDto.map((data,index)=>{
			   	const newobjnew={...data};

                if (newobjnew.status=="ADMIN REJECTED"){
                	newobjnew["statusobj"]="ADMINREJECTED";
                }else if(newobjnew.status=="USER REJECTED"){
                   newobjnew["statusobj"]="USERREJECTED";
                }else if(newobjnew.status=="AUTO REJECTED"){
                   newobjnew["statusobj"]="AUTOREJECTED";
                     }else{
                   newobjnew["statusobj"]=newobjnew.status;

                }

                return newobjnew;

			   })


               console.log(newobj);

				var template = document.getElementById(
					"loadlenderswalletTowallethistoryTpl"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.to_html(template, {
					data: newobj,
				});

				$("#wallethistorytableinfo").html(html);


				var displayPageNo = data.totalCount / 10;
				displayPageNo = displayPageNo + 1;

				$(".w2wWithdrawalhistorypagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						var postData = {
							pageNo: num,
							pageSize: "10",
						};
						var postData = JSON.stringify(postData);
						if (userisIn == "local") {
							var w2whistory =
								"http://35.154.48.120:8080/oxynew/v1/user/wallet_to_wallet_initiated_transfer";
						} else {
							var w2whistory =
								"https://fintech.oxyloans.com/oxyloans/v1/user/wallet_to_wallet_initiated_transfer";
						}
						$.ajax({
							url: w2whistory,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								console.log(data);

        const newobjnewpagination=data.walletTransferLenderToLenderResponseDto.map((data,index)=>{
			    	const newobjnewpag={...data};
                     if (newobjnewpag.status=="ADMIN REJECTED"){
                	newobjnewpag["statusobj"]="ADMINREJECTED";
                    }else if(newobjnewpag.status=="USER REJECTED"){
                   newobjnewpag["statusobj"]="USERREJECTED";
                     }else if(newobjnewpag.status=="AUTO REJECTED"){
                   newobjnewpag["statusobj"]="AUTOREJECTED";
                     }else{
                     newobjnewpag["statusobj"]=newobjnewpag.status;
                  }
                    return newobjnewpag;
			   });



								var template = document.getElementById(
									"loadlenderswalletTowallethistoryTpl"
								).innerHTML;
								Mustache.parse(template);
								var html = Mustache.to_html(template, {
									data: newobjnewpagination,
								});
								$("#wallethistorytableinfo").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

const approveW2W = (status, id) => {
	$("#modal-approve-withdrawfunds-w2w").modal("show");
	$(".finalw2wstatus").attr("data-status", status);
	$(".finalw2wstatus").attr("data-tableId", id);
};

const lenderw2wapproval = async () => {

	$(".lenderwithdrawwalletBtn").attr("disabled", true);
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const status = $(".finalw2wstatus").attr("data-status");
	const id = $(".finalw2wstatus").attr("data-tableId");

	const w2wapi =
		userisIn === "local"
			? apiBaseURLOXY + "action_on_wallet_to_wallet_transfer"
			: apiBaseURLOXY + "action_on_wallet_to_wallet_transfer";

	const postData = JSON.stringify({ id, status });

	try {
		const response = await fetch(w2wapi, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postData,
		});

		if (response.ok) {

		
			if (status == "REJECTED") {
				$(".wallet_text .w2werrormessage").html(
					"You have successfully rejected the request."
				);
				$("#modal-approve-withdrawfunds-w2w").modal("hide");
				$("#modal-withdrawalAprrovesuccess").modal("show");
			} else {
				$(".wallet_text .w2werrormessage").html(
					"You have successfully approved the request."
				);
				$("#modal-approve-withdrawfunds-w2w").modal("hide");
				$("#modal-withdrawalAprrovesuccess").modal("show");
			}
		} else {
			console.log("error");
			$(".lenderwithdrawwalletBtn").attr("disabled", false);
			$("#modal-withdrawalAprrovesuccess")
				.addClass("modal-warning")
				.removeClass("modal-success");

			const errorResponse = await response.json();
			$(".modal-body .w2werrormessage").html(errorResponse.errorMessage);
			$("#modal-withdrawalAprrovesuccess").modal("show");
		}
	} catch (error) {
		console.log("Error:", error);
	}
};

const offlineInterestPrincipal = () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");


	const paymentDate = $("#offlinepayment").val();
	const originalPaymentDate = $("#orginalDate").val();
	const dealId = $("#offlinedealId").val();
	const status = $("#offlineFileStatus").val();
	const totalAmount = $("#offlineamount").val();

	let isValid = true;

	isValid =
		paymentDate === ""
			? ($(".errorpaymentdate").show(), false)
			: ($(".errorpaymentdate").hide(), true);
	isValid =
		originalPaymentDate === ""
			? ($(".errororginalPayment").show(), false)
			: ($(".errororginalPayment").hide(), true);
	isValid =
		dealId === ""
			? ($(".errordealId").show(), false)
			: ($(".errordealId").hide(), true);
	isValid =
		status === ""
			? ($(".offlinestatus").show(), false)
			: ($(".offlinestatus").hide(), true);
	isValid =
		totalAmount === ""
			? ($(".errortotalamount").show(), false)
			: ($(".errortotalamount").hide(), true);

	const offlinePayments =
		userisIn == "local"
			? apiBaseURLOXY + "interestDetailsForDeall"
			: apiBaseURLOXY + "interestDetailsForDeall";

	const postData = JSON.stringify({
		paymentDate,
		originalPaymentDate,
		dealId,
		status,
		totalAmount,
		paymentMode: "OFFLINE",
	});
	console.log(postData);

	if (isValid) {
		fetch(offlinePayments, {
			method: "POST",
			body: postData,
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
		})
			.then((response) => {
				if (response.ok) {
					$("#modal-h2happroveOfflinePayments").modal("show");

					$("#approvalOfflineH2h").attr(
						"onclick",
						`offileApproveConfirmation('${dealId}','${paymentDate}','${status}');`
					);
				} else {
					response.json().then((data) => {
						$(".modal-body #display_text").html(data.errorMessage);
						$("#modal-offlineInterestAndPrincipal").modal("show");
					});
				}
			})
			.catch((error) => {
				console.log("Error Something", error);
			});
	}
	return isValid;
};

const lenderPendingAmountFile = (isedit) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const id = isedit == undefined || isedit == null ? 0 : isedit;

	const userId = $("#lenderpendinguserId").val().substring(2);
	const amount = $("#pendingamount").val();
	const dealId = $("#pendingdealId").val();
	const reason = $("#pendingreason").val();
	const amountType = $("#pendingamountType").val();
	const transactionType = $("#pendingTransactiontype").val();
	const noOfDays = $("#lendningnoOfDays").val();

	let isValid = true;

	isValid =
		userId === ""
			? ($(".errorlenderpendinguserId").show(), false)
			: ($(".errorlenderpendinguserId").hide(), true);
	isValid =
		amount === ""
			? ($(".errorpendingamount").show(), false)
			: ($(".errorpendingamount").hide(), true);
	isValid =
		reason === ""
			? ($(".errorLendingReason").show(), false)
			: ($(".errorLendingReason").hide(), true);
	isValid =
		amountType === ""
			? ($(".errorpendingamountType").show(), false)
			: ($(".errorpendingamountType").hide(), true);
	isValid =
		transactionType === ""
			? ($(".offlinependingTransactiontype").show(), false)
			: ($(".offlinependingTransactiontype").hide(), true);

	const lenderPendingPayments =
		userisIn == "local"
			? apiBaseURLOXY + "lender-pending-amount"
			: apiBaseURLOXY + "lender-pending-amount";

	const postData = JSON.stringify({
		id,
		userId,
		amount,
		dealId,
		reason,
		amountType,
		transactionType,
		noOfDays,
	});
	console.log(postData);

	if (isValid) {
		fetch(lenderPendingPayments, {
			method: "PATCH",
			body: postData,
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
		})
			.then((response) => {
				if (response.ok) {
					$("#modal-lenderpendingsuccess").modal("show");
				} else {
					response.json().then((data) => {
						console.log(data);
						$(".modal-body #display_text").html(data.errorMessage);
						$("#modal-offlineInterestAndPrincipal").modal("show");
					});
				}
			})
			.catch((error) => {
				console.log("Error Something", error);
			});
	}
	return isValid;
};

function offileApproveConfirmation(deald, paymentdate, status) {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let h2happrove;
	if (userisIn == "local") {
		h2happrove = apiBaseURLOXY + "interestsApprovalss";
	} else {
		h2happrove = apiBaseURLOXY + "interestsApprovalss";
	}

	var postData = {
		dealId: deald,
		paymentDate: paymentdate,
		status: status,
		checkAll: true,
		radhaSirApproved: true,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);

	fetch(h2happrove, {
		method: "PATCH",
		body: postData,
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (response.ok) {
				$("#modal-h2happroveOfflinePayments").modal("hide");
				$(".offlineSuccessInterest").show("show");
			} else {
				console.log("Error Something");
				$("#modal-h2happroveOfflinePayments").modal("hide");

				response.json().then((data) => {
					$(".modal-body #display_text").html(data.errorMessage);
					$("#modal-offlineInterestAndPrincipal").modal("show");
				});
			}
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
}

const readNDA = (input) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	const partnerUtmName = getCookie("partnerUtmName");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	if (input.files && input.files[0]) {
		var reader = new FileReader();

		reader.onload = function (e) {
			$(".ndaFileUpload .image-upload-wrap").hide();

			$(".ndaFileUpload .file-upload-image").attr("src", e.target.result);
			$(".ndaFileUpload .file-upload-content").show();

			$(".ndaFileUpload .image-title").html(input.files[0].name);
		};

		reader.readAsDataURL(input.files[0]);
		var fd = new FormData();
		var files = input.files[0];
		//alert(fd);
		fd.append("PARTNERNDA", files);

		let actionURL;
		if (userisIn == "local") {
			actionURL =
				"http://35.154.48.120:8080/oxynew/v1/user/" +
				userId +
				"/partnerAgreementType";
		} else {
			actionURL =
				"https://fintech.oxyloans.com/oxyloans/v1/user/" +
				userId +
				"/partnerAgreementType";
		}

		$.ajax({
			url: actionURL,
			type: "POST",
			data: fd,
			contentType: false,
			processData: false,
			success: function (data, textStatus, xhr) {
				$("#modal-partnerNDAupload").modal("show");
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("Error Something");
				$("#modal-errorpartnerMOUupload").modal("show");
			},

			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	} else {
		removeUpload();
	}
};

const UploadsheetReferal = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	const partnerUtmName = getCookie("partnerUtmName");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var form = $("#FileReferralUploaddoc")[0];

	var referalFileStatus = $(".referralStatusFile").val();

	var fd = new FormData();
	var files = form.files[0];
	fd.append("LENDERREFERRALBONUS", files);

	let actionURL;
	if (userisIn == "local") {
		actionURL =
			"http://35.154.48.120:8080/oxynew/v1/user/uploadExcel/" +
			referalFileStatus;
	} else {
		actionURL =
			"https://fintech.oxyloans.com/oxyloans/v1/user/uploadExcel/" +
			referalFileStatus;
	}

	fetch(actionURL, {
		method: "POST",
		body: fd,
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => {
			if (response.ok) {
				$("#modal-fileUploadedSuccessfully").modal("show");
			} else {
				console.log("Error Something");
				$("#modal-alreadyUploadedTheSheet").modal("show");
			}
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
};

const knowCollegeInfo = (location) => {
	if (location === "") {
		location = $("#searchColleges").val();
	} else {
		location = location;
	}

	let college;
	if (userisIn === "local") {
		college = apiBaseURLOXY + "list_of_university_names";
	} else {
		college = apiBaseURLOXY + "list_of_university_names";
	}

	var postData = {
		type: location,
	};

	var postData = JSON.stringify(postData);

	fetch(college, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
		},
		body: postData,
	})
		.then((response) => response.json())
		.then((data) => {
			if (location === "location") {
				$(".tableC").html("Location In India");
				$(".scriptC").hide();
				setTimeout(() => {
					$(".scriptbtncollege,.scriptbtnAgent").hide();
				}, 100);
			} else if (location === "university") {
				setTimeout(() => {
					$(".scriptL").hide();
					$(".scriptbtnLocation,.scriptbtnAgent").hide();
				}, 500);
			} else {
				$(".tableC").html("Agents/consultancies");
				setTimeout(() => {
					$(".scriptL").hide();
					$(".scriptbtnLocation,.scriptbtncollege").hide();
				}, 500);
			}

			let template = document.getElementById("loadBorrowersListTpl").innerHTML;
			Mustache.parse(template);
			let html = Mustache.to_html(template, { data: data });
			$("#loadBorrowersList").html(html);
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
};

const getInfoCollages = (type, name, agent) => {
	let postData;
	if (type === "university") {
		postData = {
			universityName: name,
		};
	} else if (type === "location") {
		postData = {
			locationInIndia: name,
		};
	} else {
		postData = {
			universityName: null,
			locationInIndia: null,
			type: null,
			agentName: agent,
		};
	}

	let college;
	if (userisIn === "local") {
		college = apiBaseURLOXY + "university_data";
	} else {
		college = apiBaseURLOXY + "university_data";
	}
	postData = JSON.stringify(postData);

	fetch(college, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
		},
		body: postData,
	})
		.then((response) => response.json())
		.then((data) => {
			let template = document.getElementById(
				"showloadBorrowersListTpl"
			).innerHTML;
			Mustache.parse(template);
			let html = Mustache.to_html(template, { data: data });
			$("#showloadBorrowersList").html(html);
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
};

const dealNotification = async () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const dealCreateType = $("#offlineFileStatus").val();
	const minimumparticiationAmount = $("#minimumparticiationAmount").val();
	const maximumparticiationAmount = $("#maximummumparticiationAmount").val();
	const dealrateofinterest = $("#dealrateofinterest").val();
	const dealtenure = $("#dealtenure").val();
	const participationExtendingAmount = $("#participationExtendingAmount").val();
	const discription = $(".dealDiscriptionData").val();

	let isValid = true;

	isValid = minimumparticiationAmount !== "" ? true : false;
	$(".errorminimumparticiationAmount").toggle(!isValid);

	isValid = maximumparticiationAmount !== "" ? true : false;
	$(".errormaximumparticiationAmount").toggle(!isValid);

	isValid = dealrateofinterest !== "" ? true : false;
	$(".errorrateofinterest").toggle(!isValid);

	isValid = participationExtendingAmount !== "" ? true : false;
	$(".errorparticipationExtendingAmount").toggle(!isValid);

	isValid = dealtenure !== "" ? true : false;
	$(".errortenure").toggle(!isValid);

	isValid = discription !== "" ? true : false;
	$(".errordealDiscription").toggle(!isValid);

	const dealNotifications =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/notifications-before-deal-creation"
			: "https://fintech.oxyloans.com/oxyloans/v1/notifications-before-deal-creation";

	const postData = {
		messageType: dealCreateType,
		dealDiscription: discription,
		minimumParticipation: minimumparticiationAmount,
		maxmumparticipation: maximumparticiationAmount,
		rateofinterest: dealrateofinterest,
		tenure: dealtenure,
		participationExtendingAmount: participationExtendingAmount,
	};

	const requestOptions = {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: JSON.stringify(postData),
	};

	if (isValid) {
		try {
			const response = await fetch(dealNotifications, requestOptions);
			const data = await response.json();
			$(".offlineSuccessInterest").toggle(response.ok);
			$("#modal-offlineInterestAndPrincipal .modal-body #display_text").html(
				response.ok ? "" : data.errorMessage
			);
			$("#modal-offlineInterestAndPrincipal").modal(
				response.ok ? "hide" : "show"
			);
		} catch (error) {
			console.log("Error:", error);
		}
	}

	return isValid;
};

const dealNotificationNormal = async () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const discriptionfirst = $(".dealDiscriptionnormal").val();
	const discriptionsecond = $(".dealDiscriptionnormalText").val();
	const dealCreateType = $("#offlineFileStatus").val();

	let isValid = true;

	if (discriptionfirst === "") {
		$(".errordealDiscriptionText").show();
		isValid = false;
	} else {
		$(".errordealDiscriptionText").hide();
	}

	if (discriptionsecond === "") {
		$(".errordealDiscriptionNormal").show();
		isValid = false;
	} else {
		$(".errordealDiscriptionNormal").hide();
	}

	const dealNotifications =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/notifications-before-deal-creation"
			: "https://fintech.oxyloans.com/oxyloans/v1/notifications-before-deal-creation";

	const postData = {
		messageType: dealCreateType,
		firstInput: discriptionfirst,
		secondInput: discriptionsecond,
	};

	const requestOptions = {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: JSON.stringify(postData),
	};

	if (isValid) {
		try {
			const response = await fetch(dealNotifications, requestOptions);
			const data = await response.json();
			if (response.ok) {
				$(".offlineSuccessInterest").show();
			} else {
				$(".modal-body #display_text").html(data.errorMessage);
				$("#modal-offlineInterestAndPrincipal").modal("show");
			}
		} catch (error) {
			console.log("Error:", error);
		}
	}

	return isValid;
};

const dealCreateNotification = () => {
	let dealCreateType = $("#offlineFileStatus").val();
	if (dealCreateType === "DEALCREATION") {
		$(".typeDEALCREATION").show();
		$(".typeMessageDealNotification").hide();
	} else {
		$(".typeDEALCREATION").hide();
		$(".typeMessageDealNotification").show();
	}
};

const subinquiries = (id, userid) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let viewSubQuery =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/listOfQueriesHisory"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/listOfQueriesHisory";

	let postData = {
		id: id,
		userId: userid,
	};

	fetch(viewSubQuery, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: JSON.stringify(postData),
	})
		.then((response) => response.json())
		.then((data) => {
			$("#modal-displaySubUserQuery").modal("show");

			if (data.length === 0) {
				$(".viewSubqueryNodata").show();
			} else {
				let template = document.getElementById("viewgetUserQuery").innerHTML;
				Mustache.parse(template);
				let html = Mustache.to_html(template, { data: data });
				$("#displaySubUserQuery").html(html);
			}
		})
		.catch((error) => {
			console.log("Error Something");
			alert("Something Went Wrong 500");
		});
};

const rejectedCmsFiles = () => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let interestRejected = getCookie("interestRejected");
	let principalRejected = getCookie("principalRejected");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	let cmsrejected =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/rejectedFilesInCms"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/rejectedFilesInCms";

	fetch(cmsrejected, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			if (
				data.interestRejected.length === 0 &&
				data.principalRejected.length === 0
			) {
				return true;
			} else if (
				data.interestRejected.length !== 0 &&
				interestRejected === "false"
			) {
				$(".interest_btn").hide();
				$(".interestRejected").show();
				let template = document.getElementById(
					"showCmsRejectedFiles"
				).innerHTML;
				Mustache.parse(template);
				let html = Mustache.to_html(template, { data: data.interestRejected });
				$("#viewCmsRejectedFiles").html(html);
				$("#modal-adminCmsRejectedFiles .modal-title").html(
					"Interest Rejected Files"
				);
				$("#modal-adminCmsRejectedFiles").modal("show");
			} else if (
				data.principalRejected.length !== 0 &&
				principalRejected === "false"
			) {
				$(".princial_btn").hide();
				$(".principalrejected").show();
				let template = document.getElementById(
					"showCmsRejectedFiles"
				).innerHTML;
				Mustache.parse(template);
				let html = Mustache.to_html(template, { data: data.principalRejected });
				$("#viewCmsRejectedFiles").html(html);
				$("#modal-adminCmsRejectedFiles .modal-title").html(
					"Principal Rejected Files"
				);
				$("#modal-adminCmsRejectedFiles").modal("show");
			}
		})
		.catch((error) => {
			console.log("Error Something");
		});
};

const rejectedCmsFilesofinterest = () => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	$("#modal-adminCmsRejectedFiles").modal("hide");

	let cmsrejected =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/rejectedFilesInCms"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/rejectedFilesInCms";

	fetch(cmsrejected, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			if (data.interestRejected.length !== 0) {
				$(".interest_btn").hide();
				$(".interestRejected").show();
				let template = document.getElementById(
					"showCmsRejectedFiles"
				).innerHTML;
				Mustache.parse(template);
				let html = Mustache.to_html(template, { data: data.interestRejected });
				$("#viewCmsRejectedFiles").html(html);
				$("#modal-adminCmsRejectedFiles .modal-title").html(
					"Interest Rejected Files"
				);
				$("#modal-adminCmsRejectedFiles").modal("show");
			}
		})
		.catch((error) => {
			console.log("Error Something");
		});
};

const rejectedCmsFilesofPrincipal = () => {
	$("#modal-adminCmsRejectedFiles").modal("hide");

	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	let cmsrejected =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/rejectedFilesInCms"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/rejectedFilesInCms";

	$.ajax({
		url: cmsrejected,
		type: "GET",
		success: (data, textStatus, xhr) => {
			if (data.principalRejected.length !== 0) {
				$(".princial_btn").hide();
				$(".principalrejected").show();
				let template = document.getElementById(
					"showCmsRejectedFiles"
				).innerHTML;
				Mustache.parse(template);
				let html = Mustache.to_html(template, { data: data.principalRejected });
				$("#viewCmsRejectedFiles").html(html);
				$("#modal-adminCmsRejectedFiles .modal-title").html(
					"Principal Rejected Files"
				);
				$("#modal-adminCmsRejectedFiles").modal("show");
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const skipRejected = (values) => {
	writeCookie(values, true);
	$("#modal-adminCmsRejectedFiles").modal("hide");
};

const pendingPrincipalFiles = () => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	let pendingPrincipla =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/principalEndNotifications"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/principalEndNotifications";

	fetch(pendingPrincipla, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			if (data.length == null || data.length == "null" || data.length == 0) {
				$("#displaypendingH2h").show();
			} else {
				let template = document.getElementById(
					"displayPendingFilesTpl"
				).innerHTML;
				Mustache.parse(template);
				let html = Mustache.render(template, { data: data });
				$("#displayPendingFilesData").html(html);
			}
		})
		.catch((error) => {
			console.log("error");
		});
};

const knowViewLenderApplicationStatus = (dealid, status, userchoosenType) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let viewlenders =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/principal-status"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/principal-status";

	var postData = {
		dealId: dealid,
		status: status,
		type: userchoosenType,
	};

	var postData = JSON.stringify(postData);

	fetch(viewlenders, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: postData,
	})
		.then((response) => response.json())
		.then((data) => {
			if (status == "INITIATED" && userchoosenType == "WALLET") {
				if (data.length == 0) {
					$("#initiatedDisplayNodata").show();
				} else {
					let template =
						document.getElementById("viewInitiatedUsers").innerHTML;
					Mustache.parse(template);
					let html = Mustache.render(template, { data: data });
					$("#viewLenderInitiatedUsers").html(html);
				}
			} else if (status == "INITIATED" && userchoosenType == "BANKACCOUNT") {
				if (data.length == 0) {
					$("#initiatedbankDisplayNodata").show();
				} else {
					let template = document.getElementById(
						"viewInitiatedbankUsers"
					).innerHTML;
					Mustache.parse(template);
					let html = Mustache.render(template, { data: data });
					$("#viewLenderInitiatedbankUsers").html(html);
				}
			} else if (status == "PRINCIPALRETURNED" && userchoosenType == "WALLET") {
				if (data.length == 0) {
					$("#paiddisplayNodata").show();
				} else {
					let template = document.getElementById("viewPaidUsers").innerHTML;
					Mustache.parse(template);
					let html = Mustache.render(template, { data: data });
					$("#viewpaidUsers").html(html);
				}
			} else if (
				status == "PRINCIPALRETURNED" &&
				userchoosenType == "BANKACCOUNT"
			) {
				if (data.length == 0) {
					$("#paiddisplaybankNodata").show();
				} else {
					let template = document.getElementById("viewPaidbankUsers").innerHTML;
					Mustache.parse(template);
					let html = Mustache.render(template, { data: data });
					$("#viewpaidbankUsers").html(html);
				}
			} else if (
				status == "PRINCIPALNOTYETRETURNED" &&
				userchoosenType == "WALLET"
			) {
				if (data.length == 0) {
					$("#notreturndisplayNodata").show();
				} else {
					let template = document.getElementById(
						"viewnotreturnedUsers"
					).innerHTML;
					Mustache.parse(template);
					let html = Mustache.render(template, { data: data });
					$("#viewnotreturnUsers").html(html);
				}
			} else if (
				status == "PRINCIPALNOTYETRETURNED" &&
				userchoosenType == "BANKACCOUNT"
			) {
				if (data.length == 0) {
					$("#notreturndisplaybankNodata").show();
				} else {
					let template = document.getElementById(
						"viewnotreturnedbankUsers"
					).innerHTML;
					Mustache.parse(template);
					let html = Mustache.render(template, { data: data });
					$("#viewnotreturnbankUsers").html(html);
				}
			} else if (status == "TOTALLENDERS" && userchoosenType == "BANKACCOUNT") {
				if (data.length == 0) {
					$("#noDatafound").show();
				} else {
					let template = document.getElementById(
						"totaluserbankaccount"
					).innerHTML;
					Mustache.parse(template);
					let html = Mustache.render(template, { data: data });
					$("#displaybankuserdata").html(html);
					let psum = 0;
					$(".paticipatedAmountVal").each(function () {
						psum += +$(this).val();
					});

					$(".pinfo").html(psum);
				}
			} else if (status == "TOTALLENDERS" && userchoosenType == "WALLET") {
				if (data.length == 0) {
					$("#noWALLETDatafound").show();
				} else {
					let template = document.getElementById(
						"totaluserwaaletaccount"
					).innerHTML;
					Mustache.parse(template);
					let html = Mustache.render(template, { data: data });
					$("#displayWALLETDealsData").html(html);
					let psum = 0;
					$(".paticipatedAmountVal").each(function () {
						psum += +$(this).val();
					});
					$(".pinfo").html(psum);
				}
			}
		})
		.catch((error) => {
			console.log("Error Something");
		});
};

const principalPaidMoreInfo = (dealId) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	let principalmoreinfo =
		userisIn === "local"
			? `http://35.154.48.120:8080/oxynew/v1/user/deal-principal-history?dealId=${dealId}`
			: `https://fintech.oxyloans.com/oxyloans/v1/user/deal-principal-history?dealId=${dealId}`;

	$.ajax({
		url: principalmoreinfo,
		type: "GET",
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			if (data.length == 0 || data.paymentsMap == null) {
				$("#principaldisplayNodata").show();
			} else {
				let getData = [];
				const entries = Object.keys(data.paymentsMap).map((key) => [
					key,
					data.paymentsMap[key],
				]);

				let map = new Map();
				for (let z = 0; z < entries.length; z++) {
					map.set(z + 1, entries[z][1]);
				}

				let arrayData = [];

				for (let x = 0; x < map.size; x++) {
					arrayData.push(JSON.parse(JSON.stringify(map.get(x + 1))));
				}

				for (let i = 0; i < arrayData.length; i++) {
					for (let j = 0; j < arrayData[i].length; j++) {
						getData.push(arrayData[i][j]);
					}
				}
				const template = document.getElementById(
					"addPrincipalMoreinfoStatus"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: getData,
				});
				$("#viewprincipalUsers").html(html);
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("error");
			$("#displayPendingH2HInfo").show();
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const pendingH2HFiles = () => {

	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	let pendingH2h =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/pendingH2HNotifications"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/pendingH2HNotifications";

	fetch(pendingH2h, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			if (data.length == null || data.length == 0) {
				$("#displayPendingH2HInfo").show();
			} else {
				let pendingfiles = [];
				for (let i = 0; i < data.length; i++) {
					for (let j = 0; j < data[i].unmatchedInterestsDto.length; j++) {
						pendingfiles.push(data[i].unmatchedInterestsDto[j]);
					}
				}

				const template = document.getElementById(
					"displayPendingH2hFiles"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.render(template, {
					data: pendingfiles,
				});

				$("#displayh2hPendingData").html(html);
			}
		})
		.catch((error) => {
			console.log("error");
			$("#displayPendingH2HInfo").show();
		});
};

const getvaliditypaidUsers = (Usertype) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let paidUsers =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/lender_fee_payment_testdetails"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/lender_fee_payment_details";

	var postData = {
		type: Usertype,
		pageNo: 1,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: paidUsers,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			$(".paidType").html(Usertype);

			if (data.count == 0) {
				$(".noDatafoundPaid").show();
			} else {
				const template = document.getElementById(
					"displayRecordsPaidUsers"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.listOfTransactions,
				});
				$("#displayPaidUsersInfo").html(html);

				$(".acceptedPaginationadminsearch").hide();
				$(".acceptedPaginationadmin").show();

				let displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;
				$(".acceptedPaginationadmin")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						var postData = {
							type: Usertype,
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);
						let paidUsers =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/lender_fee_payment_details"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/lender_fee_payment_details";

						$(".acceptedPaginationadminsearch").hide();
						$(".acceptedPaginationadmin").show();

						$.ajax({
							url: paidUsers,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								const template = document.getElementById(
									"displayRecordsPaidUsers"
								).innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.listOfTransactions,
								});
								$("#displayPaidUsersInfo").html(html);
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
			alert("Something Went Wrong 500");
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const getvaliditypaidUsersSearch = () => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let paidUsersSearch =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/lender_fee_payment_testdetails"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/lender_fee_payment_testdetails";

	let userSearch = $("#paidUsearchType").val();

	var postData = {
		type: userSearch,
		pageNo: 1,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: paidUsersSearch,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			if (userSearch == "") {
				$(".paidType").html("HDFC");
			} else {
				$(".paidType").html(userSearch);
			}
			if (data.length == 0) {
				$(".noDatafoundPaid").show();
			} else {
				const template = document.getElementById(
					"displayRecordsPaidUsers"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.listOfTransactions,
				});
				$("#displayPaidUsersInfo").html(html);

				$(".acceptedPaginationadminsearch").show();
				$(".acceptedPaginationadmin").hide();

				$("#displayPaidUsersInfo").html(html);
				let displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".acceptedPaginationadminsearch")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						var postData = {
							type: userSearch,
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);
						let paidUsers =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/lender_fee_payment_details"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/lender_fee_payment_details";

						$(".acceptedPaginationadminsearch").show();
						$(".acceptedPaginationadmin").hide();

						$.ajax({
							url: paidUsers,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								const template = document.getElementById(
									"displayRecordsPaidUsers"
								).innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.listOfTransactions,
								});
								$("#displayPaidUsersInfo").html(html);
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
			alert("Something Went Wrong 500");
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const viewDealTypeInfo = () => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let viewPayoutDeals =
		userisIn === "local" ? apiBaseURLOXY + "deals" : apiBaseURLOXY + "deals";

	let postData = {
		dealType: "CLOSED",
		payOutType: "MONTHLY",
	};

	const postDataStr = JSON.stringify(postData);

	fetch(viewPayoutDeals, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: postDataStr,
	})
		.then((response) => response.json())
		.then((data) => {
			if (data.listOfBorrowersDealsResponseDto.length === 0) {
				$(".noDatafoundPaid").show();
			} else {
				const template = document.getElementById(
					"displayViewDealPayment"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.listOfBorrowersDealsResponseDto,
				});
				$("#viewloaddealPayoutType").html(html);
			}
		})
		.catch((error) => {
			console.log("Error Something");
		});
};

const viewDealTypeInfosearch = () => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();
	let viewPayoutDeals =
		userisIn === "local" ? apiBaseURLOXY + "deals" : apiBaseURLOXY + "deals";

	const dealType = $("#dealtypeinfosearch").val();
	const dealPayoutTypesearch = $("#dealpayouttypeval").val();

	$(".loadDealStatus").html(dealPayoutTypesearch);

	let postData = {
		dealType,
		payOutType: dealPayoutTypesearch,
	};

	const postDataStr = JSON.stringify(postData);

	fetch(viewPayoutDeals, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
		body: postDataStr,
	})
		.then((response) => response.json())
		.then((data) => {
			if (data.listOfBorrowersDealsResponseDto.length === 0) {
				$("#loadingSec").hide();
				$("#viewloaddealPayoutType").hide();
				alert("no data");
			} else {
				$("#loadingSec").hide();
				const template = document.getElementById(
					"displayViewDealPayment"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.listOfBorrowersDealsResponseDto,
				});
				$("#viewloaddealPayoutType").html(html);
			}
		})
		.catch((error) => {
			$("#loadingSec").show();
			console.log("Error Something");
		});
};

const viewdealsummaryPrincipal = (dealId, amountType, dealname) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	const userId = suserId;
	const primaryType = sprimaryType;
	const accessToken = saccessToken;

	let viewdealsummary =
		userisIn === "local"
			? `http://35.154.48.120:8080/oxynew/v1/user/deal-summary?dealId=${dealId}&amountType=${amountType}`
			: `https://fintech.oxyloans.com/oxyloans/v1/user/deal-summary?dealId=${dealId}&amountType=${amountType}`;

	fetch(viewdealsummary, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			$(".knowclassname").html(dealname);
			if (data.length === 0) {
				$("#modal-displayPrincipalSummary").modal("show");
				$("#displayPrincipalSumary .nodataPrincipal").show();
			} else {
				$("#modal-displayPrincipalSummary").modal("show");
				const template =
					document.getElementById("scriptpricipalInfo").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data,
				});
				$("#displayPrincipalSumary").html(html);
			}
		})
		.catch((error) => {
			console.log("error");
			$("#displayPendingH2HInfo").show();
		});
};

const viewdealsummaryInterest = async (dealId, amountType, dealname) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const userId = suserId;
	const primaryType = sprimaryType;
	const accessToken = saccessToken;

	const viewdealsummary =
		userisIn === "local"
			? `http://35.154.48.120:8080/oxynew/v1/user/deal-summary?dealId=${dealId}&amountType=${amountType}`
			: `https://fintech.oxyloans.com/oxyloans/v1/user/deal-summary?dealId=${dealId}&amountType=${amountType}`;

	try {
		const response = await fetch(viewdealsummary, {
			method: "GET",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
		});

		if (!response.ok) {
			throw new Error("Network response was not ok");
		}

		const data = await response.json();

		$(".knowclassname").html(dealname);
		$("#modal-displayInterestSummary").modal("show");

		data.length === 0
			? $("#displayInterestSumary .nodataPrincipal").show()
			: (() => {
					const template =
						document.getElementById("scriptInterestInfo").innerHTML;
					Mustache.parse(template);
					const html = Mustache.to_html(template, {
						data: data,
					});
					$("#displayInterestSumary").html(html);
			  })();
	} catch (error) {
		console.error("Error:", error);
		$("#displayPendingH2HInfo").show();
	}
};

const holdAmountRequest = () => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	const userId = $("#holdUser_id").val().substring(2).trim();
	const dealId = $("#holdUser_deal_id").val();
	const requestAmount = $("#hold_amount").val().trim();
	const comments = $("#hold_comments").val().trim();

	let isValid = true;

	if (userId === "") {
		$(".hold_error").show();
		$(".error_message").html("Enter the User Id");
		$(".hold_error")
			.fadeIn(100)
			.fadeOut(100)
			.fadeIn(100)
			.fadeOut(100)
			.fadeIn(100);

		return false;
	} else {
		$(".hold_error").hide();
	}

	if (dealId === "") {
		$(".hold_error").show();
		$(".error_message").html("Enter the deal Id");
		$(".hold_error")
			.fadeIn(100)
			.fadeOut(100)
			.fadeIn(100)
			.fadeOut(100)
			.fadeIn(100);

		return false;
	} else {
		$(".hold_error").hide();
	}

	if (requestAmount === "") {
		$(".hold_error").show();
		$(".error_message").html("Enter the Hold Amount");
		$(".hold_error")
			.fadeIn(100)
			.fadeOut(100)
			.fadeIn(100)
			.fadeOut(100)
			.fadeIn(100);
		return false;
	} else {
		$(".hold_error").hide();
	}

	if (comments === "") {
		$(".hold_error").show();
		$(".error_message").html("Enter the Comments");
		$(".hold_error")
			.fadeIn(100)
			.fadeOut(100)
			.fadeIn(100)
			.fadeOut(100)
			.fadeIn(100);
		return false;
	} else {
		$(".hold_error").hide();
	}

	const holdrequestUrl =
		userisIn === "local"
			? apiBaseURLOXY + "holdamount"
			: apiBaseURLOXY + "holdamount";

	const postData = {
		userId: userId,
		holdAmount: requestAmount,
		comments: comments,
		dealId: dealId,
	};

	const postDataString = JSON.stringify(postData);

	if (isValid === true) {
		$(".hold_error").hide();
		$("#submit_hold_request").attr("disabled", true);
		fetch(holdrequestUrl, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataString,
		})
			.then((response) => response.json())
			.then((data) => {
				$("#modal-holdrequestedSubmitted").modal("show");

				$("#holdUser_id").val("");
				$("#hold_amount").val("");
				$("#hold_comments").val("");
				$("#submit_hold_request").attr("disabled", false);

				setTimeout(function () {
					location.reload();
				}, 5500);
			})
			.catch((error) => {
				console.log(error)
				$("#submit_hold_request").attr("disabled", false);
				$(".hold_error").show();
				$(".error_message").html(error.responseJSON.errorMessage);
				$(".hold_error")
					.fadeIn(100)
					.fadeOut(100)
					.fadeIn(100)
					.fadeOut(100)
					.fadeIn(100);
			});
	}
	return isValid;
};

const holdamountList = (loadType) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	const userId = suserId;
	const primaryType = sprimaryType;
	const accessToken = saccessToken;

	const listHoldRequestUsers =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/holdamount-list"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/holdamount-list";

	fetch(listHoldRequestUsers, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			console.log(data);

			if (loadType == "currentUsers") {
				if (data.length === 0) {
					$(".hold_ten_users").show();
				} else {
					const datausers = data;

					var statusClosed = datausers.filter((data) => {
						return data.status == "CLOSE";
					});

					var statusOpens = datausers.filter((data) => {
						return data.status == "OPEN";
					});

					const merggedArray = [...statusOpens, ...statusClosed];
					console.log(merggedArray);

					const template = document.getElementById(
						"holdrequestUsersdetails"
					).innerHTML;
					Mustache.parse(template);
					const html = Mustache.to_html(template, {
						data: merggedArray,
					});
					$("#userHoldRequest_body").html(html);
				}
			} else {
				if (data.length === 0) {
					$(".hold_ten_users").show();
				} else {
					const template = document.getElementById(
						"holdrequestUsersdetails"
					).innerHTML;
					Mustache.parse(template);
					const html = Mustache.to_html(template, {
						data: datausers.reverse(),
					});
					$("#userHoldRequest_body").html(html);
				}
			}
		})
		.catch((error) => {
			console.log("error");
			$("#displayPendingH2HInfo").show();
		});
};

const submitholdrequest = (userid, holdamount, status) => {
	$(`.hold_subUser-${userid}${holdamount}${status}`).slideToggle(
		"slow",
		function () {
			if ($(`.hold_subUser-${userid}${holdamount}${status}`).is(":visible")) {
				$(".financialLoading").show();

				const sprimaryType = getCookie("sUserType");
				const saccessToken = getCookie("saccessToken");

				const getDeals =
					userisIn === "local"
						? `http://35.154.48.120:8080/oxynew/v1/user/${userid}/runningDealsInfoBasedOnPagination`
						: `https://fintech.oxyloans.com/oxyloans/v1/user/${userid}/runningDealsInfoBasedOnPagination`;

				var postData = {
					pageNo: 1,
					pageSize: 10,
				};

				const postDataString = JSON.stringify(postData);
				$.ajax({
					url: getDeals,
					type: "POST",
					data: postDataString,
					contentType: "application/json",
					dataType: "json",
					success: function (data, textStatus, xhr) {
						totalEntries = data.count;
						if (data.lenderPaticipatedResponseDto.length == 0) {
							$(`.displayUserHoldRunningDealsInfo-${userid}`).show();
							setTimeout(function () {
								$(".financialLoading").hide();
							}, 1500);
						} else {
							const totalArrayData = new Array();

							for (
								var i = 0;
								i < data.lenderPaticipatedResponseDto.length;
								i++
							) {
								let subDataArray = "";
								subDataArray = data.lenderPaticipatedResponseDto[i];
								const subUrl =
									userisIn === "local"
										? `http://35.154.48.120:8080/oxynew/v1/user/${userid}/${data.lenderPaticipatedResponseDto[i].dealId}/interest-info`
										: `https://fintech.oxyloans.com/oxyloans/v1/user/${userid}/${data.lenderPaticipatedResponseDto[i].dealId}/interest-info`;

								$.ajax({
									url: subUrl,
									method: "GET",
									success: function (data2, textStatus, xhr) {
										let letsubarrayData = mergeData(subDataArray, data2);
										totalArrayData.push(letsubarrayData);
									},
									error: function () {},
									beforeSend: function (xhr) {
										xhr.setRequestHeader("accessToken", saccessToken);
									},
								});
							}

							setTimeout(function () {
								const template =
									document.getElementById("holdAmountBreakUp").innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: totalArrayData,
								});
								$(
									`#displayUserHoldRunningDealsInfo-${userid}${holdamount}${status}`
								).html(html);
							}, 5000);

							setTimeout(function () {
								$(".financialLoading").hide();
							}, 5500);

							let displayPageNo = totalEntries / 10;
							displayPageNo = displayPageNo + 1;

							$(`.holdAmountDealspagination-${userid}${holdamount}${status}`)
								.bootpag({
									total: displayPageNo,
									page: 1,
									maxVisible: 5,
									leaps: true,
									firstLastUse: true,
									first: "←",
									last: "→",
									wrapClass: "pagination",
									activeClass: "active",
									disabledClass: "disabled",
									nextClass: "next",
									prevClass: "prev",
									lastClass: "last",
									firstClass: "first",
								})
								.on("page", function (event, num) {
									var postData = {
										pageNo: num,
										pageSize: "10",
									};
									const postDataString = JSON.stringify(postData);

									console.log(postData);
									$(".financialLoading").show();

									const getDeals =
										userisIn === "local"
											? `http://35.154.48.120:8080/oxynew/v1/user/${userid}/runningDealsInfoBasedOnPagination`
											: `https://fintech.oxyloans.com/oxyloans/v1/user/${userid}/runningDealsInfoBasedOnPagination`;

									$.ajax({
										url: getDeals,
										type: "POST",
										data: postDataString,
										contentType: "application/json",
										dataType: "json",
										success: function (data, textStatus, xhr) {
											const totalArrayDatapagination = new Array();

											for (
												var i = 0;
												i < data.lenderPaticipatedResponseDto.length;
												i++
											) {
												let subDataArraypagination = "";
												subDataArraypagination =
													data.lenderPaticipatedResponseDto[i];
												const subUrlPagination =
													userisIn === "local"
														? `http://35.154.48.120:8080/oxynew/v1/user/${userid}/${data.lenderPaticipatedResponseDto[i].dealId}/interest-info`
														: `https://fintech.oxyloans.com/oxyloans/v1/user/${userid}/${data.lenderPaticipatedResponseDto[i].dealId}/interest-info`;

												$.ajax({
													url: subUrlPagination,
													method: "GET",
													success: function (datapagination, textStatus, xhr) {
														let letsubarrayDatapagination = mergeDatapagination(
															subDataArraypagination,
															datapagination
														);
														totalArrayDatapagination.push(
															letsubarrayDatapagination
														);
													},
													error: function () {},
													beforeSend: function (xhr) {
														xhr.setRequestHeader("accessToken", saccessToken);
													},
												});
											}

											setTimeout(function () {
												const template =
													document.getElementById(
														"holdAmountBreakUp"
													).innerHTML;
												Mustache.parse(template);
												const html = Mustache.to_html(template, {
													data: totalArrayDatapagination,
												});
												$(
													`#displayUserHoldRunningDealsInfo-${userid}${holdamount}${status}`
												).html(html);
											}, 5000);

											setTimeout(function () {
												$(".financialLoading").hide();
											}, 5500);
										},
										error: function (xhr, textStatus, errorThrown) {
											$(`.displayUserHoldRunningDealsInfo-${userid}`).show();
											$(`.displaynodata-${userid}`).html("Error Something");
											setTimeout(function (argument) {
												$(".financialLoading").hide();
											}, 1500);
										},
										beforeSend: function (xhr) {
											xhr.setRequestHeader("accessToken", saccessToken);
										},
									});
								});
						}
					},
					error: function (xhr, textStatus, errorThrown) {
						console.log("Error Something");
						$(`.displayUserHoldRunningDealsInfo-${userid}`).show();
						$(`.displaynodata-${userid}`).html("Error Something");
						setTimeout(function (argument) {
							$(".financialLoading").hide();
						}, 1500);
					},
					beforeSend: function (xhr) {
						xhr.setRequestHeader("accessToken", saccessToken);
					},
				});
			} else {
				console.log("The paragraph  is hidden.");
			}
		}
	);
};

function mergeData(data1, data2) {
	var mergedData = {
		dealId: data1.dealId,
		dealName: data1.dealName,
		dealRateofinterest: data1.dealRateofinterest,
		paticipatedAmount: data1.currentValue,
		lenderFurtherPaymentDetailsamount: data2.amount,
		lenderFurtherPaymentDetailsdate: data2.date,
	};
	return mergedData;
}

function mergeDatapagination(data1, data2) {
	var mergedData = {
		dealId: data1.dealId,
		dealName: data1.dealName,
		dealRateofinterest: data1.dealRateofinterest,
		paticipatedAmount: data1.currentValue,
		lenderFurtherPaymentDetailsamount: data2.amount,
		lenderFurtherPaymentDetailsdate: data2.date,
	};
	return mergedData;
}

const deleteHoldRequest = async (tabledealId) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const deleteRequest =
		userisIn === "local"
			? `${apiBaseURLOXY}${tabledealId}/deleting-hold-request`
			: `${apiBaseURLOXY}${tabledealId}/deleting-hold-request`;

	const postData = {};
	const postDataString = JSON.stringify(postData);

	try {
		const response = await fetch(deleteRequest, {
			method: "PATCH",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataString,
		});

		if (response.ok) {
			$(".modal-body #modal_title_text").html("Requested was Deleted");
			$("#modal-holdrequestedBreakUp").modal("show");

			setTimeout(function () {
				location.reload();
			}, 4000);
		} else {
			const data = await response.json();
			if (data.errorCode == 105) {
				$(".modal-body #modal_title_warning").html(data.errorMessage);
				$("#modal-holdrequestedErrormessage").modal("show");
			}
		}
	} catch (error) {
		console.log("Error Something");

		if (error.responseJSON && error.responseJSON.errorCode == 105) {
			$(".modal-body #modal_title_warning").html(
				error.responseJSON.errorMessage
			);
			$("#modal-holdrequestedErrormessage").modal("show");
		}
	}
};

const processDealHoldUsersAmount = (
	tabledealId,
	userid,
	holdamount,
	status,
	currentHoldAmount
) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	var tableData = [];
	$(`#displayUserHoldRunningDealsInfo-${userid}${holdamount}${status} tr`).each(
		function () {
			var rowData = {};
			rowData.principal = $(this).find(".checkdeductprincipal").is(":checked");
			rowData.interest = $(this).find(".checkdeductInterest").is(":checked");
			rowData.userid = userid;

			$(this)
				.find("td")
				.each(function (index) {
					var value = $(this).text();
					rowData[index] = value;
				});
			tableData.push(rowData);
		}
	);

	var postDataArray = [];
	for (var i = 0; i < tableData.length; i++) {
		if (tableData[i].interest == true && tableData[i].principal == true) {
			postDataArray.push({
				userId: tableData[i].userid,
				dealId: tableData[i][0],
				holdAmount: parseInt(tableData[i][3]) + parseInt(tableData[i][4]),
				amountType: "BOTH",
			});
		} else if (
			tableData[i].interest == true &&
			tableData[i].principal == false
		) {
			postDataArray.push({
				userId: tableData[i].userid,
				dealId: tableData[i][0],
				holdAmount: tableData[i][4],
				amountType: "INTEREST",
			});
		} else if (
			tableData[i].interest == false &&
			tableData[i].principal == true
		) {
			postDataArray.push({
				userId: tableData[i].userid,
				dealId: tableData[i][0],
				holdAmount: tableData[i][3],
				amountType: "PRINCIPAL",
			});
		}
	}

	let requestHoldAmount = 0;
	const processRequest =
		userisIn == "local"
			? apiBaseURLOXY + tabledealId + "/holdamount-mapping-todeals"
			: apiBaseURLOXY + tabledealId + "/holdamount-mapping-todeals";

	if (postDataArray.length == 0) {
		$("#modal_title_warning").html("You didn't select any data.");
		$("#modal-holdrequestedErrormessage").modal("show");
		return false;
	}

	var newArryapostData = [];
	let arraySetValue = 0;

	for (var i = 0; i < postDataArray.length; i++) {
		requestHoldAmount =
			requestHoldAmount + parseInt(postDataArray[i].holdAmount);
		if (requestHoldAmount <= currentHoldAmount) {
			newArryapostData.push({
				amountType: postDataArray[i].amountType,
				dealId: postDataArray[i].dealId,
				holdAmount: postDataArray[i].holdAmount,
				userId: postDataArray[i].userId,
			});

			arraySetValue =
				parseInt(arraySetValue) + parseInt(postDataArray[i].holdAmount);
		} else {
			if (requestHoldAmount <= currentHoldAmount) {
				let findRemainigAmount =
					parseInt(requestHoldAmount) - parseInt(currentHoldAmount);
				newArryapostData.push({
					amountType: postDataArray[i].amountType,
					dealId: postDataArray[i].dealId,
					holdAmount: findRemainigAmount,
					userId: postDataArray[i].userId,
				});
				arraySetValue = arraySetValue + postDataArray[i].holdAmount;

				break;
			} else if (requestHoldAmount > currentHoldAmount) {
				newArryapostData.push({
					amountType: postDataArray[i].amountType,
					dealId: postDataArray[i].dealId,
					holdAmount: `${
						parseInt(currentHoldAmount) - parseInt(arraySetValue)
					}`,
					userId: postDataArray[i].userId,
				});

				break;
			}
		}
	}

	var postData = {
		userHoldAmountMappedToDealRequestDto: newArryapostData,
	};

	const postDataString = JSON.stringify(postData);

	$.ajax({
		url: processRequest,
		type: "POST",
		data: postDataString,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			$(".modal-body #modal_title_text").html(
				"You have successfully held the amount."
			);
			$("#modal-holdrequestedBreakUp").modal("show");

			setTimeout(function () {
				location.reload();
			}, 4000);
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");

			if (arguments[0].responseJSON.errorCode == 105) {
				$(".modal-body #modal_title_warning").html(
					arguments[0].responseJSON.errorMessage
				);
				$("#modal-holdrequestedErrormessage").modal("show");
			}

			$(".modal-body #modal_title_warning").html(
				arguments[0].responseJSON.errorMessage
			);

			$("#modal-holdrequestedErrormessage").modal("show");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const mappedDealtoBorrower = async () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const id = suserId;
	const primaryType = sprimaryType;
	const accessToken = saccessToken;

	const dealId = $("#dealIDBorrowerLoanProcess").val();

	const mappedBorrowers =
		userisIn === "local"
			? `${apiBaseURLOXY}${dealId}/borrowers-mapped-to-deal`
			: `${apiBaseURLOXY}${dealId}/borrowers-mapped-to-deal`;

	const isValid = dealId === "" ? false : true;
	$(".errorloanUserBorrower")[isValid ? "hide" : "show"]();

	try {
		const response = await fetch(mappedBorrowers, {
			method: "GET",
			headers: {
				accessToken: saccessToken,
			},
		});

		if (!response.ok) {
			$("#displayNoRecordsLoanUser").show();
			$("#displayNoRecords").show();
			return false;
		}

		const data = await response.json();

		$("#displayNoRecordsLoanUser")[data.length === 0 ? "show" : "hide"]();
		$(".borrowerLoanProcess")[data.length !== 0 ? "show" : "hide"]();

		if (data.length !== 0) {
			const template = document.getElementById(
				"displayborrowerloanOfferUsers"
			).innerHTML;
			Mustache.parse(template);
			const html = Mustache.to_html(template, {
				data: data,
			});
			$("#displayBorrowerLoanUser").html(html);
		}

		return true;
	} catch (error) {
		$("#displayNoRecordsLoanUser").show();
		$("#displayNoRecords").show();
		return false;
	}
};

// const addLoanBorrwer = (userID,fdamount,accountno,ifsc,nameAtBank) => {

// 	$("#modal-add-loanBorrowerApplication").modal("show");
// };

const searchLoanBorrowerStatus = async () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const id = suserId;
	const primaryType = sprimaryType;
	const accessToken = saccessToken;

	const dealId = $(".searchUserdealId").val().trim();
	const status = $(".borrowerLoanStatus").val().trim();

	const mappedBorrowers =
		userisIn === "local"
			? `${apiBaseURLOXY}status-based-borrowers-mapped-to-deal`
			: `${apiBaseURLOXY}status-based-borrowers-mapped-to-deal`;

	const postData = JSON.stringify({
		dealId,
		status,
	});

	console.log(postData);

	let isValid = true;

	if (isValid) {
		try {
			const response = await fetch(mappedBorrowers, {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					accessToken: saccessToken,
				},
				body: postData,
			});

			const data = await response.json();

			if (data.borrowerLoanResponseDto.length === 0) {
				$(".borrowerLoanStatusmain").hide();
				$(".noDatafoundStatus").show();
			} else {
				const template = document.getElementById(
					"displayPlatformClosedRecordes"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.borrowerLoanResponseDto,
				});
				$("#displayBorrowerLoanStatus").html(html);
			}
		} catch (error) {
			$(".noDatafoundStatus").show();
		}
	}

	return isValid;
};

const generatesheetForLoanUsers = async () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let borrowerLoanResponseDto = [];
	$("input:checkbox[name=selectedLoanUser]:checked").each(function () {
		if (this.checked) {
			borrowerLoanResponseDto.push({
				id: $(this).val(),
			});
		}
	});

	let isValid = borrowerLoanResponseDto.length === 0;

	if (isValid == true) {
		$("#modal-movefilenodata").modal("show");

		setTimeout(() => {
			$("#modal-movefilenodata").modal("hide");
		}, 3000);

		return false;
	}

	const dealId = $(".searchUserdealId").val();
	const generateSheet =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/approving-borrowers-moveto-before-folder"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/approving-borrowers-moveto-before-folder";

	const postData = {
		borrowerLoanResponseDto,
		dealId,
	};

	const postDataString = JSON.stringify(postData);

	try {
		const response = await fetch(generateSheet, {
			method: "PATCH",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataString,
		});

		if (!response.ok) {
			console.log("Error Something");
			const errorMessage = (await response.json()).errorMessage;
			$(".modal-body #text1").html(errorMessage);
			if ((await response.json()).errorCode === 403) {
				$("#modal-alreadyLenderReferred").modal("show");
			}
			return;
		}

		$(".loansUserSuccessMessage .info-message").html(
			"You have successfully Generated the loan amount sheet. These files will appear on the CMS page."
		);
		$("#modal-movefiletocms").modal("show");

		setTimeout(() => {
			location.reload();
		}, 6000);
	} catch (error) {
		console.log("Error Something");
	}
};

const changeLenderTestType = (userID) => {
	$(".lenderToTestLender").attr("data-reqID", userID);
	$("#modal-change-ToTestLenderprimarytype").modal("show");
};

const changingUserToTest = async () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const id = $(".lenderToTestLender").attr("data-reqID");

	const changeUserTest = `${apiBaseURLOXY}${id}/testUser`;

	const postData = {};
	const postDataJson = JSON.stringify(postData);

	try {
		const response = await fetch(changeUserTest, {
			method: "PATCH",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataJson,
		});

		if (!response.ok) {
			throw new Error("Request failed with status " + response.status);
		}
		$("#modal-change-ToTestLenderprimarytype").modal("hide");
		$(".dealextendReopen #message").html("successfully updated ");
		$("#modal-showdealTenureSuccess").modal("show");
	} catch (error) {
		if (error.message.includes("400")) {
			$("#modal-approveuserKycNotUploaded").modal("show");
		} else {
			console.log("Error Something");
		}
	}
};

const launchFutureDeal = async () => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let futureDealLaunch =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/futuredealsopen"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/futuredealsopen";

	const dealName = $("#futuredealName").val();
	const dealId = $("#dealidfuture").val();
	const whatsappChatId = $("#dealWhatsappChatId").val();
	const dealType = $(".futureLaunchDealType").val();

	const isValid =
		dealName !== "" &&
		dealId !== "" &&
		whatsappChatId !== "" &&
		dealType !== "";

	let isdealName = dealName !== "";
	let isdealId = dealId !== "";
	let iswhatsappChatId = whatsappChatId !== "";
	let isdealType = dealType !== "";

	$(".futureDealName")[isdealName ? "hide" : "show"]();
	$(".futureDealId")[isdealId ? "hide" : "show"]();
	$(".futureDealChatId")[iswhatsappChatId ? "hide" : "show"]();
	$(".futureDealType")[isdealType ? "hide" : "show"]();

	let postData = {
		dealId,
		whatsappChatId,
		dealType,
	};

	if (isValid) {
		try {
			const response = await fetch(futureDealLaunch, {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					accessToken: saccessToken,
				},
				body: JSON.stringify(postData),
			});

			if (response.ok) {
				const data = await response.json();
				$("#modal-futuredeal-launched-time").modal("show");

				setTimeout(() => {
					location.reload();
				}, 4000);
			}
		} catch (error) {
			console.log("Error Something");
		}
	}

	return isValid;
};

async function calculateInterest(principalAmount, annualInterestRate) {
	const findInterestAmount = (principalAmount / 100) * annualInterestRate;
	const interestFor15Days = findInterestAmount / 2;
	const interestFor30Days = findInterestAmount;
	const interestFor45Days = interestFor30Days + interestFor15Days;

	$(".interestForfiftenDays").html(interestFor15Days);
	$(".interestForthirtyDays").html(interestFor30Days);
	$(".interestForfourtyDays").html(interestFor45Days);
}

const fetchBorrowerfDDetails = async () => {
	try {
		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		const borrowerId = $("#fetechUserid").val().substring(2);

		let isValid = true;

		if (borrowerId == "") {
			$(".errorborrowerid").show();
			isValid = false;
		} else {
			$(".errorborrowerid").hide();
		}

		let postData = {
			leftOperand: {
				fieldName: "userId",
				fieldValue: borrowerId,
				operator: "EQUALS",
			},
			logicalOperator: "AND",
			rightOperand: {
				fieldName: "parentRequestId",
				operator: "NULL",
			},
			page: {
				pageNo: 1,
				pageSize: 10,
			},
			sortBy: "loanRequestedDate",
			sortOrder: "DESC",
		}; 

		const postDataString = JSON.stringify(postData);
		const fetchFdBorrowerDetails =
			userisIn == "local"
				? apiBaseURLOXY + "6/loan/ADMIN/request/testsearch"
				: apiBaseURLOXY + "6/loan/ADMIN/request/testsearch";

		if (isValid == true) {
			const response = await fetch(fetchFdBorrowerDetails, {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					accessToken: saccessToken,
				},
				body: postDataString,
			});

			if (!response.ok) {
				throw new Error("Network response was not ok");
			} else if (response.ok) {
				const data = await response.json();
				$(".fdUserName").html(
					data.results[0].borrowerUser.firstName +
						data.results[0].borrowerUser.lastName
				);
				$(".fdUserPanNo").html(data.results[0].borrowerUser.panNumber);
				$("#fdStudentMobileNumber").val(
					data.results[0].borrowerUser.mobileNumber
				);
				$(".fetchUserBasicInfo,.fduserBankDetails,.actionBtn_fd").show();
			}
		}
		return isValid;
	} catch (error) {
		console.info("call Failed");
		
	}
};

const fetchfeecalculation = async (borrowerId) => {
	try {
		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		const fetchFdBorrowerDetails =
			userisIn == "local"
				? apiBaseURLOXY + borrowerId + "/fee-calculation"
				: apiBaseURLOXY + borrowerId + "/fee-calculation";

		const response = await fetch(fetchFdBorrowerDetails, {
			method: "GET",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
		});

		if (!response.ok) {
			throw new Error("Network response was not ok");
		} else if (response.ok) {
			const data = await response.json();
			$(".interestForfiftenDays").html(data.calculation[0]["Days 15"]);
			$(".interestForthirtyDays").html(data.calculation[1]["Days 30"]);
			$(".interestForfourtyDays").html(data.calculation[2]["Days 45"]);

			return data;
		}
	} catch (error) {
		console.error("Error:", error);
	}
};


function topLendingUser(limit) {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var d = new Date();

	var currYear = d.getFullYear();
	let currMonthNo= d.getMonth()+1;

	var firstDay = new Date(d.getFullYear(), d.getMonth(), 1);
	var presentDate = String(d.getDate()).padStart(2, "0");

	if (presentDate < 10) {
		presentDate = presentDate;
	}

	if(currMonthNo < 10){
		currMonthNo=("0"+currMonthNo);
	}

      const postData={

        	limit:limit,
            startDate:`${currYear}-${currMonthNo}-01`,
            endDate:`${currYear}-${currMonthNo}-${presentDate}`
      }

	if (userisIn == "local") {
		var approveInterestPay =
			apiBaseURLOXY + "TopFiftyLenders_excel_sheet";
	} else {
		var approveInterestPay =
			apiBaseURLOXY + "TopFiftyLenders_excel_sheet";
	}

	$.ajax({
		url: approveInterestPay,
		type: "POST",
		data: JSON.stringify(postData),
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
			console.log(data);

		   $(".topLendingUserExcel").attr("href",data.downloadLink);
			if(data.listResponse.length==0){
			$(".topLendingNoData").show();

			}else{

			var template = document.getElementById(
				"topLendingScript"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.listResponse,
			});
			$("#topLendingTable").html(html);

			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}
function topLendingUserSearch() {

	$("#loadingSec").show();
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let primaryType = sprimaryType;
	let accessToken = saccessToken;


     let limit=$("#topLendingUserCountLimit").val();
      let startDate=$("#topLendingStartDate").val();
      let endDate=$("#topLendingEndDated").val();

      const postData={
        	limit:limit,
            startDate:startDate,
            endDate:endDate
      }


	if (userisIn == "local") {

		var approveInterestPay =
			apiBaseURLOXY +"TopFiftyLenders_excel_sheet";
	} else {
		var approveInterestPay =
			apiBaseURLOXY + "TopFiftyLenders_excel_sheet";
	}

	$.ajax({
		url: approveInterestPay,
		type: "POST",
		data: JSON.stringify(postData),
		contentType: "application/json",
		dataType: "json",

		success: function (data, textStatus, xhr) {
			console.log(data);

	      $("#loadingSec").hide();
            $(".topLendingUserExcel").attr("href",data.downloadLink);
			if(data.listResponse.length==0){
				$(".topLendingNoData").show();

			}else{

			var template = document.getElementById(
				"topLendingScript"
			).innerHTML;
			Mustache.parse(template);
			var html = Mustache.render(template, data);
			var html = Mustache.to_html(template, {
				data: data.listResponse,
			});
			$("#topLendingTable").html(html);
			}
		},
		error: function (xhr, textStatus, errorThrown) {

	         $("#loadingSec").hide();
			console.log("Error Something");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}
const fetchFDBorrowerPersonalDetails = async () => {
	try {
		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		let isValid = true;

		const borrowerId = $("#fetechUserid").val().substring(2);

		if (borrowerId == "") {
			$(".errorfdpaymentborrowerid").show();
			isValid = false;
		} else {
			$(".errorfdpaymentborrowerid").hide();
		}

		if (isValid == true) {
			const fetchPaymentCalculation = await fetchfeecalculation(borrowerId);

			const fetchFdBorrowerDetails =
				userisIn == "local"
					? apiBaseURLOXY + borrowerId + "/new-account-details"
					: apiBaseURLOXY + borrowerId + "/new-account-details";

			const response = await fetch(fetchFdBorrowerDetails, {
				method: "GET",
				headers: {
					"Content-Type": "application/json",
					accessToken: saccessToken,
				},
			});

			if (!response.ok) {
				throw new Error("Network response was not ok");
			} else if (response.ok) {
				const data = await response.json();
				console.log(data);
				$(".paymentfdamount").val(data.fdAmount);
				$(".fdpaymetRoi").val(data.roi);
				return data;
			}
		}
		return isValid;
	} catch (error) {
		console.error("Error:", error);
	}
};

const fetchFDBorrowerFundsTrasfers = async () => {
	try {
		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		let isValid = true;

		const borrowerId = $("#fetchborrowerfD").val().substring(2);

		const fetchFdBorrowerDetails =
			userisIn == "local"
				? apiBaseURLOXY + borrowerId + "/new-account-details"
				: apiBaseURLOXY + borrowerId + "/new-account-details";

		if (borrowerId == "") {
			isValid = false;
			$(".transferBorrowerId").show();
		} else {
			$(".transferBorrowerId").hide();
		}

		if (isValid == true) {
			const response = await fetch(fetchFdBorrowerDetails, {
				method: "GET",
				headers: {
					"Content-Type": "application/json",
					accessToken: saccessToken,
				},
			});

			if (!response.ok) {
				throw new Error("Network response was not ok");
			} else if (response.ok) {
				const data = await response.json();
				console.log(data);

				$(".fdtrasfterUsername").html(data.userName);
				$(".fdtrasfterAccount").html(data.accountNumber);
				$(".fdifsccode").html(data.ifsc);
				$(".fdbranch").html(data.branch);
				$(".fdAmount").html(data.fdAmount);
				$(".showFdTransferDetails").show();
				$(
					".transferFeeAmount,.transferFeeAmountfromSystem,.transfer_button"
				).show();
			}
		}

		return isValid;
	} catch (error) {
		console.error("Error:", error);
	}
};

const verifyFdbankAccountNumber = () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let enteredaccountno = $("#fdaccountNumber").val();
	let enteredIFSCCode = $("#fdIfscCode").val();
	let fdbank = $("#fdBankAccount").val();

	enteredIFSCCode = enteredIFSCCode.toUpperCase();
	enteredIFSCCode = enteredIFSCCode.trim();

	var ifscRegex = /^[A-Z]{4}\d{1}[A-Z0-9]{6}$/i;

	var isValid = true;

	if (enteredaccountno == "") {
		$(".fdBankAccountno").show();
		isValid = false;
	} else {
		$(".fdBankAccountno").hide();
	}

	if (fdbank == "") {
		$(".fdBankAccountchoosen").show();
		isValid = false;
	} else {
		$(".fdBankAccountchoosen").hide();
	}

	if (enteredIFSCCode == "") {
		$(".fdBankIfsccode").show();
		isValid = false;
	} else {
		$(".fdBankIfsccode").hide();
	}

	if (!ifscRegex.test(enteredIFSCCode)) {
		$(".IFSCCodeerror").html("Please enter valid IFSC code.");
		$(".IFSCCodeerror").show();
		isValid = false;
	} else {
		$(".IFSCCodeerror").hide();
	}

	var postData = {
		bankAccount: enteredaccountno,
		ifscCode: enteredIFSCCode,
	};
	var postData = JSON.stringify(postData);

	if (userisIn == "local") {
		validate =
			"http://35.154.48.120:8080/oxynew/v1/user/verifyBankAccountAndIfsc";
	} else {
		validate =
			"https://fintech.oxyloans.com/oxyloans/v1/user/verifyBankAccountAndIfsc";
	}

	if (isValid == true) {
		$.ajax({
			url: validate,
			type: "POST",
			data: postData,
			contentType: "application/json",
			dataType: "json",
			success: function (data, textStatus, xhr) {
				console.info(data);
				if (data.status == "SUCCESS" && data.accountStatus == "VALID") {
					$("#fdBankAccount").append(
						`<option value="${data.data.bankName}" selected>${data.data.bankName}</option`
					);
					$("#fdIfscCode").val(enteredIFSCCode);
					$("#fdUserNameAsPerBank").val(data.data.nameAtBank);
					$("#fdUserBankBranch").val(data.data.branch);
					fdbranchcity = data.data.city;
					$(".fdFillDetails,.submitAccountDetails").show();
				} else {
				}
			},
			error: function (xhr, textStatus, errorThrown) {
				console.log("error");

				$("#user-bank-verify").attr("disabled", false);
				setTimeout(function () {
					$(".userbank_verifyData").removeClass("lildark");
					$(".userbank_verifyData .loader").remove();
				}, 3000);
			},
			beforeSend: function (xhr) {
				xhr.setRequestHeader("accessToken", saccessToken);
			},
		});
	}
	setTimeout(function () {
		$(".userbank_verifyData").removeClass("lildark");
		$(".userbank_verifyData .loader").remove();
	}, 3000);

	return isValid;
};

const createFdRequest = async () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const userId = $("#createFdUserId").val().substring(2);
	const fdAmount = $("#createFdUserAmount").val();
	const createdDate = $("#fdcreated_Date").val();

	const isValid = userId !== "" && fdAmount !== "" && createdDate !== "";

	let isuserId = userId !== "";
	let isfdAmount = fdAmount !== "";
	let iscreatedDate = createdDate !== "";

	$(".fdborrowerIderror")[isuserId ? "hide" : "show"]();
	$(".fdborrowerUserAmount")[isfdAmount ? "hide" : "show"]();
	$(".fdcreated")[iscreatedDate ? "hide" : "show"]();

	const createdFDdata =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/update-fdcreated-date-amount"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/update-fdcreated-date-amount";

	const postData = {
		userId,
		fdAmount,
		createdDate,
	};
	const postDataString = JSON.stringify(postData);
	try {
		if (isValid == true) {
			const response = await fetch(createdFDdata, {
				method: "PATCH",
				headers: {
					"Content-Type": "application/json",
					accessToken: saccessToken,
				},
				body: postDataString,
			});

			if (!response.ok) {
				throw new Error("Network response was not ok");
			} else if (response.ok) {
				const data = await response.json();
				$("#modal-uploadedfddataBorrower").modal("show");
			}
		}
	} catch (error) {
		console.log("Error Something");
	}
};

const borrowerSaveAccountDetails = async () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const userId = $("#fetechUserid").val().substring(2);
	const accountNumber = $("#fdaccountNumber").val();
	const ifsc = $("#fdIfscCode").val();
	const city = fdbranchcity;
	const branch = $("#fdUserBankBranch").val();
	const bankName = $("#fdBankAccount").val();
	const bankChoosen = $("#fdBankAccount").val();
	const leadBy = $("#fdlead").val();
	const consultancy = $("#fdconsultancy").val();
	const roi = $("#fdroi").val();
	const fundingType = $("#fdfundingType").val();
	const country = $("#fdStudentCountry").val();
	const university = $("#FdUniversityName").val();
	const studentMobileNumber = $("#fdStudentMobileNumber").val();
	const fdAmount = $("#fdAmount").val();
	const userName = $("#fdUserNameAsPerBank").val();
	const paymentsCollection = $("#paymentcollection").val();
	const loanType = $("#loanType").val();

	const isValid =
		userId !== "" &&
		accountNumber !== "" &&
		ifsc !== "" &&
		city !== "" &&
		branch !== "" &&
		bankName !== "" &&
		bankChoosen !== "" &&
		leadBy !== "" &&
		consultancy !== "" &&
		roi !== "" &&
		fundingType !== "" &&
		country !== "" &&
		university !== "" &&
		studentMobileNumber !== "" &&
		fdAmount !== "" &&
		paymentsCollection !== "" &&
		loanType != "";

	let isuserId = userId !== "";
	let isaccountNumber = accountNumber !== "";
	let isifsc = ifsc !== "";
	let isbranch = branch !== "";
	let isbankName = bankName !== "";
	let isbankChoosen = bankChoosen !== "";
	let isleadBy = leadBy !== "";
	let isconsultancy = consultancy !== "";
	let isroi = roi !== "";
	let isfundingType = fundingType !== "";
	let iscountry = country !== "";
	let isuniversity = university !== "";
	let ismobileNumber = studentMobileNumber !== "";
	let isfdAmount = fdAmount !== "";
	let ispaymentsCollection = paymentsCollection !== "";
	let isloantype = loanType !== "";

	$(".fdBankAccountno")[isaccountNumber ? "hide" : "show"]();
	$(".fdBankIfsccode")[isifsc ? "hide" : "show"]();
	$(".fdBankBranch")[isbranch ? "hide" : "show"]();
	$(".fdBankNameUserName")[isbankName ? "hide" : "show"]();
	$(".fdBankAccountchoosen")[isbankChoosen ? "hide" : "show"]();
	$(".fDlead")[isleadBy ? "hide" : "show"]();
	$(".fDConsultancy")[isconsultancy ? "hide" : "show"]();
	$(".fDRoi")[isroi ? "hide" : "show"]();
	$(".fdFundingType")[isfundingType ? "hide" : "show"]();
	$(".fdCountry")[iscountry ? "hide" : "show"]();

	$(".fdUniversity")[isuniversity ? "hide" : "show"]();
	$(".fdStudentPhone")[ismobileNumber ? "hide" : "show"]();
	$(".fdamount")[isfdAmount ? "hide" : "show"]();
	$(".paymentcollectionerror")[ispaymentsCollection ? "hide" : "show"]();
	$(".loantypeErrormessage")[isloantype ? "hide" : "show"]();

	const createStudentFdDetails =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/borrower-account-details"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/borrower-account-details";

	const postData = {
		userId,
		accountNumber,
		ifsc,
		city,
		branch,
		bankName,
		userName,
		bankChoosen,
		leadBy,
		consultancy,
		roi,
		fundingType,
		country,
		university,
		studentMobileNumber,
		fdAmount,
		paymentsCollection,
		loanType,
	};
	const postDataString = JSON.stringify(postData);

	console.log(postDataString);

	try {
		if (isValid == true) {
			$("#loadingSec").show();
			const response = await fetch(createStudentFdDetails, {
				method: "PATCH",
				headers: {
					"Content-Type": "application/json",
					accessToken: saccessToken,
				},
				body: postDataString,
			});

			if (!response.ok) {
				throw new Error("Network response was not ok");
				$("#loadingSec").show();
			} else if (response.ok) {
				$("#loadingSec").hide();
				const data = await response.json();
				$("#modal-studentDetails-fd").modal("show");
			}
		}
	} catch (error) {
		console.log("Error Something");
	}
};

const fdverifedUsers = () => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");
	$("#loadingSec").show();

	let fdverifedUsersSearch =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/1/10/BEFORE/bank-details"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/1/10/BEFORE/bank-details";

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: fdverifedUsersSearch,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			if (data.count == 0 || data.count == null) {
				$(".noDatafoundPaid").show();
				$("#loadingSec").hide();
			} else {
				console.log(data);
				const template = document.getElementById(
					"scriptBankverifiedUser"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.borrowerNewBankDetailsResponseDto,
				});
				$("#displayBorrowerVerifiedList").html(html);
				$("#loadingSec").hide();

				let displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".fdverifiedUserList")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						let paginationVerifiedUser =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/" +
								  num +
								  "/10/BEFORE/bank-details"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/" +
								  num +
								  "/10/BEFORE/bank-details";

						var postData = {
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);

						$.ajax({
							url: paginationVerifiedUser,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								const template = document.getElementById(
									"scriptBankverifiedUser"
								).innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.borrowerNewBankDetailsResponseDto,
								});
								$("#displayBorrowerVerifiedList").html(html);
								$("#loadingSec").hide();
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
								$("#loadingSec").hide();
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
			$("#loadingSec").hide();
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const pendingamountUsersList = () => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");
	$("#loadingSec").show();

	let pendingUsersSearch =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/lender-pending-amount-search"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/lender-pending-amount-search";

	var postData = {
		pageNo: 0,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: pendingUsersSearch,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			if (data.totalCount == 0 || data.totalCount == null) {
				$(".nodatapendingamount").show();
				$("#loadingSec").hide();
			} else {
				console.log(data);
				const template = document.getElementById(
					"scriptBankverifiedUser"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.oxyLendersPendingAmountResponseDto,
				});
				$("#displayBorrowerVerifiedList").html(html);
				$("#loadingSec").hide();

				let displayPageNo = data.totalCount / 10;
				displayPageNo = displayPageNo + 1;

				$(".fdverifiedUserList")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						let paginationVerifiedUser =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/" +
								  num +
								  "/10/BEFORE/bank-details"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/" +
								  num +
								  "/10/BEFORE/bank-details";

						var postData = {
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);

						$.ajax({
							url: paginationVerifiedUser,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								const template = document.getElementById(
									"scriptBankverifiedUser"
								).innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.borrowerNewBankDetailsResponseDto,
								});
								$("#displayBorrowerVerifiedList").html(html);
								$("#loadingSec").hide();
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
								$("#loadingSec").hide();
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
			$("#loadingSec").hide();
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const fdFundsTrasfer = async () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const fundsTrasfrerUrl = `${apiBaseURLOXY}funds-transfer`;

	const userId = $("#fetchborrowerfD").val().substring(2);
	const amountFromSystem = $("#fdAmountSystem").val();
	const feeAmount = $("#fdFeeAmount").val();
	const fdAmountFetch = parseInt($(".fdAmount").html());


	let isuserid = userId != "";
	let feeamountvalid = feeAmount == "" ? null : feeAmount;
	let isamountTrasferAmount =
		amountFromSystem != "" && amountFromSystem <= 1000000;

	let fetchFdamount = amountFromSystem > fdAmountFetch;

	let isValid =
		userId != "" &&
		amountFromSystem != "" &&
		isamountTrasferAmount == true &&
		fetchFdamount != true;

	$(".transferBorrowerId")[isuserid ? "hide" : "show"]();
	$(".transferFdAmount")[isamountTrasferAmount ? "hide" : "show"]();

	if (fetchFdamount) {
		$(".transferFdAmount").html("You are Giving more than the FD amount.");
		$(".transferFdAmount")[fetchFdamount ? "show" : "hide"]();
	}

	const postData = {
		userId,
		amountFromSystem,
		feeAmount: feeamountvalid,
	};

	const postDataJson = JSON.stringify(postData);

	try {
		if (isValid == true) {
			const response = await fetch(fundsTrasfrerUrl, {
				method: "PATCH",
				headers: {
					"Content-Type": "application/json",
					accessToken: saccessToken,
				},
				body: postDataJson,
			});

			if (!response.ok) {
				const data = await response.json();
				if (data.errorMessage != "") {
					$(".paymentTrasfer #info-errormessage").html(data.errorMessage);
					$("#modal-payment-failed").modal("show");
				}

				throw new Error("Request failed with status " + response.status);
			} else if (response.ok) {
				$("#modal-paymentfiletocms").modal("show");
			}
		}
	} catch (error) {
		console.info("Error Something Went Wrong");
	}
};

const uploadFdScreenShotData = async (fileType, borrowerId) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	partnerUtmName = getCookie("partnerUtmName");

	const userId = suserId;
	const primaryType = sprimaryType;
	const accessToken = saccessToken;

	const formScreenShot =
		fileType === "HDFC" ? $("#hdfcscreenshot")[0] : $("#iciciscreenshot")[0];
	const fileAppendType =
		fileType === "HDFC" ? "BORROWERHDFCPAYMENT" : "BORROWERICICIPAYMENT";

	const fd = new FormData();
	const files = formScreenShot.files[0];
	fd.append(fileAppendType, files);

	const uploadedFDScreenShotUrl =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/" +
			  borrowerId +
			  "/payment-upload"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/" +
			  borrowerId +
			  "/payment-upload";
	const headers = new Headers();
	headers.append("accessToken", saccessToken);

	try {
		const response = await fetch(uploadedFDScreenShotUrl, {
			method: "POST",
			body: fd,
			headers: headers,
		});

		if (!response.ok) {
			$("#loadingSec").hide();
			throw new Error("Network response was not ok");
		} else if (response.ok) {
			$("#loadingSec").hide();
			const data = await response.json();
			return data;
		}
	} catch (error) {
		console.error("Error:", error);
	}
};

const saveFDPaymentHistory = async () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const saveFdPaymentMethod = `${apiBaseURLOXY}payment-upload`;

	const userId = $("#fetechUserid").val().substring(2);
	const amountFromHDFC = $(".fdhdfcpayment").val();
	const amountFromIcici = $(".icicipayment").val();
	const fdvalue = $(".paymentfdamount").val();
	const fdroi = $(".fdpaymetRoi").val();

	let isValid = userId != "" && amountFromHDFC != "" && amountFromIcici != "";
	let isuserid = userId != "";
	let ishdfcpayment = amountFromHDFC != "";
	let isicicipayment = amountFromIcici != "";
	let isfdvalue = fdvalue != "";
	let isfdroi = fdroi != "";

	$(".paymentHdfc")[ishdfcpayment ? "hide" : "show"]();
	$(".paymenticici")[isicicipayment ? "hide" : "show"]();
	$(".paymentFdValue")[isfdvalue ? "hide" : "show"]();
	$(".paymentFdRoi")[isfdroi ? "hide" : "show"]();

	const paymentArrayData = new Array();
	const paymentId = await fetchfeecalculation(userId);

	if (amountFromHDFC != "0" && amountFromHDFC != "") {
		const hduploadData = await uploadFdScreenShotData("HDFC", userId);

		if (
			hduploadData.paymentsUrls[0].BORROWERHDFCPAYMENT.includes(".JPG") ||
			hduploadData.paymentsUrls[0].BORROWERHDFCPAYMENT.includes(".jpg") ||
			hduploadData.paymentsUrls[0].BORROWERHDFCPAYMENT.includes(".png") ||
			hduploadData.paymentsUrls[0].BORROWERHDFCPAYMENT.includes(".pdf") ||
			hduploadData.paymentsUrls[0].BORROWERHDFCPAYMENT.includes(".jpeg")
		) {
			$(".hfcscreenshotpayment").hide();
		} else {
			$(".hfcscreenshotpayment").show();
			isValid = false;
		}

		const objecthdfc = {
			paymentId: paymentId.id,
			amountPaid: amountFromHDFC,
			url: hduploadData.paymentsUrls[0].BORROWERHDFCPAYMENT,
			accountType: "HDFC",
		};
		paymentArrayData.push(objecthdfc);
	} else {
		$(".hfcscreenshotpayment").hide();
	}

	if (amountFromIcici != "0" && amountFromIcici != "") {
		const iciciUploadData = await uploadFdScreenShotData("ICICI", userId);

		if (
			iciciUploadData.paymentsUrls[0].BORROWERICICIPAYMENT.includes(".JPG") ||
			iciciUploadData.paymentsUrls[0].BORROWERICICIPAYMENT.includes(".jpg") ||
			iciciUploadData.paymentsUrls[0].BORROWERICICIPAYMENT.includes(".png") ||
			iciciUploadData.paymentsUrls[0].BORROWERICICIPAYMENT.includes(".pdf") ||
			iciciUploadData.paymentsUrls[0].BORROWERICICIPAYMENT.includes(".jpeg")
		) {
			$(".iciciscreenshotpayment").hide();
		} else {
			$(".iciciscreenshotpayment").show();
			isValid = false;
		}

		const objecticici = {
			paymentId: paymentId.id,
			amountPaid: amountFromIcici,
			url: iciciUploadData.paymentsUrls[0].BORROWERICICIPAYMENT,
			accountType: "ICICI",
		};
		paymentArrayData.push(objecticici);
	} else {
		$(".iciciscreenshotpayment").hide();
	}

	const postData = {
		paymentsInfo: paymentArrayData,
	};

	const postDataJson = JSON.stringify(postData);

	try {
		if (isValid == true) {
			const response = await fetch(saveFdPaymentMethod, {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					accessToken: saccessToken,
				},
				body: postDataJson,
			});

			if (!response.ok) {
				throw new Error("Request failed with status " + response.status);
			} else if (response.ok) {
				const data = response.json();
				$("#modal-fdpaymentDataUploaded").modal("show");

				setTimeout(() => {
					location.reload();
				}, 3000);
			}
		}

		return isValid;
	} catch (error) {
		console.info("Error Something Went Wrong");
	}
};

const editLoanBorrowerProcess = (
	userID,
	fdamount,
	accountno,
	ifsc,
	nameAtBank,
	choosenbankName,
	bankName,
	leadBy,
	consultancy,
	roi,
	fundingType,
	country,
	university,
	studentMobileNumber,
	fdAmount,
	city,
	branch,
	loanType,
	paymentsCollection
) => {
	$("#borrowerIdLoanAmount").val("BR" + userID);
	$("#borrowerLoanAmount").val(fdamount);
	$("#loanUserAccountNo").val(accountno);
	$("#nameLoanOwner").val(nameAtBank);
	$("#loanUserIfsccode").val(ifsc);
	$("#loanType").val(loanType);
	$(".editbankDetailsStudent").attr("data-choosenbankName", choosenbankName);
	$(".editbankDetailsStudent").attr("data-bankName", bankName);
	$(".editbankDetailsStudent").attr("data-leadBy", leadBy);
	$(".editbankDetailsStudent").attr("data-consultancy", consultancy);
	$(".editbankDetailsStudent").attr("data-roi", roi);
	$(".editbankDetailsStudent").attr("data-fundingType", fundingType);
	$(".editbankDetailsStudent").attr("data-country", country);
	$(".editbankDetailsStudent").attr("data-university", university);
	$(".editbankDetailsStudent").attr("data-fdAmount", studentMobileNumber);
	$(".editbankDetailsStudent").attr("data-studentMobileNumber", fdAmount);
	$(".editbankDetailsStudent").attr("data-city", city);
	$(".editbankDetailsStudent").attr("data-branch", branch);
	$(".editbankDetailsStudent").attr("data-loanType", loanType);
	$(".editbankDetailsStudent").attr(
		"data-paymentcollection",
		paymentsCollection
	);
	$("#modal-add-loanBorrowerApplication").modal("show");
};

const addTheBorrowerLoansOfferToDeal = async () => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	const adduserId = $("#borrowerIdLoanAmount").val();
	const loanAmount = $("#borrowerLoanAmount").val();
	const accountNumber = $("#loanUserAccountNo").val();
	const userName = $("#nameLoanOwner").val();
	const ifsc = $("#loanUserIfsccode").val();
	const loanType = $("#loanType").val();
	const bankChoosen = $(".editbankDetailsStudent").attr("data-choosenbankName");
	const bankName = $(".editbankDetailsStudent").attr("data-bankName");
	const leadBy = $(".editbankDetailsStudent").attr("data-leadBy");
	const consultancy = $(".editbankDetailsStudent").attr("data-consultancy");
	const roi = $(".editbankDetailsStudent").attr("data-roi");
	const fundingType = $(".editbankDetailsStudent").attr("data-fundingType");
	const country = $(".editbankDetailsStudent").attr("data-country");
	const university = $(".editbankDetailsStudent").attr("data-university");
	const studentMobileNumber = $(".editbankDetailsStudent").attr(
		"data-studentMobileNumber"
	);
	const fdAmount = $("#borrowerLoanAmount").val();
	const city = $(".editbankDetailsStudent").attr("data-city");
	const branch = $(".editbankDetailsStudent").attr("data-branch");
	const paymentsCollection = $(".editbankDetailsStudent").attr(
		"data-paymentcollection"
	);
	const userId = adduserId !== "" ? adduserId.substring(2) : "";

	const isValid =
		userId !== "" &&
		loanAmount !== "" &&
		accountNumber !== "" &&
		userName !== "" &&
		ifsc !== "" &&
		loanType !== "";

	let isLoanBorrowerID = userId !== "";
	let isloanAmount = loanAmount !== "";
	let isAccountName = userName !== "";
	let isAccountNumber = accountNumber !== "";
	let isifsc = ifsc !== "";
	let isloanType = loanType !== "";

	$(".loanBorrowerId")[isLoanBorrowerID ? "hide" : "show"]();
	$(".loanAmoutError")[isloanAmount ? "hide" : "show"]();
	$(".accountNumberError")[isAccountNumber ? "hide" : "show"]();
	$(".loanNameError")[isAccountName ? "hide" : "show"]();
	$(".ifscErrorError")[isifsc ? "hide" : "show"]();
	$(".loanTypeError")[isloanType ? "hide" : "show"]();

	const createStudentFdDetails =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/borrower-account-details"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/borrower-account-details";

	const postData = {
		userId,
		accountNumber,
		ifsc,
		city,
		branch,
		bankName,
		userName,
		bankChoosen,
		leadBy,
		consultancy,
		roi,
		fundingType,
		country,
		university,
		studentMobileNumber,
		fdAmount,
		loanType,
		paymentsCollection,
	};
	const postDataString = JSON.stringify(postData);

	console.log(postDataString);

	try {
		if (isValid == true) {
			const response = await fetch(createStudentFdDetails, {
				method: "PATCH",
				headers: {
					"Content-Type": "application/json",
					accessToken: saccessToken,
				},
				body: postDataString,
			});

			if (!response.ok) {
				throw new Error("Network response was not ok");
			} else if (response.ok) {
				const data = await response.json();

				$("#modal-add-loanBorrowerApplication").modal("hide");
				$("#modal-studentDetails-fd").modal("show");

				setTimeout(() => {
					location.reload();
				}, 5000);
			}
		}
	} catch (error) {
		console.log("Error Something");
	}
};

const uploadFdPaymentStatusHDFC = (status, bank) => {

	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();

	let fdpaymentVerification =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/payment-details"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/payment-details";

	var postData = {
		bankType: bank,
		status: status,
		pageNo: 1,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: fdpaymentVerification,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			if (data.count == null) {
				$(".nohdfcpayments").show();
				$("#loadingSec").hide();
			} else {
				$("#loadingSec").hide();
				console.log(data);
				const template = document.getElementById("fdpaymentHdfc").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.paymentsInfo,
				});
				$("#displayPaymentHdfc").html(html);

				let displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".hdfcPaginationAll")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						let fdpayment =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/payment-details"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/payment-details";

						var postData = {
							bankType: bank,
							status: status,
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);

						$.ajax({
							url: fdpayment,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								console.log(data);
								const template =
									document.getElementById("fdpaymentHdfc").innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.paymentsInfo,
								});
								$("#displayPaymentHdfc").html(html);

								$("#loadingSec").hide();
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
								$("#loadingSec").hide();
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
			$("#loadingSec").hide();
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const ApproveFdPaymentStatusHDFC = (status, bank) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();

	let fdpaymentVerification =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/payment-details"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/payment-details";

	var postData = {
		bankType: bank,
		status: status,
		pageNo: 1,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: fdpaymentVerification,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			if (data.count == null) {
				$(".nohdfcapprovedpayments").show();
				$("#loadingSec").hide();
			} else {
				$("#loadingSec").hide();
				console.log(data);
				const template = document.getElementById(
					"approvedfdpaymenthdfc"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.paymentsInfo,
				});
				$("#approveddisplayhdfcViewList").html(html);

				let displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".hdfcapprovedlist")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						let fdpayment =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/payment-details"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/payment-details";

						var postData = {
							bankType: bank,
							status: status,
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);

						$.ajax({
							url: fdpayment,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								console.log(data);
								const template = document.getElementById(
									"approvedfdpaymenthdfc"
								).innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.paymentsInfo,
								});
								$("#approveddisplayhdfcViewList").html(html);

								$("#loadingSec").hide();
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
								$("#loadingSec").hide();
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
			$("#loadingSec").hide();
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const rejectedFdPaymentStatusHDFC = (status, bank) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();

	let fdpaymentVerification =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/payment-details"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/payment-details";

	var postData = {
		bankType: bank,
		status: status,
		pageNo: 1,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: fdpaymentVerification,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			if (data.count == null) {
				$(".nohdfcrejectedlist").show();
				$("#loadingSec").hide();
			} else {
				$("#loadingSec").hide();
				console.log(data);
				const template = document.getElementById(
					"rejectedfdpaymenthdfc"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.paymentsInfo,
				});
				$("#displayRejectHdfcViewList").html(html);

				let displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".hdfcrejectedfile")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						let fdpayment =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/payment-details"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/payment-details";

						var postData = {
							bankType: bank,
							status: status,
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);

						$.ajax({
							url: fdpayment,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								console.log(data);
								const template = document.getElementById(
									"rejectedfdpaymenthdfc"
								).innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.paymentsInfo,
								});
								$("#displayRejectHdfcViewList").html(html);

								$("#loadingSec").hide();
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
								$("#loadingSec").hide();
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
			$("#loadingSec").hide();
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const uploadFdPaymentStatusICICI = (status, bank) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();

	let fdpaymentVerification =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/payment-details"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/payment-details";

	var postData = {
		bankType: bank,
		status: status,
		pageNo: 1,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: fdpaymentVerification,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			if (data.count == null) {
				$(".noicicipayments").show();
				$("#loadingSec").hide();
			} else {
				$("#loadingSec").hide();
				console.log(data);
				const template = document.getElementById("fdpaymentIcici").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.paymentsInfo,
				});

				$("#displayIciciViewList").html(html);

				let displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".iciciPaginationAll")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						let fdpayment =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/payment-details"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/payment-details";

						var postData = {
							bankType: bank,
							status: status,
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);

						$.ajax({
							url: fdpayment,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								const template =
									document.getElementById("fdpaymentIcici").innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.paymentsInfo,
								});
								$("#displayIciciViewList").html(html);

								$("#loadingSec").hide();
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
								$("#loadingSec").hide();
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
			$("#loadingSec").hide();
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const ApprovePaymentStatusICICI = (status, bank) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();

	let fdpaymentVerification =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/payment-details"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/payment-details";

	var postData = {
		bankType: bank,
		status: status,
		pageNo: 1,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: fdpaymentVerification,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			if (data.count == null) {
				$(".approvenoicicipayments").show();
				$("#loadingSec").hide();
			} else {
				$("#loadingSec").hide();
				console.log(data);
				const template = document.getElementById(
					"approvedpaymentIcici"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.paymentsInfo,
				});

				$("#approvedisplayIciciViewList").html(html);

				let displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".iciciapprovedPaginationAll")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						let fdpayment =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/payment-details"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/payment-details";

						var postData = {
							bankType: bank,
							status: status,
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);

						$.ajax({
							url: fdpayment,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								const template = document.getElementById(
									"approvedpaymentIcici"
								).innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.paymentsInfo,
								});
								$("#approvedisplayIciciViewList").html(html);

								$("#loadingSec").hide();
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
								$("#loadingSec").hide();
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
			$("#loadingSec").hide();
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const rejectedPaymentStatusICICI = (status, bank) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	$("#loadingSec").show();

	let fdpaymentVerification =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/payment-details"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/payment-details";

	var postData = {
		bankType: bank,
		status: status,
		pageNo: 1,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: fdpaymentVerification,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			if (data.count == null) {
				$(".norejectedicicipayments").show();
				$("#loadingSec").hide();
			} else {
				$("#loadingSec").hide();
				console.log(data);
				const template =
					document.getElementById("rejectpaymentIcici").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.paymentsInfo,
				});

				$("#rejecteddisplayIciciViewList").html(html);

				let displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".icicirejectedPaginationAll")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						let fdpayment =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/payment-details"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/payment-details";

						var postData = {
							bankType: bank,
							status: status,
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);

						$.ajax({
							url: fdpayment,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								const template =
									document.getElementById("rejectpaymentIcici").innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.paymentsInfo,
								});
								$("#rejecteddisplayIciciViewList").html(html);

								$("#loadingSec").hide();
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
								$("#loadingSec").hide();
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
			$("#loadingSec").hide();
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const viewAllFdListInformation = (status) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");
	$("#loadingSec").show();
	let fdviewList =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/fd-details-basedon-status"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/fd-details-basedon-status";

	var postData = {
		status: status,
		pageNo: 1,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: fdviewList,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			console.log(data);
			if (data.count == 0) {
				$(".noDataAllFds").show();

				$("#loadingSec").hide();
			} else {
				$("#loadingSec").hide();

				console.log(data);

				const convertNewArray = data.borrowerNewBankDetailsResponseDto.map(
					(data, index) => {
						const newObj = { ...data };
						if (newObj.status === "SAVED") {
							newObj.status = "FD BOOKED";
						}
						return newObj;
					}
				);

				const template = document.getElementById("fdlistAll").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: convertNewArray,
				});
				$("#displayBorrowerAllFds").html(html);

				let displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".fdPaginationAll")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						let fdviewListpagination =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/fd-details-basedon-status"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/fd-details-basedon-status";

						var postData = {
							status: status,
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);

						$.ajax({
							url: fdviewListpagination,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								$("#loadingSec").hide();

								const convertNewArrayPagination =
									data.borrowerNewBankDetailsResponseDto.map((data, index) => {
										const newObj = { ...data };
										if (newObj.status === "SAVED") {
											newObj.status = "FD BOOKED";
										}
										return newObj;
									});

								const template = document.getElementById("fdlistAll").innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: convertNewArrayPagination,
								});
								$("#displayBorrowerAllFds").html(html);
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
								$("#loadingSec").hide();
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
			$("#loadingSec").hide();
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const viewunningFdListInformation = (status) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let fdviewList =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/fd-details-basedon-status"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/fd-details-basedon-status";

	var postData = {
		status: status,
		pageNo: 1,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: fdviewList,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			if (data.count == 0) {
				$(".noDataRunningFds").show();
			} else {
				const template = document.getElementById("fdlistRunning").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.borrowerNewBankDetailsResponseDto,
				});
				$("#displayBorrowerRunningFds").html(html);

				let displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".fdPaginationRunning")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						let fdviewListpagination =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/fd-details-basedon-status"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/fd-details-basedon-status";

						var postData = {
							status: status,
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);

						$.ajax({
							url: fdviewListpagination,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								const template =
									document.getElementById("fdlistRunning").innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.borrowerNewBankDetailsResponseDto,
								});
								$("#displayBorrowerRunningFds").html(html);
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const viewclosedFdListInformation = (status) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let fdviewList =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/fd-details-basedon-status"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/fd-details-basedon-status";

	var postData = {
		status: status,
		pageNo: 1,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: fdviewList,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			if (data.count == 0) {
				$(".noDataClosedFds").show();
			} else {
				console.log(data);

				const template = document.getElementById("fdlistClosed").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.borrowerNewBankDetailsResponseDto,
				});
				$("#displayBorrowerClosedFds").html(html);

				let displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".fdPaginationclosed")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						let fdviewListpagination =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/fd-details-basedon-status"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/fd-details-basedon-status";

						var postData = {
							status: status,
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);

						$.ajax({
							url: fdviewListpagination,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								const template =
									document.getElementById("fdlistClosed").innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.borrowerNewBankDetailsResponseDto,
								});
								$("#displayBorrowerClosedFds").html(html);
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const viewNegativeFdListInformation = (status) => {
	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	let fdviewList =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/fd-details-basedon-status"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/fd-details-basedon-status";

	var postData = {
		status: status,
		pageNo: 1,
		pageSize: 10,
	};

	const postDataStr = JSON.stringify(postData);

	$.ajax({
		url: fdviewList,
		type: "POST",
		data: postDataStr,
		contentType: "application/json",
		dataType: "json",
		success: (data, textStatus, xhr) => {
			if (data.count == null) {
				$(".noDataNegativeFds").show();
			} else {
				console.log(data);

				const template = document.getElementById("fdlistnagative").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.borrowerNewBankDetailsResponseDto,
				});
				$("#displayBorrowerNegative").html(html);

				let displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".fdPaginationnegative")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", (event, num) => {
						let fdviewListpagination =
							userisIn === "local"
								? "http://35.154.48.120:8080/oxynew/v1/user/fd-details-basedon-status"
								: "https://fintech.oxyloans.com/oxyloans/v1/user/fd-details-basedon-status";

						var postData = {
							status: status,
							pageNo: num,
							pageSize: 10,
						};

						const postDataStr = JSON.stringify(postData);

						$.ajax({
							url: fdviewListpagination,
							type: "POST",
							contentType: "application/json",
							dataType: "json",
							data: postDataStr,
							success: (data, textStatus, xhr) => {
								const template =
									document.getElementById("fdlistnagative").innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.borrowerNewBankDetailsResponseDto,
								});
								$("#displayBorrowerNegative").html(html);
							},
							error: (xhr, textStatus, errorThrown) => {
								console.log("Error Something");
							},
							beforeSend: (xhr) => {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: (xhr, textStatus, errorThrown) => {
			console.log("Error Something");
		},
		beforeSend: (xhr) => {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const updateFdAmount = (paymentId) => {
	$("#fdclosingPaymentId").attr("data-clikedId", paymentId);
	$("#modal-approveFdStatus").modal("show");
};

const fdClosing = async () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const fundsTrasfrerUrl = `${apiBaseURLOXY}fd-closing`;
	const borrowerPaymentId = $("#fdclosingPaymentId").attr("data-clikedId");
	const totalInterestOnFd = $("#closingFdamount").val();
	const fdcloseddate = $("#closingFddate").val();
	const amountReturnedToRepayment = $("#repaymentAmount").val();
	const amountReturnedToAnother = $("#returntoanootheraccount").val();
	const comments = $("#fdreturncomment").val();

	let istotalInterestOnFd = totalInterestOnFd != "";
	let fdcloseddatevalid = fdcloseddate != "";
	let isamountReturnedToRepayment = amountReturnedToRepayment != "";
	let isamountReturnedToAnother = amountReturnedToAnother != "";
	let iscomments = comments != "";

	let isValid =
		totalInterestOnFd != "" &&
		fdcloseddate != "" &&
		amountReturnedToRepayment != "" &&
		amountReturnedToAnother != "" &&
		comments != "";

	$(".closingFdamounterror")[istotalInterestOnFd ? "hide" : "show"]();
	$(".closingFddateerror")[fdcloseddatevalid ? "hide" : "show"]();
	$(".closingFdrepaymenterror")[
		isamountReturnedToRepayment ? "hide" : "show"
	]();
	$(".closingreturntoanothererror")[
		isamountReturnedToAnother ? "hide" : "show"
	]();
	$(".closingrfdreturncommenterror")[iscomments ? "hide" : "show"]();

	const postData = {
		borrowerPaymentId,
		totalInterestOnFd,
		fdClosedDate: fdcloseddate,
		amountReturnedToRepayment,
		amountReturnedToAnother,
		comments,
	};

	const postDataJson = JSON.stringify(postData);

	try {
		if (isValid == true) {
			const response = await fetch(fundsTrasfrerUrl, {
				method: "PATCH",
				headers: {
					"Content-Type": "application/json",
					accessToken: saccessToken,
				},
				body: postDataJson,
			});

			if (!response.ok) {
				throw new Error("Request failed with status " + response.status);
			} else if (response.ok) {
				$("#modal-approveFdStatus").modal("hide");
				$("#modal-sucess-fd-closing").modal("show");
			}
		}
	} catch (error) {
		console.info("Error Something Went Wrong");
	}
};

const downloadTheActiveFds = async () => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const paymentUpdateUrl = `${apiBaseURLOXY}active_loan_excelsheet`;
	const postData = {};
	const postDataJson = JSON.stringify(postData);

	try {
		const response = await fetch(paymentUpdateUrl, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataJson,
		});
		const data = await response.json();
		if (!response.ok) {
			throw new Error(data.errorMessage);
		} else if (response.ok) {
			$("#modal-filedownloadedSuccessfullyfds").modal("show");
			window.open(data.downloadUrl, "_blank");
		}
	} catch (error) {}
};

const updateThePaymentStatus = async (status) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let paymentId =
		status == "APPROVED"
			? $(".fdpaymetApprovalApprove").attr("data-paymentId")
			: $(".fdpaymetApprovalreject").attr("data-paymentId");
	const paymentUpdateUrl = `${apiBaseURLOXY}${paymentId}/${status}/payment-status-updation`;
	const postData = {};

	const postDataJson = JSON.stringify(postData);

	try {
		const response = await fetch(paymentUpdateUrl, {
			method: "PATCH",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataJson,
		});

		const data = await response.json();

		if (!response.ok) {
			throw new Error(data.errorMessage);
		} else if (response.ok) {
			$("#modal-approvePayment").modal("hide");
			$("#modal-rejectPayment").modal("hide");
			$("#modal-approve-paymentScreen").modal("show");

			setTimeout(() => {
				location.reload();
			}, 4000);
		}
	} catch (error) {
		$(
			"#modal-approve-paymentwarningVerification .loansUserSuccessMessage"
		).html(error.message);
		$("#modal-approvePayment").modal("hide");
		$("#modal-approve-paymentwarningVerification").modal("show");
		console.log(error.message);
	}
};

const viewFdpaymentHistory = async (borrowerId) => {
	try {
		const suserId = getCookie("sUserId");
		const sprimaryType = getCookie("sUserType");
		const saccessToken = getCookie("saccessToken");

		const fetchFdBorrowerPayment =
			userisIn == "local"
				? apiBaseURLOXY + borrowerId + "/payments"
				: apiBaseURLOXY + borrowerId + "/payments";

		const response = await fetch(fetchFdBorrowerPayment, {
			method: "GET",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
		});

		if (!response.ok) {
			throw new Error("Network response was not ok");
		} else if (response.ok) {
			const data = await response.json();

			if (data.length == 0) {
				$("#displayNoRecords").show();
				$("#modal-viewPaymentHistory").modal("show");
			} else {
				const template = document.getElementById(
					"scriptiewFdPaymentHistory"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data,
				});
				$("#displayViewPaymentRecords").html(html);
				$("#modal-viewPaymentHistory").modal("show");
			}
		}
	} catch (error) {
		console.error("Error:", error);
	}
};

const viewFdPayment = (url) => {
	var sourcePath = JSON.stringify(url);
	var contentTypeCheck = ".pdf";
	if (sourcePath.indexOf(contentTypeCheck) != -1) {
		window.open(url, "_blank");
	} else {
		$.colorbox({ href: url });
	}
};

const viewFdpaymentapprove = (paymentId) => {
	$(".fdpaymetApprovalApprove").attr("data-paymentId", paymentId);
	$("#modal-approvePayment").modal("show");
};

const viewFdpaymentreject = (paymentId) => {
	$(".fdpaymetApprovalreject").attr("data-paymentId", paymentId);
	$("#modal-rejectPayment").modal("show");
};
const viewFdpaymentInvoice = () => {
	$("#modal-generateInvoice").modal("show");
};

const sendTheReminder = () => {
	$("#modal-sendReminder").modal("show");
};

const searchFduser = (type) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let searchUserid;

	if (type == "allfd") {
		searchUserid = $("#searchCalloffdall").val().substring(2);
		const isValid = searchUserid == "" ? true : false;
		const sowerror = isValid
			? $(".searchCalloffdallerror").show()
			: $(".searchCalloffdallerror").hide();
	} else if (type == "allrunning") {
		searchUserid = $("#searchCalloffdallrunning").val().substring(2);
		const isValid = searchUserid == "" ? true : false;
		const sowerror = isValid
			? $(".searchCalloffdallrunningerror").show()
			: $(".searchCalloffdallrunningerror").hide();
	} else if (type == "closedfd") {
		searchUserid = $("#searchCallofclosedfd").val().substring(2);
		const isValid = searchUserid == "" ? true : false;
		const sowerror = isValid
			? $(".searchCallofclosedfderror").show()
			: $(".searchCallofclosedfderror").hide();
	} else if (type == "nagativefd") {
		searchUserid = $("#searchCallofnagativefd").val().substring(2);
		const isValid = searchUserid == "" ? true : false;
		const sowerror = isValid
			? $(".searchCallofnagativefderror").show()
			: $(".searchCallofnagativefderror").hide();
	} else if (type == "bankVerified") {
		searchUserid = $("#searchCalloffbankVerified").val().substring(2);
		const isValid = searchUserid == "" ? true : false;
		const sowerror = isValid
			? $(".searchCalloffdallverifiederror").show()
			: $(".searchCalloffdallverifiederror").hide();
	}

	const searchUrl =
		userisIn === "local"
			? apiBaseURLOXY + searchUserid + "/fd-search"
			: apiBaseURLOXY + searchUserid + "/fd-search";

	fetch(searchUrl, {
		method: "GET",
		headers: {
			accessToken: saccessToken,
		},
	})
		.then((response) => response.json())
		.then((data) => {
			const converdatatoarray = [data];

			const converdatatoarraysearch = converdatatoarray.map((data, index) => {
				const newObj = { ...data };
				if (newObj.status === "SAVED") {
					newObj.status = "FD BOOKED";
				}
				return newObj;
			});

			if (type == "allfd") {
				const template = document.getElementById("fdlistAll").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: converdatatoarraysearch,
				});

				$("#displayBorrowerAllFds").html(html);
			} else if (type == "allrunning") {
				const template = document.getElementById("fdlistRunning").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: converdatatoarraysearch,
				});
				$("#displayBorrowerRunningFds").html(html);
			} else if (type == "closedfd") {
				const template = document.getElementById("fdlistClosed").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: converdatatoarraysearch,
				});
				$("#displayBorrowerClosedFds").html(html);
			} else if (type == "nagativefd") {
				const template = document.getElementById("fdlistnagative").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: converdatatoarraysearch,
				});
				$("#displayBorrowerNegative").html(html);
			} else if (type == "bankVerified") {
				console.log(converdatatoarraysearch);
				const template = document.getElementById(
					"scriptBankverifiedUser"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: converdatatoarraysearch,
				});
				$("#displayBorrowerVerifiedList").html(html);
			}
		})
		.catch((error) => {
			console.log("Error Something", error);
		});
};

const searchFdStats = async (status) => {
	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const paymentUpdateUrl = `${apiBaseURLOXY}fd-statistics`;

	const postData =
		status == "search"
			? {
					type: null,
					startDate: $(".fdstartdatepicker").val(),
					endDate: $(".fdenddatepicker").val(),
			  }
			: {
					type: "ALL",
					startDate: null,
					endDate: null,
			  };

	const postDataJson = JSON.stringify(postData);

	try {
		const response = await fetch(paymentUpdateUrl, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataJson,
		});

		if (!response.ok) {
			$(".fdstatcsNodata").show();
			throw new Error("Request failed with status " + response.status);
		} else if (response.ok) {
			const data = await response.json();

			if (data.length == 0) {
				$(".fdstatcsNodata").show();
			} else {
				const template = document.getElementById("scriptfdstatsList").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data,
				});
				$("#displayfdstatcslist").html(html);
			}
		}
	} catch (error) {
		$(".fdstatcsNodata").show();
		console.info("Error Something Went Wrong");
	}
};

const downloadFdInvoice = (url) => {

	var sourcePath = JSON.stringify(url);
	var contentTypeCheck = ".pdf";
	if (sourcePath.indexOf(contentTypeCheck) != -1) {
		window.open(url, "_blank");
	} else {
		$.colorbox({ href: url });
	}
};

const downloadShett = (url) => {
	if (url == undefined) {
		alert("pdf url not found");
	} else {
		window.open(url, "_blank");
	}
};

const downloadClosaedInvoice = (url) => {
	if (url == undefined || url == null) {
		alert("pdf url not found");
	} else {
		window.open(url, "_blank");
	}
};

const searchDownloadInvoice = async (status) => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const paymentUpdateUrl = `${apiBaseURLOXY}payments-invoice`;

	const postData =
		status == "search"
			? {
					type: null,
					startDate: $(".fdinvoicestartDate").val(),
					endDate: $(".invoiceenddate").val(),
			  }
			: {
					type: "BULK",
					startDate: null,
					endDate: null,
			  };

	const postDataJson = JSON.stringify(postData);

	try {
		const response = await fetch(paymentUpdateUrl, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataJson,
		});

		if (!response.ok) {
			$(".fdinvoiceNodata").show();
			throw new Error("Request failed with status " + response.status);
		} else if (response.ok) {
			const data = await response.json();

			console.log(data);

			if (data.length == 0) {
				$(".fdinvoiceNodata").show();
			} else {
				const newArray = [];
				data.map((data, index) => {
					newArray.push({
						invoice: data.invoice,
						so: index + 1,
					});
				});

				const template = document.getElementById(
					"scriptfdinvoiceList"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: newArray,
				});
				$("#displayfdinvoiceList").html(html);
			}
		}
	} catch (error) {
		$(".fdinvoiceNodata").show();
		console.info("Error Something Went Wrong");
	}
};

const searchfdmonthlyInfo = async (status) => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const paymentUpdateUrl = `${apiBaseURLOXY}fd-monthly-details`;

	const currentDate = new Date();
	const currentMonth = currentDate.getMonth() + 1; // Months are 0-based, so add 1 to get the actual month.
	const currentDateOfMonth = currentDate.getDate();
	const currentYear = currentDate.getFullYear();

	const lastDayOfCurrentMonth = new Date(currentYear, currentMonth, 0);
	const numberOfDaysInCurrentMonth = lastDayOfCurrentMonth.getDate();

	const currentMonthAppend =
		currentMonth < 10 ? `0${currentMonth}` : currentMonth;

	const postData =
		status == "search"
			? {
					startDate: $(".fdmonthlystartDatepicker").val(),
					endDate: $(".fdmonthlyenddatepicker").val(),
			  }
			: {
					startDate: `01-${currentMonthAppend}-${currentYear}`,
					endDate: `${currentDateOfMonth}-${currentMonthAppend}-${currentYear}`,
			  };

	const postDataJson = JSON.stringify(postData);

	try {
		const response = await fetch(paymentUpdateUrl, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataJson,
		});

		if (!response.ok) {
			$(".fdmonthlyNodata").show();
			throw new Error("Request failed with status " + response.status);
		} else if (response.ok) {
			const data = await response.json();

			if (data.length == 0) {
				$(".fdmonthlyNodata").show();
			} else {
				console.log(data);

				$(".montly_report_Btn").attr(
					"onClick",
					"downloadShett('" + data.monthDownloadUrl + "')"
				);

				const template = document.getElementById(
					"fdmonthlypaymentList"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.fdInformation,
				});
				$("#displayfdmonthlyList").html(html);
			}
		}
	} catch (error) {
		$(".fdmonthlyNodata").show();
		console.info("Error Something Went Wrong");
	}
};

const searchFdoptions = async (status) => {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const inputType = $("#FdSearch").val();
	const isValid =
		inputType != ""
			? $(".errorsearchlist").hide()
			: $(".errorsearchlist").show();

	const fdsearchType = `${apiBaseURLOXY}search-individual-types`;
	const postData = {
		inputType,
	};

	const postDataJson = JSON.stringify(postData);
	try {
		const response = await fetch(fdsearchType, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataJson,
		});

		if (!response.ok) {
			throw new Error("Request failed with status " + response.status);
		} else if (response.ok) {
			const data = await response.json();
			$(".fundingList").show();
			if (inputType == "consultancy") {
				$("#fundingTypelist").empty();
				data.searchTypes.map((data, index) => {
					$("#fundingTypelist").append(
						'<option value="' + data + '">' + data + "</option>"
					);
				});
			} else if (inputType == "fundingType") {
				$("#fundingTypelist").empty();
				data.searchTypes.map((data, index) => {
					$("#fundingTypelist").append(
						'<option value="' + data + '">' + data + "</option>"
					);
				});
			} else if (inputType == "bank") {

				$("#fundingTypelist").empty();
				data.searchTypes.map((data, index) => {
					$("#fundingTypelist").append(
						'<option value="' + data + '">' + data + "</option>"
					);
				});
			} else {
				$("#fundingTypelist").empty();
				$(".fundingList").hide();
			}
		}
	} catch (error) {
		console.info("Error Something Went Wrong");
	}
};

const searchfdclosedInfo = async (status) => {


	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const paymentUpdateUrl = `${apiBaseURLOXY}fd-closed-details`;

	const startDate = $(".fdclosedstartDatepicker").val();
	const endDate = $(".fdclosedfdenddatepicker").val();

	const postData = {
		startDate,
		endDate,
	};

	const postDataJson = JSON.stringify(postData);

	try {
		const response = await fetch(paymentUpdateUrl, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataJson,
		});

		if (!response.ok) {
			$(".fdmonthlyNodata").show();
			throw new Error("Request failed with status " + response.status);
		} else if (response.ok) {
			const data = await response.json();
			console.log(data);

			if (data.length == 0) {
				$(".fdmonthlyNodata").show();
				$(".downloadclosedFddeatils").hide();
			} else {
				console.log(data);
				$(".downloadclosedFddeatils").show();
				$(".montly_report_Btn").attr(
					"onClick",
					"downloadShett('" + data.monthDownloadUrl + "')"
				);

				const template = document.getElementById(
					"fdmonthlypaymentList"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.fdInformation,
				});
				$("#displayfdmonthlyList").html(html);
			}
		}
	} catch (error) {
		$(".fdmonthlyNodata").show();
		console.info("Error Something Went Wrong");
	}
};

const searchingFdListUsers = async (status) => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const inputType = $("#FdSearch").val();
	const inputSubType = $("#fundingTypelist").val();
	const isValid =
		inputType != "" && inputSubType != ""
			? $(".errorsearchlist").hide()
			: $(".errorsearchlist").show();

	const fdsearchListType = `${apiBaseURLOXY}download-fd-details`;
	const postData = {
		inputType,
		inputSubType,
	};

	const postDataJson = JSON.stringify(postData);
	try {
		const response = await fetch(fdsearchListType, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataJson,
		});

		if (!response.ok) {
			throw new Error("Request failed with status " + response.status);
		} else if (response.ok) {
			const data = await response.json();
			if (data.listOfFds.length == 0) {
				$(".searchUserDownload").hide();
				$("#noDatafdsearchList").show();
			} else {
				$(".downloadsearchList").attr(
					"onclick",
					"downloadShett('" + data.url + "')"
				);

				$(".searchUserDownload").show();
				const template =
					document.getElementById("displaySeachedList").innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data.listOfFds,
				});
				$("#displaysearchListTable").html(html);
			}
		}
	} catch (error) {
		console.info("Error Something Went Wrong");
	}
};

const fdExecutedPaymentDetails = () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let getLenders;
	if (userisIn == "local") {
		getLenders = apiBaseURLOXY + "fds-executed-from-system";
	} else {
		getLenders = apiBaseURLOXY + "fds-executed-from-system";
	}

	var postData = {
		pageNo: 1,
		pageSize: 10,
	};

	var postData = JSON.stringify(postData);
	console.log(postData);
	$.ajax({
		url: getLenders,
		dataType: "json",
		contentType: "application/json",
		type: "POST",
		data: postData,
		success: function (data, textStatus, xhr) {
			console.log(data);

			if (data.length == 0) {
				$(".noRecordFound").show();
			} else {
				totalEntries = data.length;
				const template = document.getElementById(
					"loadDealwithdrawfundslistTpl"
				).innerHTML;
				Mustache.parse(template);

				const html = Mustache.to_html(template, {
					data: data.borrowersTotalFdsResponse,
				});
				$("#dealwithdrawfundslist").html(html);

				let displayPageNo = totalEntries / 10;
				displayPageNo = displayPageNo + 1;
				/*888888888888888*/
				$(".fdrepaymentinfodetails")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						//$(".content4").html("Page " + num); // or some ajax content loading...

						var postData = {
							pageNo: num,
							pageSize: 10,
						};

						var postData = JSON.stringify(postData);

						let getLenders;
						if (userisIn == "local") {
							getLenders = apiBaseURLOXY + "fds-executed-from-system";
						} else {
							getLenders = apiBaseURLOXY + "fds-executed-from-system";
						}

						$.ajax({
							url: getLenders,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								console.log(data);
								const template = document.getElementById(
									"loadDealwithdrawfundslistTpl"
								).innerHTML;
								Mustache.parse(template);
								const html = Mustache.to_html(template, {
									data: data.borrowersTotalFdsResponse,
								});
								$("#dealwithdrawfundslist").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
				/*888888888888888*/
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
};

const editPendingLoanAmount = (
	userId,
	amountType,
	amount,
	dealId,
	reason,
	transactionType,
	noOfDays,
	id
) => {
	$("#editpendingloanUserid").val("LR" + userId);
	$("#pendingLoanAmount").val(amount);
	$("#editpendingloanAmountid").val(dealId);
	$("#editloandpendingReason").val(reason);
	$("#editloadnDays").val(noOfDays);
	$("#pendingamountType").val(amountType);
	$("#pendingTransactiontype").val(transactionType);

	$(".editpendingloanaamountUserForm").attr("data-userID", userId);
	$(".editpendingloanaamountUserForm").attr("data-AmountType", amountType);
	$(".editpendingloanaamountUserForm").attr("data-Amount", amount);
	$(".editpendingloanaamountUserForm").attr("data-dealId", dealId);
	$(".editpendingloanaamountUserForm").attr("data-reason", reason);
	$(".editpendingloanaamountUserForm").attr(
		"data-transactionType",
		transactionType
	);
	$(".editpendingloanaamountUserForm").attr("data-noofdays", noOfDays);
	$(".editpendingloanaamountUserForm").attr("data-id", id);

	$("#modal-add-loanBorrowerApplication").modal("show");
};

const formeditlenderPendingAmount = () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const id = $(".editpendingloanaamountUserForm").attr("data-id");
	const userId = $("#editpendingloanUserid").val().substring(2);
	const amount = $("#pendingLoanAmount").val();
	const dealId = $("#editpendingloanAmountid").val();
	const reason = $("#editloandpendingReason").val();
	const amountType = $("#pendingamountType").val();
	const transactionType = $("#pendingTransactiontype").val();
	const noOfDays = $("#editloadnDays").val();

	let isValid = true;

	isValid =
		userId === ""
			? ($(".editpendingloanUseriderror").show(), false)
			: ($(".editpendingloanUseriderror").hide(), true);
	isValid =
		amount === ""
			? ($(".erroreditpendingLoanAmount").show(), false)
			: ($(".erroreditpendingLoanAmount").hide(), true);
	isValid =
		reason === ""
			? ($(".erroreditloandpendingReason").show(), false)
			: ($(".erroreditloandpendingReason").hide(), true);
	isValid =
		amountType === ""
			? ($(".errorpendingamountType").show(), false)
			: ($(".errorpendingamountType").hide(), true);
	isValid =
		transactionType === ""
			? ($(".pendingLoanEmountTransactiontype").show(), false)
			: ($(".pendingLoanEmountTransactiontype").hide(), true);

	const lenderPendingPayments =
		userisIn == "local"
			? apiBaseURLOXY + "lender-pending-amount"
			: apiBaseURLOXY + "lender-pending-amount";

	const postData = JSON.stringify({
		id,
		userId,
		amount,
		dealId,
		reason,
		amountType,
		transactionType,
		noOfDays,
	});
	console.log(postData);

	if (isValid) {
		fetch(lenderPendingPayments, {
			method: "PATCH",
			body: postData,
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
		})
			.then((response) => {
				if (response.ok) {
					$("#modal-add-loanBorrowerApplication").modal("hide");
					$("#modal-lenderpendingsuccess").modal("show");

					setTimeout((data) => {
						location.reload();
					}, 5000);
				} else {
					response.json().then((data) => {
						console.log(data);
						$(".modal-body #display_text").html(data.errorMessage);
						$("#modal-offlineInterestAndPrincipal").modal("show");
					});
				}
			})
			.catch((error) => {
				console.log("Error Something", error);
			});
	}
	return isValid;
};

const generateh2hconfirmationfilependingamount = (id) => {
	$(".cmsfilePendingAmount").attr("data-id", id);
	$("#modal-confirm-generateFile").modal("show");
};

const generateh2hfilependingamount = async () => {

	let suserId = getCookie("sUserId");
	let sprimaryType = getCookie("sUserType");
	let saccessToken = getCookie("saccessToken");

	const id = $(".cmsfilePendingAmount").attr("data-id");

	const h2hfile =
		userisIn === "local"
			? "http://35.154.48.120:8080/oxynew/v1/user/" +
			  id +
			  "/pending-amount-excelsheet"
			: "https://fintech.oxyloans.com/oxyloans/v1/user/" +
			  id +
			  "/pending-amount-excelsheet";

	const postData = {};
	const postDataString = JSON.stringify(postData);

	console.log(postDataString);

	try {
		const response = await fetch(h2hfile, {
			method: "PATCH",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataString,
		});

		if (!response.ok) {
			throw new Error("Network response was not ok");
		} else if (response.ok) {
			const data = await response.json();

			$("#modal-confirm-generateFile").modal("hide");
			$("#modal-h2hfilegeneratedLendingPendingAmount").modal("show");

			setTimeout(() => {
				location.reload();
			}, 5000);
		}
	} catch (error) {
		console.log("Error Something");
	}
};

const selectThedafaultValues = () => {
	const date = new Date();
	const day = date.getDate();
	const month = date.getMonth() + 1;
	const year = date.getFullYear();
	$(".cmsDay").val(day < 10 ? `0${day}` : day);
	$(".cmsmonth").val(month < 10 ? `0${month}` : month);
	$(".cmsYear").val(year);
	console.info(month, day, year);
};



function uploadExcelImage() {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");
	partnerUtmName = getCookie("partnerUtmName");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	var form = $("#excelImageUploadData")[0];

	var fd = new FormData();
	var files = form.files[0];
	fd.append("BULKINVITE", files);

	if (userisIn == "local") {
		var bulkImage =
			"http://35.154.48.120:8080/oxynew/v1/user/downloadCampaignUrl";
	} else {
		var bulkImage =
			"https://fintech.oxyloans.com/oxyloans/v1/user/downloadCampaignUrl";
	}

	$.ajax({
		url: bulkImage,
		type: "POST",
		data: fd,
		contentType: false,
		processData: false,
		enctype: "multipart/form-data",

		success: function (data, textStatus, xhr) {
			bulkinviteImage=data.downloadUrl;	
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$("#modal-errorpartnerMOUupload").modal("show");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});
}

const sampleEmail=()=>{

	setTimeout(()=>{

		 const projectType = $("#projectType").val();
          if(projectType=="bmv"){
          	$("#array_sampleEmail").val("Hi@BMV.money");
            }else if (projectType=="oxybricks"){
          	$("#array_sampleEmail").val("support@oxyloans.com");
            }else if (projectType=="oxyloans"){
          	$("#array_sampleEmail").val("support@oxyloans.com");
            }else if(projectType=="erice"){
          	$("#array_sampleEmail").val("Hi@BMV.money");
          }

	},3000);
};


const sendBulkInviteExcel= async () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const inputType = $("#excelfileupload")[0];
	const projectType = $("#projectType").val();
    const InviteType=$("#inviteType").val();
    const bulkinviteMessage=$("#bulkinviteMessage").val();

	var fd = new FormData();
	var files = inputType.files[0];
    fd.append("BULKINVITE", files);
    fd.append("projectType", projectType);
    fd.append("inviteType", InviteType);
    fd.append("message", bulkinviteMessage);

   if(InviteType=="sampleemail"){

   let mailSubject=$("#array_mailSubject").val();
   let sampleEmail=$("#array_sampleEmail").val();
   let mailDispalyName=$("#array_mailDispalyName").val();

     if(bulkinviteImage!=null){
      var whatsappImage=bulkinviteImage;
      }else{
       var whatsappImage=bulkinviteImage;
     }
   
         fd.append("imageUrl", whatsappImage);
          fd.append("sampleEmail", sampleEmail);
         fd.append("mailDispalyName", mailDispalyName);
         fd.append("mailSubject", mailSubject);


   }else if (InviteType=="email"){
 
   let mailSubject=$("#array_mailSubject").val();
   let mailDispalyName=$("#array_mailDispalyName").val();



      if(bulkinviteImage!=null){
      var whatsappImage=bulkinviteImage;
      }else{
       var whatsappImage=bulkinviteImage;
     }

     
          fd.append("imageUrl", whatsappImage);
          fd.append("mailSubject", mailSubject);
         fd.append("mailDispalyName", mailDispalyName);
        
   }else if (InviteType=="samplemsg"){


      if(bulkinviteImage!=null){
      var whatsappImage=bulkinviteImage;
      }else{
       var whatsappImage=bulkinviteImage;
     }


   let sampleMobile=$("#array_sampleMobile").val();
  
   fd.append("sampleMobile",sampleMobile);
   fd.append("imageUrl",whatsappImage);
  
   }else if (InviteType=="whatsapp"){

      if(bulkinviteImage!=null){
      var whatsappImage=bulkinviteImage;
      }else{
       var whatsappImage=bulkinviteImage;
     }
      fd.append("imageUrl", whatsappImage);

   }
    
	const fdsearchListType = `${apiBaseURLOXY}inviteCampaignThroughExcel`;

	$.ajax({
			url: fdsearchListType,
			type: "POST",
			data: fd,
			contentType: false,
			processData: false,

		success: function (data, textStatus, xhr) {
			$(".lenderParticipationinDeal").show("show");
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
			$("#modal-errorpartnerMOUupload").modal("show");
		},

		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	})

};


const excelPreviewMessage=()=>{

	const projectType = $("#projectType").val();
    const bulkinviteMessage=$("#bulkinviteMessage").val();


      if(bulkinviteImage!=null){
      var whatsappImage=bulkinviteImage;
      }else{
       var whatsappImage=bulkinviteImage;
     }

    if(projectType=="bmv"){
    $(".excelsheetUploadImage").attr("src","https://bmv.money/assets/img/BMVMONEYLOGO.png");
    }else if (projectType=="oxybricks"){
    	$(".excelsheetUploadImage").attr("src","https://oxybricks.world/assets/images/oxybricks.jpg");
    }else if (projectType=="oxyloans"){
      $(".excelsheetUploadImage").attr("src","https://assets.thehansindia.com/hansindia-bucket/7423_loans.jpg");
    }else if (projectType=="erice"){
    $(".excelsheetUploadImage").attr("src","https://erice.in/web/images/h2.png");
    }

   if(whatsappImage){
   	 $(".largeImagePart").show();
   	 $(".largeImagesrc").attr("src",whatsappImage);

   }
    $(".previewContent").empty();
    $(".previewContent").html(bulkinviteMessage);
	$("#modal-previewEmail").modal("show");
}




const registerLenderDownload = async () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const paymentUpdateUrl = `${apiBaseURLOXY}newLenders_excel_sheet`;

	const startDate = $(".registerStartdate").val();
	const endDate = $(".registerUserEnddate").val();

	const postData = {
		startDate,
		endDate,
	};

	const postDataJson = JSON.stringify(postData);

	try {
		const response = await fetch(paymentUpdateUrl, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataJson,
		});

		if (!response.ok) {
			$(".fdinvoiceNodata").show();
			throw new Error("Request failed with status " + response.status);
		} else if (response.ok) {
			const data = await response.json();
			console.log(data);

			if (data.length == 0) {
				$(".fdinvoiceNodata").show();
				
			} else {
				
				$(".fdinvoiceNodata").hide();

				
                 const newArray=[];

                   const obj={
                   	so:1,
                   	downloadUrl:data.downloadUrl,
                   	emailSent : data.emailStatus ,
                   }
                  newArray.push(obj);

				const template = document.getElementById(
					"scriptfdinvoiceList"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: newArray,
				});
				$("#displayfdinvoiceList").html(html);
			}
		}
	} catch (error) {
		$(".fdmonthlyNodata").show();
		console.info("Error Something Went Wrong");
	}
};


const lenderdashboardGraphs = async () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const paymentUpdateUrl = `${apiBaseURLOXY}grapical_image_admin_module`;

	const date = new Date();
	const day = date.getDate();
	const month = date.getMonth() + 1;
	const year = date.getFullYear();

   	const currentDate= day < 10 ? `0${day}` : day;
	 const currentMonth= month < 10 ? `0${month}` : month;



	const postData = {
		startDate:`${year}-${currentMonth}-01`,
		endDate:`${year}-${currentMonth}-${currentDate}`
	};

	const postDataJson = JSON.stringify(postData);

	try {
		const response = await fetch(paymentUpdateUrl, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataJson,
		});

		if (!response.ok) {
			$(".fdinvoiceNodata").show();
			throw new Error("Request failed with status " + response.status);
		} else if (response.ok) {
			const data = await response.json();
			


 var ctx = document.getElementById('myChart').getContext("2d");
  myChart=new Chart(ctx, {
    type: 'line',
    data: {
      labels: ['active Lenders', 'monthly Fee', 'quarterly Fee', 'halfyearly fee','1 year Fee','5 years Fee','10 Years fee','life Time'],
      datasets: [{
        label: 'Oxyloans Metrics',
        data: [data[0].activeLenders, data[0].monthlyPaidFeeLenders, data[0].quarterlyPaidFeeLenders, data[0].halfyearlyPaidFeeLenders,data[0].yearlyPaidFeeLenders,data[0].fiveYearsPaidFeeLenders,data[0].tenYearsPaidFeeLenders,data[0].lifeTimeFeeLenders],
        borderWidth: 1
      }]
    },
   
  });
 	
		}
	} catch (error) {
		
	}
};


const dashboardgraphViewFunction = async () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const paymentUpdateUrl = `${apiBaseURLOXY}grapical_image_admin_module`;

	const startDate = $(".dashboardStart").val();
	const endDate = $(".dashboardEnd").val();

	const postData = {
		startDate,
		endDate
	};

	const postDataJson = JSON.stringify(postData);

	try {
		const response = await fetch(paymentUpdateUrl, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataJson,
		});

		if (!response.ok) {
			$(".fdinvoiceNodata").show();
			throw new Error("Request failed with status " + response.status);
		} else if (response.ok) {
			const data = await response.json();

			console.log(data);

			if(myChart instanceof Chart) {
              myChart.destroy();
              }


setTimeout(()=>{
var ctx = document.getElementById('myChart').getContext("2d");
 myChart=new Chart(ctx, {
    type: 'line',
    data: {
      labels: ['active Lenders', 'monthly Fee', 'quarterly Fee', 'halfyearly fee','1 year Fee','5 years Fee','10 Years fee','life Time'],
      datasets: [{
        label: 'Oxyloans Metrics',
        data: [ data[0].activeLenders, data[0].monthlyPaidFeeLenders, data[0].quarterlyPaidFeeLenders, data[0].halfyearlyPaidFeeLenders,data[0].yearlyPaidFeeLenders,data[0].fiveYearsPaidFeeLenders,data[0].tenYearsPaidFeeLenders,data[0].lifeTimeFeeLenders],
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });

},1000);

		}
	} catch (error) {
		
	}
};



const cmsbeforefileSearchonchmage=()=>{

	const selected=$("#cmsbeforefileSearch").val();
	
	if(selected=="cmsbeforefile"){
		$(".cmsbeforestartdatediv").show();
		$(".cmsbeforeenddatediv").show();
		$(".cmsbeforefilestatus").show();
	}else{
		$(".cmsbeforestartdatediv").hide();
		$(".cmsbeforeenddatediv").hide();
		$(".cmsbeforefilestatus").hide();
	};
}


const cmsbeforefilesList = async () => {

	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	const paymentUpdateUrl = `${apiBaseURLOXY}before-intiated-file`;

	const date = $(".dashboardStart").val();
	const endDate = $(".dashboardEnd").val();
	const fileStatus = $("#cmsbeforefileexcution").val();

	const postData = {
	    date,
		endDate,
		fileStatus
	};

	const postDataJson = JSON.stringify(postData);

	try {
		const response = await fetch(paymentUpdateUrl, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				accessToken: saccessToken,
			},
			body: postDataJson,
		});

		if (!response.ok) {
			$(".fdinvoiceNodata").show();
			throw new Error("Request failed with status " + response.status);
		} else if (response.ok) {
			const data = await response.json();
			console.log(data);

			if (data.length == 0) {
				$(".oxydisplayNodata").show();
				
			} else {
				
				$(".oxydisplayNodata").hide();
				const template = document.getElementById(
					"partnerdisplayDealsCmsFolderList"
				).innerHTML;
				Mustache.parse(template);
				const html = Mustache.to_html(template, {
					data: data,
				});
				$("#partnerdisplaycmsoutputfolderFiles").html(html);
			}
		}
	} catch (error) {
		$(".oxydisplayNodata").show();
		console.info("Error Something Went Wrong");
	}
};




function referralEarningMonthWise(passingdate) {




	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;

	    const searchmonth=$("#referralEarnigMonthwise").val();
        const searchyear =$("#referalEarningYearwise").val();

const monthNames = ["January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];

	const date = new Date();
	const day = date.getDate();
	const month = date.getMonth() + 1;
	const year = date.getFullYear();

   	const currentDate= day < 10 ? `0${day}` : day;
	 const currentMonth= month < 10 ? `0${month}` : month;

	if (userisIn == "local") {
		var getborrowers =
			"http://35.154.48.120:8080/oxynew/v1/user/displayMonthlyAmount";
	} else {
		var getborrowers =
			"https://fintech.oxyloans.com/oxyloans/v1/user/displayMonthlyAmount";
	}



    if(passingdate!="search"){
    	var postData = {
		pageNo: 1,
		pageSize: 10,
		month: currentMonth,
        year:year
	};

    }else{

    	var postData = {
		pageNo: 1,
		pageSize: 10,
		month:searchmonth,
        year:searchyear

	};

    }

	

	var postData = JSON.stringify(postData);

	$.ajax({
		url: getborrowers,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
            console.log(data);

			 let totalEntries = data.count;
			 if (totalEntries == 0 || totalEntries == null) {
				$("#displayReferalMonthlyEarnings").html("");
                  $('#displayReferalMonthlyEarnings').append("<tr><td colspan='12'>No data found</td></tr>");
				  // $("#noRecordFound").show();
			    } else {
				var template = document.getElementById(
					"referalEarningMonthWiseScript"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.lenderReferenceAmountResponse,
				});
               $("#displayReferalMonthlyEarnings").html(html);

				var displayPageNo = data.count / 10;
				displayPageNo = displayPageNo + 1;

				$(".viewreferalMonthlyPagination")
					.bootpag({
						total: displayPageNo,
						page: 1,
						maxVisible: 5,
						leaps: true,
						firstLastUse: true,
						first: "←",
						last: "→",
						wrapClass: "pagination",
						activeClass: "active",
						disabledClass: "disabled",
						nextClass: "next",
						prevClass: "prev",
						lastClass: "last",
						firstClass: "first",
					})
					.on("page", function (event, num) {
						var postData = {
							pageNo: num,
							pageSize: "10",
							month: currentMonth,
                            year:year
						};

						var postData = JSON.stringify(postData);

						if (userisIn == "local") {
							var getborrowers =
								"http://35.154.48.120:8080/oxynew/v1/user/displayMonthlyAmount";
						} else {
							var getborrowers =
								"https://fintech.oxyloans.com/oxyloans/v1/user/displayMonthlyAmount";
						}
						$.ajax({
							url: getborrowers,
							type: "POST",
							data: postData,
							contentType: "application/json",
							dataType: "json",
							success: function (data, textStatus, xhr) {
								$("#noRecordFound").hide();
								
				var template = document.getElementById(
					"referalEarningMonthWiseScript"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: data.lenderReferenceAmountResponse,
				});
               $("#displayReferalMonthlyEarnings").html(html);
							},
							error: function (xhr, textStatus, errorThrown) {
								console.log("Error Something");
							},
							beforeSend: function (xhr) {
								xhr.setRequestHeader("accessToken", saccessToken);
							},
						});
					});
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");


		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});

}


const myreferalMonthWiseBreakUp=async (subrefealId)=>{
	const curentpage=document.querySelectorAll(".viewreferalMonthlyPagination > ul > li.active > a");
     let activepageno = "";
     curentpage.forEach(function(anchor) {
     activepageno=anchor.textContent;
    });

     	const suserId = getCookie("sUserId");
	const sprimaryType = getCookie("sUserType");
	const saccessToken = getCookie("saccessToken");

	let userId = suserId;
	let primaryType = sprimaryType;
	let accessToken = saccessToken;
	
	 const searchmonth=$("#referralEarnigMonthwise").val();
     const searchyear =$("#referalEarningYearwise").val();

	const date = new Date();
	const day = date.getDate();
	const month = date.getMonth() + 1;
	const year = date.getFullYear();

   	const currentDate= day < 10 ? `0${day}` : day;
	 const currentMonth= month < 10 ? `0${month}` : month;


	if (userisIn == "local") {
		var getborrowers =
			"http://35.154.48.120:8080/oxynew/v1/user/displayMonthlyAmount";
	} else {
		var getborrowers =
			"https://fintech.oxyloans.com/oxyloans/v1/user/displayMonthlyAmount";
	}

    if(searchmonth !="" &&  searchyear !=""){
    	var postData = {
		pageNo: activepageno,
		pageSize: 10,
		month:searchmonth,
        year:searchyear
	};
    }else{
    	var postData = {
		pageNo: activepageno,
		pageSize: 10,
        month: currentMonth,
        year:year

	};

    }
	var postData = JSON.stringify(postData);


		$.ajax({
		url: getborrowers,
		type: "POST",
		data: postData,
		contentType: "application/json",
		dataType: "json",
		success: function (data, textStatus, xhr) {
            console.log(data);

   

           const getuser=data.lenderReferenceAmountResponse.find((data,index)=>data.referrerId==subrefealId);
           console.log(getuser);

			 let totalEntries = getuser.lenderReferralsResponse.length;
			 if (totalEntries == 0 || totalEntries == null) {
				$("#displayReferalMonthlyEarnings").html("");
                  $('#displayReferalMonthlyEarnings').append("<tr><td colspan='12'>No data found</td></tr>");
				  
			    } else {


				var template = document.getElementById(
					"monthwiseEarningSubScript"
				).innerHTML;
				Mustache.parse(template);
				var html = Mustache.render(template, data);
				var html = Mustache.to_html(template, {
					data: getuser.lenderReferralsResponse,
				});
               $("#lenderpaymentinfosubamount").html(html);
               $("#modal-viewPaymentstatus-subpayment-referral").modal("show");

				
			}
		},
		error: function (xhr, textStatus, errorThrown) {
			console.log("Error Something");
		},
		beforeSend: function (xhr) {
			xhr.setRequestHeader("accessToken", saccessToken);
		},
	});

 
}